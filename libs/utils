#!/bin/bash
####
## Contains Utility functions used in all aspects of package management.
## kernel utilities such as buildKernel, setKernelConfig
## Fetching utilities: fetch_file, fetch_list
## checkSha1
## sinstall
## preservedRebuild
## buildBDeps

####
## Set a Kernel config file
## As we set this here, its possible to override it later.
KERNEL_CONFIG_FILE=/usr/src/linux/.config

####
## Set the window title
##
function title {
	PS1=$PS1_SAVE
	if [[ ! -z $1 ]]; then
		echo -ne "\033]0;spkg - $@\007"
	else
		## Restore the saved and set a title default
		## We should check if there is a title set before and if so use that instead.
		## we can't assume one is or isn't set as this is up to the user/distro not us.
		## For the moment however its better to set a default, than to unset one and have it
		## display an ugly "Untitled". setting a default even if not what the user had wanted
		## is also still better than not unsetting a title and having an artifact of whatever
		## title we set last.
		PS1="$PS1_SAVE\033]0;\u@\h - \w\007"
	fi
}
export -f title

####
## Set a Kernel config value
## Would be nice all vars exist and if not set, set to blank
## VAR=   This is not set
## VAR="" This is an empty set value
## Sadly this is not the case, so the logic is much more in-depth.
setKernelConfig() {
	local var=$1
	local val=$2

	if grep -E "(^|[[:space:]])${var}(=|[[:space:]])" $KERNEL_CONFIG_FILE > /dev/null; then
		sed -i "/\(^\| \)$var\(=\| \)/ s,^.*$,$var=$val," $KERNEL_CONFIG_FILE
	else
		## We need to append the var=val
		echo "$var=$val" >> $KERNEL_CONFIG_FILE
	fi
}
export -f setKernelConfig

####
## This requires a /usr/src/linux symlink to our kernel
## and either a .config within the directory OR /proc/config.gz to be enabled within our running kernel.
##
## Auto mounting of /boot is available
## vmlinuz and System.map will be renamed to match the kernel version.
## a grub config will also be automatically be generated.
buildKernel() {
	local SPKG_ARCH=$ARCH
	local SPKG_INSTALL_PATH=$INSTALL_PATH
	unset ARCH INSTALL_PATH
	## Detect our config file
	[ ! -e /usr/src/linux ] && die "you should set your /usr/src/linux symlink to a valid kernel source."
	if [[ ! -e $KERNEL_CONFIG_FILE && ! -e /proc/config.gz ]]; then
		echo "Cannot Build kernel without either a /proc/config.gz or a $KERNEL_CONFIG_FILE"
		die "Please go to /usr/src/linux and run: make menuconfig"
	fi
	if [[ -e /proc/config.gz && ! -e $KERNEL_CONFIG_FILE ]]; then
		gzip -cd /proc/config.gz > $KERNEL_CONFIG_FILE
		echo " * Using current running kernel's config"
	fi

	## Get our kernel version from the symlink.
	KERNEL_VER=$(readlink -f /usr/src/linux | sed -e 's,.*linux-,,' -e 's,/$,,')
	echo " $GREEN*$NORMAL Building Kernel - $GREEN$KERNEL_VER$NORMAL"
	title "Building Kernel - $KERNEL_VER"

	cd /usr/src/linux

	####
	## Set some default config values here

	## Set the default init to OpenRC.
#	setKernelConfig CONFIG_DEFAULT_INIT '"/sbin/openrc-init"'
	setKernelConfig CONFIG_IKCONFIG y
	setKernelConfig CONFIG_IKCONFIG_PROC y
	setKernelConfig CONFIG_WERROR n
	setKernelConfig CONFIG_PSI y
	setKernelConfig CONFIG_PSI_DEFAULT_DISABLED n
	setKernelConfig CONFIG_IKHEADERS n
	setKernelConfig CONFIG_CGROUPS y
	setKernelConfig CONFIG_MEMCG y
	setKernelConfig CONFIG_EXPERT n
	setKernelConfig CONFIG_RELOCATABLE y
	setKernelConfig CONFIG_RANDOMIZE_BASE y
	setKernelConfig CONFIG_STACKPROTECTOR y
	setKernelConfig CONFIG_STACKPROTECTOR_STRONG y
	setKernelConfig CONFIG_UEVENT_HELPER n
	setKernelConfig CONFIG_DEVTMPFS y
	setKernelConfig CONFIG_DEVTMPFS_MOUNT y
	setKernelConfig CONFIG_FRAMEBUFFER_CONSOLE y
	setKernelConfig CONFIG_X86_X2APIC y
	setKernelConfig CONFIG_PSI_MSI y
	setKernelConfig CONFIG_IOMMU_SUPPORT y
	setKernelConfig CONFIG_IRQ_REMAP y

	## Remove Processing of Documentation
	sed /Documentation/d -i Kconfig

	echo " * Running: make oldconfig"
	make oldconfig
	echo " * Compiling (using: $MAKEOPTS)"
	make $MAKEOPTS

	## Mount /boot if it exists
	if [[ -e /etc/fstab && ! -z $(grep /boot /etc/fstab) && -z $(mount | grep /boot) ]]; then
		echo " * Mounting /boot"
		mount /boot
		BOOT_MOUNTED=1
	elif [[ ! -e /etc/fstab ]]; then
		echo " $IMPORTANT you don't appear to have a /etc/fstab created!"
	fi
	echo " * Installing."
	make install modules_install
	mv /boot/System.map{,-${KERNEL_VER}}
	mv /boot/vmlinuz{,-${KERNEL_VER}}

	echo " * Generating grub config"
	if [[ ! -e /boot/grub ]]; then
		echo " $IMPORTANT It doesn't appear grub has been installed into /boot/grub"
		echo " $IMPORTANT we'll place a config here, but you will need to finish the install."
		mkdir -p /boot/grub
	fi

	## Check if grub is installed before we generate the config.
	if [[ $( Installed-getPkg "system/grub" | getVersion) != 0 ]]; then
		grub-mkconfig -o /boot/grub/grub.cfg
	else
		echo " $IMPORTANT system/grub is not installed. Unable to generate a config."
		echo " $IMPORTANT Once installed run: grub-mkconfig -o /boot/grub/grub.cfg"
	fi

	## Unmount /boot
	if [[ ! -z $BOOT_MOUNTED ]]; then
		echo " * Unmounting /boot"
		umount /boot
	fi
	export ARCH=$SPKG_ARCH
	export INSTALL_PATH=$SPKG_INSTALL_PATH
}

####
## Check the WORLD file for a PKG
## Returns nothing, if nothing is found.
getPkgFromWorld() {
	local WORLD=${2:-$PKG_WORLD}
	[ -z $WORLD ] && die "Error: World File not set"
    grep "^$1\$" $WORLD 2> /dev/null || true
}

####
## Checks if a PKG is recorded within WORLD
## This requires the WORLD file to be expanded as WORLD may contain @sets
isPkgInWorld() {
	## Check the status of the ExpandedWorld against that of WORLD
	## This offers the ability for @sets to be recorded and updated later within the set.
	## If the WORLD is newer than that of ExpandedWorld update it
	if [[ ! -e $PKG_WORLD.expanded || $(stat -c '%Y' $PKG_WORLD) -gt $(stat -c '%Y' $PKG_WORLD.expanded) ]]; then
		local w
		grep -v '^@' $PKG_WORLD > $PKG_WORLD.expanded
		local list=$(expandSets $(grep '^@' $PKG_WORLD || true) )
		for w in $list; do
			if [[ $w == *:* ]]; then
				$w=${w/:/\/\/\/}
			else
				w+="///"
			fi
			w+="///"
		done
	fi
	## Otherwise, getPkgFromWorld
	getPkgFromWorld $1 $PKG_WORLD.expanded
}

####
## Adds an Entry to our INSTALL_CHART
Install-addPkg() {
	eval echo $1 >> $INSTALL_CHART
}

####
## Gather a list of packages based on what type of module we're needing to rebuild.
rebuildModules() {
	local type=$1
	case $type in
		kernel)
			type=KERNEL_MODULE ;;
		perl)
			type=PERL_MODULE ;;
		python)
			type=PYTHON_MODULE ;;
	esac
	for m in $(find ${PKG_CACHE} -iname $type | sed -e "s,/$type,," -e "s,${PKG_CACHE}/,,")
	do
		echo -n "$(getCategory $m)/$(getName $m) "
	done
}

####
## Build Dependencies
## There are a few types of Dependencies
## 1) Run time (RDEPS)
## 2) Build time (BDEPS)
## 3) Binary (DEPS)
## 4) USE flag Dependencies (UDEPS)
## 5) Circular Dependencies (CDEPS)
##
## Because dependencies can change across versions, This
## will only update the BDEPS of the installed package.
buildBDeps() {
	local OUT=

	## Use our BDEPS file installed within PKG_CACHE
	Installed-getPkg $1 > /dev/null

	[ $VERBOSE -ge 1 ] && >&2 echo -n "$PKG_CAT/$PKG_NVR"

	## Filter out the Toolchain. These are always depended on,
	## So we don't need it complicating the logic
	PKG_FILTER=("system/util-linux" "system/glibc" "system/gcc")

	(
		set -e

		## Load our saved USE flags.
		if [ -e $PKG_CACHE/$PKG_CAT/$PKG_NAME/$PKG_VR/USE_FLAGS ]; then
			USE=$(cat $PKG_CACHE/$PKG_CAT/$PKG_NAME/$PKG_VR/USE_FLAGS)
		fi
		[ $VERBOSE -ge 1 ] && >&2 echo -n " [ USE: $USE ]: "
		## Before we source it, we need to get the IUSE
		## Without this the UDEPS will be incomplete.
		PKG_BLD=$(getBldFile $PKG)
		PKG_VR=$(getVerRev $PKG)
		PKG_NVR=$PKG_NAME-$PKG_VR
		USE+=" $(grep '[^#]*IUSE=' "$PKG_BLD" | sed -e 's,.*IUSE=",,' -e 's,".*$,,' || true)"
		source "$PKG_BLD"
		if pkg-restricts "nobin"; then
			[ $VERBOSE -ge 1 ] && >&2 echo -n "none"
			return 0
		fi

		PKG_FILTER+=(${CDEPS[@]})
		## For this to work properly we need to save our USE flag and set it to this prior to sourcing
		## If the user changes it after its been installed, it may skew the results.
		PKG_FILTER+=(${UDEPS[@]})

		## Force a refresh of the BDEPS file.
		if [[ $FORCE == 1 ]]; then
			getBDeps "$PKG_CACHE/$PKG/CONTENTS"
		fi

		## Itterate over it and find matching files within each package's CONTENTS
		for dep in $(cat "$PKG_CACHE/$PKG_CAT/$PKG_NAME/$PKG_VR/BDEPS"); do
			## readlink to resolve relative paths that occationally show up.
			## use dirname first in case the file is a symlink
#			dep=$(readlink -f $(dirname $dep))/${dep##*/}

			## Grab a list of category/PKG names for each file.
			## It is possible for multiple results to occur.
			O=$(grep -r --include=CONTENTS "^$dep$" $PKG_CACHE |
				sed -e 's,:.*,,' \
				    -e "s,$PKG_CACHE/,," \
				    -e 's,/CONTENTS,,' || true)
			PKG_VR=${O##*/}
			O=${O%/*}
			[ -e $PKG_CACHE/$O/$PKG_VR/$PKG_VR.build ] &&
				PKG_SLOT=$(grep 'SLOT=' "$PKG_CACHE/$O/${PKG_VR}/${PKG_VR}.build" | sed 's,.*SLOT=,,')

			## No package found for the file.
			if [[ -z $O ]]; then
				>&2 echo " !! $dep Not found in any package"
				echo $dep >> $PRESERVED_LOG
				continue
			fi
			## Filter out itself.
			[[ "$PKG_CAT/$PKG_NAME" == "$O" ]] && continue

			## If its not within our filter, or already added, add it to the list.
			if [[ ! ${PKG_FILTER[*]} =~ (^|[[:space:]]|=|>|<)"$O"($|[[:space:]]|:|-[0-9]) &&
				  ! $OUT =~ (^|[[:space:]])"$O"($|[[:space:]]) ]]; then
				OUT+=" $O"
				[[ $PKG_SLOT != "0" ]] && OUT+=":$PKG_SLOT"
				[ $VERBOSE -ge 1 ] && echo -n "$O:$PKG_SLOT '$dep' "
			fi
		done

		## Filter out duplicates we didn't catch earlier.
		local D=$(echo $OUT|tr ' ' '\n'|sort|uniq|tr '\n' ' ')
		## Trim the space at the end for cosmetic reasoning.
		D=${D%% }
		## Dependencies
		if ! grep '^DEPS=' $PKG_BLD > /dev/null 2>&1; then
			echo -n "DEPS Missing ($PKG_BLD) - checking for BDEPS: "
			if grep '^BDEPS=' $PKG_BLD > /dev/null 2>&1; then
				echo "Updating."
				sed -i 's,^BDEPS=["'\'']\(.*\)\["'\''],DEPS=\"\1\"\nBDEPS=\"\",' $PKG_BLD
			else
				echo "Not found, Skipping.."
			fi
		fi

		## Theoretically speaking sorting is wasted if this is exclusively used
		## to add DEPS, but this isn't always the case.
		## sort things to avoid false-positives
		local LD=$(grep '^DEPS=' $PKG_BLD | sed -e 's,^DEPS=["'\''],,' -e 's,["'\''].*,,'|tr ' ' '\n'|sort|uniq|tr '\n' ' ' || true)

		## If any need updating
		if [[ ${LD%% } != $D ]]; then
			local AD=""
			for l in $D; do
				if [[ ! $LD =~ (^|[[:space:]])"$l"($|[[:space:]]|:) ]]; then
					AD+=" $l"
				fi
			done
			local RD=""
			for l in $LD; do
				if [[ ! $D =~ (^|[[:space:]])"$l"($|[[:space:]]|:) ]]; then
					RD+=" $l"
				fi
			done

			echo; echo " * Updating $PKG_CAT/$PKG_NVR:"
			[[ ! -z $AD ]] && echo "  - Added:$AD"
			[[ ! -z $RD ]] && echo "  - Removed:$RD"
			if [[ $PRETEND != 1 ]]; then
				sed -i "s,^DEPS=[\"'].*[\"'],DEPS=\"${D}\"," $PKG_BLD
			fi
		fi

	)
	HASH_UPDATE=true
}

## Fetch a file from a given address
## Optionally save it under a given name.
fetch_file() {
	## Just Ignore Empty calls.
	[[ $1 == "" ]] && return 0
	local FILE=${1##*/}
	local OUTFILE=${2:-$FILE}
	local DISTFILES=${3:-$DISTFILES}

	## If we already exist, ignore it
	[ -e "${DISTFILES}/${OUTFILE}" ] && return 0

	#	curl --xattr -o "${DISTFILES}/${OUTFILE}" "$1"
	## If we encounter an Error, delete the file and error out.
	if ! wget -nv --show-progress --xattr -c -O "${DISTFILES}/${OUTFILE}" "$1"; then
		[[ -e "$DISTFILES/$OUTFILE" ]] && rm "${DISTFILES}/${OUTFILE}"
		>&2 echo "   FILE: $FILE"
		>&2 echo "OUTFILE: $OUTFILE"
		>&2 echo "1: $1"
		>&2 echo "2: $2"
		>&2 echo "$PKG_CAT/$PKG_NAME-$PKG_VERSION"
		die "Error Downloading";
	fi
}
export -f fetch_file

####
## Fetch a list of files
## Requires 1: A Message to output
##          2: A \n seperated list of files to fetch
##          3: Optionally if 'src' or 'patch' is supplied, it will update the variables altering their filename to the renamed value.
##          4: Optionally supply 1 to update the sha1sum if the hash fails and save it within the package's sha1 file within its directory.
##             Requires a PKG_BLD be set
## TODO: Multiple File fetching via curl's parallel-immediate and parallel-max options
## Check if files exist, verify their sha1sum/signatures
## If any don't exist add them to a fetch list
## If any fail their checksums report them and die.
## If any fail and $4 == 1 add them to a fetch list and update the checksums.
## Finally fetch the list and check any remaining checksums.
fetch_list() {
	local IFS=$'\n'
	local list=($2)
	## Used in --updatesha1
	local update_sha=${4:-0}
	local fetch_list=()

	## Check if any of the files within the list exist, if they don't add them to a fetch list.
	## if the files exist, check their sha1sum, if they fail, delete and refetch, files will be checked again after downloading.
	local length=${#list[@]}
	local l
	for (( l=0; l<=${length}; l++ )); do
		local file=${list[$l]}
		[[ $file == "" ]] && continue
		if [[ $file =~ (^|[[:space:]])"=>"($|[[:space:]]) ]]; then
			local SRC_FILE=${file/ =>*/}
			local SRC_OUTFILE=${file/*=> /}
			# Once a fetch occurs we don't actually need the old filename.
			# Rename it so as to avoid confusion later.
			if [[ $3 == 'src' ]]; then
				SRC_URI[$l]="${SRC_FILE%/*}/${SRC_OUTFILE}"
			elif [[ $3 == 'patch' ]]; then
				PATCHES[$l]="${SRC_FILE%/*}/${SRC_OUTFILE}"
			fi
		else
			local SRC_OUTFILE=${file##*/}
		fi
		if [[ ! -e $DISTFILES/$SRC_OUTFILE ]] ||
		   ( [[ $IGNORE_SHA != 1 ]] && ! checkSha1 ${PKG_BLD%/*} "$DISTFILES/$SRC_OUTFILE" ); then
			fetch_list+=($file)
		fi
	done

	local length=${#fetch_list[@]}
	## Output our message
	[[ $length -gt 0 &&  ! -z $1 ]] && echo $1

	local ret=0
	for (( l=0; l<=${length}; l++ )); do
		local C=$(( $l + 1 ))
		local file=${fetch_list[$l]}
		[[ $VERBOSE -ge 2 ]] && echo " * Fetching $C of $length: $file"
		[[ $file == "" ]] && continue
		if [[ $file =~ (^|[[:space:]])"=>"($|[[:space:]]) ]]; then
			local SRC_FILE=${file/ =>*/}
			local SRC_OUTFILE=${file/*=> /}
		else
			local SRC_FILE=$file
			local SRC_OUTFILE=${SRC_FILE##*/}
		fi
		if [ ! -f "${DISTFILES}/${SRC_OUTFILE}" ]; then
			echo "Fetching ($C of $length) $SRC_FILE"
			fetch_file "$SRC_FILE" "$SRC_OUTFILE"
		fi
		if ! checkSha1 ${PKG_BLD%/*} "$DISTFILES/$SRC_OUTFILE"; then
			if [[ $IGNORE_SHA == 1 ]]; then
				ret=2
			elif [[ $update_sha == 1 ]]; then
				sha1sum "$DISTFILES/$SRC_OUTFILE" | sed 's,  .*/,  ,' >> ${PKG_BLD%/*}/sha1
			else
				[[ $VERBOSE -gt 1 ]] && >&2 echo " !! Sha1sum failed for file: $SRC_OUTFILE"
				ret=1
			fi
		fi
	done
	return $ret
}

## Check a sha1sum of a given file within the package's sha1 file.
checkSha1() {
	## If we are told to ignore the sha, OR if we are using a build from PKG_CACHE
	[[ $IGNORE_SHA1 == 1 || $MODE == 'uninstall' || $MODE == 'rebuild' ]] && return 0
	local PKG_DIR=$1
	local FILE=$2

	## Ignore Empty calls
	[[ $FILE == "" ]] && return 0
	[[ ! -e $PKG_DIR/sha1 ]] && return 1

	[[ $VERBOSE -ge 2 ]] && >&2 echo -n "Checking Sha1: $FILE ... "
	if [ ! -e $FILE ]; then
		[[ $VERBOSE -gt 1 ]] && >&2 echo "Failed checking $PKG sha1"
		return 1
	fi
	local h=$(sha1sum $FILE | sed 's,  .*/,  ,' 2> /dev/null)
	[[ $VERBOSE -ge 2 ]] && >&2 echo -n $h
	if grep "$h" $PKG_DIR/sha1 > /dev/null 2>&1; then
		[[ $VERBOSE -ge 2 ]] && >&2 echo " ..Ok"
	else
		return 1
	fi
	return 0
}
export -f checkSha1

####
## install doesn't support preserving permissions
## and ownership, so we need to get them and
## explicitly set them.
sinstall() {
	local d=
	[ -d "$1" ] && d="-d"
	eval install $d $(stat -c '-m%a -g%g -o%u' "$1") \"$1\" \"$2\"
}

####
## Gathers a list of packages based on files found within PERSERVED_LOG to install them.
## PERSERVED_LOG is generated during the uninstall phase of a pkg upgrade or uninstall
## and contains files which are depended upon by packages still installed.
## Once the rebuild is complete the now obsolete files are removed.
preservedRebuild() {
	MODE='rebuild'
	FORCE=1
	## Files were preserved, process them here to ensure we don't break our system.
	if [ -e $PRESERVED_LOG ]; then
		echo " * Gathering list of packages to rebuild"
		[ -e $INSTALL_CHART ] && rm $INSTALL_CHART
		PKG_LIST=""
		REQUESTED_LIST=""
		for f in $(cat $PRESERVED_LOG); do
			echo -n "$f:"
			local pkgs=$(checkFileDep $f)
			if [[ ! -z $pkgs ]]; then
				echo " $pkgs"
				for d in $pkgs; do
					#  B=${A%/*}; C=${A##*/}; echo $B-$C
					local cn=${d%/*}
					local v=${d##*/}
					setPkgENV $cn-$v > /dev/null
					setupENV $PKG > /dev/null
					echo $PKG_CAT/$PKG_NAME-$PKG_VR:$PKG_SLOT
					PKG_LIST+=" $PKG"
				done
			else
				echo " none found"
				rm "$f" 2> /dev/null && echo " << $f" || echo " <! $f"
				sed "/^${f//\//\\/}\$/d" -i $PRESERVED_LOG
			fi
		done

		if [[ ! -z $PKG_LIST ]]; then
			return 0
		fi
		rm $PRESERVED_LOG
	fi
	return 1
}
