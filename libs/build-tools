#!/bin/bash
####
## Set variables to the most common defaults

## Set which configure tool we are using:  auto, meson, cmake, none
export configTool=auto

## Set which compile tool we are using:  make, ninja, pip
export buildTool=make

## no defaults to '.' yes to '..'
## Alternatively you can set a path.
export BUILD_SEPERATE_DIR=no

## If cross compiling, set this to an environment var
## SET_ABI='ABI=32'
## This will run ABI=32 ./configure ...
## Alternatively it maybe useful to use this to set other options which must be prepended to our configure call.
## FIXME: should we rename this to another name which better describes the possibility of this variable?
export SET_ABI=

####
## Setup the Build Environment
## Depending on the configure and compile tool selected we need to set a few variables
setBuildENV() {
	[[ -z $1 ]] && configTool=auto || configTool=$1
	[[ -z $2 ]] && buildTool=make || buildTool=$2
	case $configTool in
		auto)
			BDEPS+=" system/autoconf" ;;
		meson)
			BDEPS+=" devel/meson"
			BUILD_SEPERATE_DIR=yes ;;
		cmake)
			BDEPS+=" devel/cmake"
			BUILD_SEPERATE_DIR=no ;;
	esac
	case $buildTool in
		make)
			BDEPS+=" system/automake" ;;
		ninja)
			BDEPS+=" devel/ninja" ;;
		pip)
			BDEPS+=" devel/python python/pip"
			RESTRICT="nobin nostrip" ;;
		cmake)
			[[ $configTool != "cmake" ]] && BDEPS+=" devel/cmake"
			BUILD_SEPERATE_DIR=yes ;;
	esac
}
export -f setBuildENV

####
## userBuildPackage
## This function is meant to do all the building as our BUILD_USER
userBuildPackage() {
	echo " * src_configure (${ABILIB:-64})"
	src_configure $p || die " $DIALOG_ERROR Error in src_configure (${ABILIB:-64})"
	echo " * src_compile (${ABILIB:-64})"
	src_compile $p || die " $DIALOG_ERROR Error in src_compile (${ABILIB:-64})"
	if [ $ENABLE_TESTS == 1 ]; then
		echo " * src_test (${ABILIB:-64})"
		src_test $p || die " $DIALOG_ERROR Error in src_test (${ABILIB:-64})"
	fi
}
export -f userBuildPackage

####
## buildPackage does the bulk amount of the work for any package.
## This functions is meant to be ran as BUILD_USER
## The call order of user-defined functions is:
## src_unpack
## src_patch
## src_prepare
## If we are in bootstrap mode, this will call bootstrap_default instead of the following:
##  src_configure
##  src_compile
##  src_test
buildPackage() {
	if [[ ! -z $SRC_URI ]]; then
		if [[ $BUILD_USER != 'root' ]] && [[ -e /bin/su || -e /usr/bin/su ]]; then
			su -p -c 'src_unpack' $BUILD_USER || die " $DIALOG_ERROR Error while unpacking!"
		else
			src_unpack || die " $DIALOG_ERROR Error while unpacking!"
		fi

		## Enter our Build Dir
		if [ ! -d "${BUILD_PATH}/${B}" ]; then
			echo "Build Directory ($BUILD_PATH/$B) not found! Directory listing of BUILD_PATH:"
			ls "${BUILD_PATH}"
			die "exiting.."
		fi
		cd "${BUILD_PATH}/${B}"
	fi

	if [[ ! -z $PATCHES ]]; then
		echo " * src_patch"
		if [[ $BUILD_USER != 'root' ]] && [[ -e /bin/su || -e /usr/bin/su ]]; then
			su -p -c 'src_patch' $BUILD_USER || die " $DIALOG_ERROR Error while patching!"
		else
			src_patch || die " $DIALOG_ERROR Error while patching!"
		fi
	fi

	echo " * src_prepare"
	src_prepare

	## Used in install-init.d
	[[ $_PREPARE_ONLY == 1 ]] && return

	if [[ $BUILD_SEPERATE_DIR != "no" ]]; then
		local d
		[[ $BUILD_SEPERATE_DIR != yes ]] && d=$BUILD_SEPERATE_DIR || d=build
		install -d -o $BUILD_USER $d
		cd $d
	fi

	## Filter the ABILIBS with only those archs we want to build from our BUILD_ABI
	ABILIBS=$(echo $ABILIBS $BUILD_ABI | tr ' ' '\n' | sort | uniq -d | tr '\n' ' ')

	## Don't set an ABILIB if we are not building for multiple ARCHS
	if [[ -z $ABILIBS ]]; then
		case $(uname -m) in
			x86_64) ABILIBS=64 ;;
			i*86)   ABILIBS=32 ;;
		esac
	## But if we are building for multiple ARCHS ensure we set the inital ABILIB to 64.
	elif [[ -z $ABILIB ]]; then
		case $(uname -m) in
			x86_64) ABILIB=64 ;;
			i*86)   ABILIB=32 ;;
		esac
	fi

	if [[ $MODE != "bootstrap" ]]; then
		for ABILIB in $ABILIBS; do
			[[ $BUILD_ABI != *$ABILIB* ]] && continue
			export PKG_CONFIG_PATH="/lib$ABILIB/pkgconfig:/usr/lib$ABILIB/pkgconfig:$PKG_CONFIG_BASE"
			[[ ! -z $ABILIBS ]] && echo " * ${ABILIB:-64} bit pass"

			## If we're installing using pip we need root
			if [[ $BUILD_USER != 'root' && $buildTool != 'pip' ]] && [[ -e /bin/su || -e /usr/bin/su ]]; then
				[[ -e $BUILD_PATH/$B ]] && chown -R $BUILD_USER $BUILD_PATH/$B
				su --preserve-environment -c 'PATH="'$PATH'" userBuildPackage' $BUILD_USER || die " $DIALOG_ERROR Building package failed!"
			else
				userBuildPackage
			fi

			echo " * src_install (${ABILIB:-64})"
			src_install	$p || die " $DIALOG_ERROR Error in src_install (${ABILIB:-64})"

			## Reset our working dir if we changed it during src_install
			[[ -e $BUILD_PATH/$B/$d ]] && cd $BUILD_PATH/$B/$d

			## No need to clean if we're only building for 1 ABI.
			if [[ ! -z $ABILIBS && $ABILIBS != $ABILIB ]]; then
				if [[ $_SPKG_CLEAN != rm && $buildTool == 'make' ]]; then
					echo " * Run make ${_SPKG_CLEAN:-clean}"
					make ${_SPKG_CLEAN:-clean}
				else
					echo " * Removing files within $PWD"
					[[ $PWD == $BUILD_PATH* ]] && rm -rf ./* || die " $DIALOG_ERROR Warning! attempted removal of $PWD which is not within $BUILD_PATH"
				fi
			fi
			unset CONF_FLAGS
		done
	else
		echo " * Bootstrapping"
		bootstrap_default
	fi
#	exec 3>&-
}
export -f buildPackage

####
## installPackage Either installs via an archive, or builds the source.
## Afterwords creates an archive
## Cleans the install root of: libtool archives, documentation, unused language files
## Strips debug symbols
## installs into our ROOT
## removes old files if the package was installed
## and calls post_install
## finally cleans up
installPackage() {
	checkSha1 ${PKG_BLD%/*} $PKG_BLD || die
	(
		set +h -Eeo pipefail
		BUILD_SEPERATE_DIR=no

		## Set an ABI for the currently running system
		## Builds can reference this to do changes based on if we're cross compiling, or building for native.
		export MY_ABI=64
		case $(uname -m) in
			x86_64) MY_ABI=64 ;;
			i*86)   MY_ABI=32 ;;
		esac

		local BUILD_FORCE=0
		export DOC_LIST=("/usr/share/doc")

		loadUSE

		unset CONF_FLAGS
		source "${PKG_BLD}"

		[[ $FETCH_ONLY != 1 ]] && install -o $BUILD_USER -d "${D}"

		## If the archive doesn't exist we can't do an ARCHIVE_INSTALL, build the package instead.
		if [[ $ARCHIVE_INSTALL == 1 ]]; then
			if [[ ! -e "${PKG_ARCHIVE_DIR}/${PKG_CAT}/${PKG_NAME}-${PKG_VR}.tar.xz" && $ARCHIVE_REPO == http* ]]; then
				fetch_file "$ARCHIVE_REPO/$PKG_CAT/$PKG_NAME-$PKG_VR.tar.xz" "$PKG_NAME-$PKG_VR.tar.xz" "$PKG_ARCHIVE_DIR" || BUILD_FORCE=1
			else
				BUILD_FORCE=1
			fi

			if [[ $BUILD_FORCE != 1 ]]; then
				cd "${D}"
				tar -xf "${PKG_ARCHIVE_DIR}/${PKG_CAT}/${PKG_NAME}-${PKG_VR}.tar.xz"
			fi

			## FIXME: Check the USE_FLAGS to see if they have the same relevant flags
			## If a package's USE is different, we're going to need to compile it as the archive isn't compatible
			# BUILD_FORCE=1
		fi

		## Build our source, setup the environment so we can pass things off to our BUILD_USER
		if [[ $ARCHIVE_INSTALL == 0 || $BUILD_FORCE == 1 ]]; then
			## Even if we are trying to install via an archive, if we got here the archive doesn't exist.
			## Disable the ARCHIVE_INSTALL to allow a package to be built if BUILD_PACKAGE=yes
			ARCHIVE_INSTALL=0
			src_fetch

			# src_verify

			[[ $FETCH_ONLY == 1 ]] && return

			## We need to downgrade SRC_URI for scripts to access it properly
			## Arrays cannot be exported.
			local IFS=$'\n'
			local SRC="${SRC_URI[*]}"
			export SRC_FILE=${SRC_URI[0]}
			unset SRC_URI
			export SRC_URI=$SRC
			unset SRC

			## Arrays cannot be exported
			local IFS=$'\n'
			local P="${PATCHES[*]}"
			unset PATCHES
			export PATCHES=$P
			unset P
			unset IFS
			export PATCH_OPTS

			## Ensure TEST is exported
			export TEST

			## Export if available
			export ABILIBS

			## Export this so packages can override the src_unpack.
			export LDFLAGS CXXFLAGS CFLAGS CPPFLAGS

			####
			## Internal Flags
			## We are not preparing
			export _PREPARE_ONLY=0
			## How do we clean in between multilibs
			export _SPKG_CLEAN
			## If we need to install libs into /lib* instead of /usr/lib*
			export _LIB_ROOT_INSTALL
			## If we're expecting a patch to error out, but still need it applied
			export _SPKG_IGNORE_PATCH_ERR

			## When we pass commands to our BUILD_USER these does not get updated
			## Set it here to avoid permission issues when packages call for
			## $HOME/.cache for example
			local _USER=$USER
			local _LOGNAME=$LOGNAME
			local _HOME=$HOME
			export USER=$BUILD_USER
			export LOGNAME=$BUILD_USER
			export HOME=$PKG_CACHE

			## Package may have overrode it.
			if ! cd "${BUILD_PATH}" > /dev/null 2>&1; then
				install -v -o $BUILD_USER -d "${BUILD_PATH}" && cd "${BUILD_PATH}" || die "Failed to create Build Dir."
			else
				chown $BUILD_USER "$BUILD_PATH"
			fi

			buildPackage || die

			## Restore our environment
			export USER=$_USER
			export LOGNAME=$_LOGNAME
			export HOME=$_HOME

			## Save our USE for use later.
			touch $D/USE_FLAGS
			if [[ ! -z $IUSE ]]; then
				for u in $IUSE; do
					use-enable $u && echo $u >> $D/USE_FLAGS
				done
			fi
			case $MODULE in
				kernel)
					echo > ${D}/KERNEL_MODULE ;;
				perl)
					echo > ${D}/PERL_MODULE ;;
				python)
					echo > ${D}/PYTHON_MODULE ;;
			esac
		fi

		## Archive it up before we do any post modifications.
		archivePackage

		echo " * Removing Libtool Archives (.la)"
		cd "$D"
		find {usr/,}lib{,exec,64,32,x32} -name \*.la -delete -print 2> /dev/null

		if [[ $INSTALL_DOCS == 0 ]]; then
			echo " * Removing Docs"
			local doc
			for doc in ${DOC_LIST[@]}; do
				rm -r "$D/$doc" > /dev/null 2>&1
			done
		fi

		if [[ -e "${D}/usr/share/locale" ]]; then
			echo " * Cleaning locales"
			## Create an Exclude list
			export LIST=$(ls -1 "${D}/usr/share/locale")
			for l in $LANG ${LANG%.*} ${LANG%_*}; do
				LIST=$(grep -v $l <<< $LIST)
			done
			for l in $LIST; do
				rm -r "${D}/usr/share/locale/$l"
			done
		fi

		echo " * Removing Empty Dirs"
		find "$D" -mindepth 1 -type d -empty -print -exec rmdir -p --ignore-fail-on-non-empty {} +

		stripPackage

		## Create the cache directory
		local CACHE_DIR="${PKG_CACHE}/${PKG_CAT}/${PKG_NAME}/${PKG_VR}"
		mkdir -p "$CACHE_DIR"
		## Copy over our build file so we can reference it in uninstalls
		cp -u "$PKG_BLD" "$CACHE_DIR/$PKG_VR.build"
		if [ -e ${D}/KERNEL_MODULE ]; then
			mv ${D}/KERNEL_MODULE $CACHE_DIR/KERNEL_MODULE
		elif [ -e ${D}/PERL_MODULE ]; then
			mv ${D}/PERL_MODULE $CACHE_DIR/PERL_MODULE
		elif [ -e ${D}/PYTHON_MODULE ]; then
			mv ${D}/PYTHON_MODULE $CACHE_DIR/PYTHON_MODULE
		fi
		mv ${D}/USE_FLAGS $CACHE_DIR/USE_FLAGS

		if [[ -e $RESTRICTIONS ]]; then
			sort $RESTRICTIONS | uniq > $CACHE_DIR/RESTRICTIONS
		fi

		## Gather Contents
		## This is sort of an awkward hack...
		## If we're bootstrapping we install binutils twice and gcc 3 times!
		## This causes recording issues. it should be safe to remove them if we're on pass2
		## Otherwise we're going to add to our CONTENTS
		cd $D
		if [[ $MODE == "bootstrap" && ! -z $PKG_FLAGS && $PKG_FLAGS != "pass2" ]]; then
			find . -type d -or -type f -or -type l | sed "s,^\.,," | sort >> "${BUILD_PATH}/CONTENTS"
		else
			find . -type d -or -type f -or -type l | sed "s,^\.,," | sort > "${BUILD_PATH}/CONTENTS"
		fi

		getBDeps "${BUILD_PATH}/CONTENTS"

		echo " * Merging into ${ROOT}"
		## Glibc is a special case in which its dangerous to handle each file seperately.
		## while not ideal using tar to install seems to work fine.
		if [[ $PKG_NAME == 'glibc' ]]; then
			tar -cpf glibc.tar .
			tar -xvpf glibc.tar -C / | sed 's,^., >> ,'
		else
			## Install New Files
			local IFS=$'\n'   # Internal Field Sperator
			local CONFIG_PROTECTED=false
			for file in $(cat "${BUILD_PATH}/CONTENTS"); do
				## Check for links before anything else
				## to avoid installing a directory when a link
				## was expected.
				if [ -L "${D}/${file}" ]; then
					## If the link is a directory, we need to remove it, otherwise the link will be
					## created within the directory rather than overriding it.
					[[ -d "/$file" ]] && rm "/$file"
					ln -sf "$(readlink $D/$file)" "/$file" 2> /dev/null &&
						echo " >> $file -> $(readlink ${file})" ||
						echo "!>s $file -> $(readlink $file)"
				## Skip installing already installed dirs.
				## it overrides the user's permission customizations.
				## 2 schools of thought:
				##   1) Under most circumstances, dirs are not managed.
				##   2) Under most circumstances, most dirs are not modified by users.
				## Packages *can* modify dirs they manage and need
				## a certain way in post_install
				elif [[ -d "${D}/${file}" ]]; then
					if [[ ! -e "${file}" ]]; then
						sinstall "${D}/${file}" "${file}" && echo " >> $file" || echo "!>d $file"
					fi
				else
					## Check if a file is to be installed in /etc
					##  If it is, check if the file already exists and
					##  instead copy it to a backup file.
					if [[ $CFG_PROTECT == "true" && $file == */etc/* && -e "${file}" ]]; then
						## Check if the file is different
						## If the file hasn't change, we can safely ignore it.
						## If the file has changed however, protect it and report it at the end.
						if ! diff "$D/$file" "$file" > /dev/null 2>&1; then
							pfile="${file}.cfg$(date +%s)"
							## Do some housekeeping
							find $file.cfg[0-9]* -delete > /dev/null 2>&1
							cp -p "${D}/${file}" "${pfile}" && echo "cp> $file" || echo "!cp $file"
							CONFIG_PROTECTED=true
						else
							echo "a>> $file"
						fi
					## If the file is a library we must use install and not cp as the library maybe in use.
					elif [[ $file == */lib* ]]; then
						sinstall "${D}/${file}" "${file}" && echo " >> $file" || echo "!l> $file"
					else
						## if cp fails the file might be busy, but to cp is faster than sinstall due to
						## having to read permissions and then install
						## fallback on sinstall if it fails.
						if cp -p "${D}/${file}" "${file}" 2> /dev/null; then
							echo " >> $file"
						else
							if sinstall "${D}/${file}" "${file}"; then
								echo "i>> $file"
							else
								echo "!>c $file"
							fi
						fi
					fi
				fi
			done
		fi

		## Uninstall Old files
		uninstall $PKG_CAT/$PKG_NAME $PKG_VR $O_VER

		## Move our new CONTENTS into its final location.
		mv "${BUILD_PATH}/CONTENTS" "$CACHE_DIR/CONTENTS"

		## We upgrade our SRC_URI again as we won't need to worry about exporting it anymore
		IFS=$'\n'
		SRC_URI=($SRC_URI)
		echo " * post_install"
		post_install || die "Error in post_install"

		if [[ $MODULE == kernel ]]; then
			local K_VER=$(readlink -f /usr/src/linux | sed -e 's,.*linux-,,' -e 's,/$,,')
			local KERNEL_VER=$(getMajorVer $K_VER).$(getMinorVer $K_VER).$(getMicroVer $K_VER)
			echo -n " * Running depmod (${KERNEL_VER}) .. "
			depmod -a $KERNEL_VER && echo "Ok" || echo "Failed"
		fi

		## Check if its a system package
		## Currently we don't use slots within the system set.
		## So the most recent slot should always be used.
		if ! grep -E "^$PKG_CAT/${PKG_NAME/+/\\+}\$" $PKG_DB_DIR/spkg-sets/system > /dev/null 2>&1; then
			## If it didn't find it as a system package, check if its already in the world set.

			## Only add to world requested packages.
			if ! grep -E "^$PKG_CAT/${PKG_NAME/+/\\+}(/[^/]*){3}/$PKG_SLOT" $PKG_WORLD > /dev/null 2>&1 &&
				[[ $PKG_LIST =~ (^|[[:space:]])$PKG_CAT/$PKG_NAME(/[^/]*){3}/$PKG_SLOT/ &&
				 -z $OMIT_RECORD_IN_WORLD ]]; then
				## Record whats requested, not just what we installed
				PKG=$(echo $REQUESTED_LIST | tr ' ' '\n' | grep -E "$PKG_CAT/${PKG_NAME/+/\\+}(/[^/]*){3}/$PKG_SLOT/")
				echo " * Registering into World."
				echo ${PKG# } >> $PKG_WORLD
			fi
		fi

		cleanup 1

		if [ -e $INSTALL_CHART ]; then
			## Trim the top package off and save our list of todos.
			tail -n +2 $INSTALL_CHART >> ${INSTALL_CHART}-2
			mv ${INSTALL_CHART}-2 $INSTALL_CHART
		fi

		echo " * $PKG_CAT/$PKG_NVR installed successfully!"
	) || die " $DIALOG_ERROR Error installing $PKG_CAT/$PKG_NVR"
}

####
## Uninstalls a given package
## Arguments: Package (category/name) and version to remove.
##			 if 3rd argument is supplied diff versions and remove the old files.
uninstall() {
	local PKG=$1
	local PKG_VER=$2
	local O_VER=$3
	local FLIST=""
	[[ "$O_VER" == "0" ]] && return

	## Compare Slots
	## If slots differ we got the wrong version or the only other installed version is a different slot
	## Either way, we need to ignore it.
	[[ $(Installed-getPkgList $PKG | filterSlot $PKG_SLOT) != *build ]] && return

	if [[ "$O_VER" != "" ]]; then
		## Grep to add the filename before the files as a cheap trick
		## Sort it by 2nd field, add a space to induce a 2nd field for uniq
		## grep again for the installed version and remove the file path
		## leaving only the installed files that do not exist in the to-be installed version.
		grep -H / "$BUILD_PATH/CONTENTS" "${PKG_CACHE}/${PKG}/${O_VER}/CONTENTS" | sort -t: -k2 -u | grep "$PKG_CACHE" | sed 's,.*:,,' > /tmp/flist-$PKG_NAME
		## Reverse cat the filelist so files always come before their dirs.
		FLIST=$(tac /tmp/flist-$PKG_NAME)
		## Remove it now that we don't need it.
		rm -f /tmp/flist-$PKG_NAME
		echo "Uninstalling $PKG-$O_VER"
	else
		## Reverse cat the filelist so files always come before their dirs.
		FLIST=$(tac ${PKG_CACHE}/${PKG}/${PKG_VER}/CONTENTS)
		echo "Uninstalling $PKG-$PKG_VER"
	fi
	for file in $FLIST; do
		## While MODE=bootstrap refuse to remove files which could break things
		if [ -d "${file}" ]; then
			if [[ $MODE != "bootstrap" ]]; then
				rmdir "${file}" 2> /dev/null && echo " << $file"
			fi
		else
			## Check to see if its a versioned .so file
			## Links can be made around this and the real file might be
			## removed leaving dead links.
			local fd=
			[[ $file == *\.so* ]] && fd=$(checkFileDep $file | grep -v $PKG)

			if [[ -z $fd ]]; then
				if [[ $MODE != "bootstrap" ]]; then
					rm "${file}" 2> /dev/null && echo " << $file" || echo " <! $file"
				fi
			else
				## If our file already exists within the PRESERVED_LOG don't add it
				[[ ! -e $PRESERVED_LOG ]] && touch $PRESERVED_LOG
				if ! grep $file $PRESERVED_LOG; then
					echo " @! $file"
					echo $file >> $PRESERVED_LOG
				fi
				## Check if its a link, if so, read the link and add it to our PRESERVED_LOG if its not already added.
				if [ -L $file ]; then
					file=$(readlink -f $file)
					## We need to ensure we find the exact file and not a file with a similar name.
					## If we have A.so and A.so.1
					## A.so.1 is the link to A.so
					## Simply searching for A.so will yield A.so.1 and the hardfile A.so won't be saved as to our PRESERVED_LOG
					## And could be removed by accident.
					if ! grep "$file$" $PRESERVED_LOG; then
						echo " @! $file"
						echo $file >> $PRESERVED_LOG
					fi
				fi
			fi
		fi
    done
	if [ "${O_VER}" != "${PKG_VER}" ]; then
		if [ ! -z $O_VER ]; then
			rm -r "${PKG_CACHE}/${PKG}/${O_VER}"
		else
			rm -r "${PKG_CACHE}/${PKG}/${PKG_VER}"
		fi
		## If the dir is empty remove it.
		rmdir "$PKG_CACHE/$PKG" 2> /dev/null
	fi
	if [ -z "$O_VER" ]; then
		if grep "^$PKG_CAT/$PKG_NAME" $PKG_DB_DIR/spkg-sets/system > /dev/null 2>&1; then
			echo "${RED}WARNING:$NORMAL You've removed a package within the system set!"
			echo "         This may cause undesired consequences!"
		else
			grep -Ev "^$PKG_CAT/${PKG_NAME/+/\\+}/[^/]*/[^/]*/[^/]*/$PKG_SLOT" $PKG_WORLD > $PKG_WORLD.old
			mv $PKG_WORLD.old $PKG_WORLD
		fi
	fi
}

## Create an archive package of our build, could be useful if we decide to distribute binary copies
## Enabled with BUILD_PACKAGE=yes
archivePackage() {
	# Package it up
	if [[ $BUILD_PACKAGE == "yes" && $ARCHIVE_INSTALL != 1 && $MODE != "bootstrap" ]]; then
		echo -n "Packaging up..."
		mkdir -p "${PKG_ARCHIVE_DIR}/${PKG_CAT}"
		cd $D
		tar -Jcpf "${PKG_ARCHIVE_DIR}/${PKG_CAT}/${PKG_NAME}-${PKG_VR}.tar.xz" . && echo " Done"
	fi
}

## Remove unneccessary symbols to reduce the filesize in binaries.
## Packages may disable this with RESTRICT=strip
stripPackage() {
	[[ $MODE == 'bootstrap' ]] && return
	pkg-restricts strip && return
	cd "${D}"
	echo "Stripping..."
	for s in $( find . -iwholename "*bin/*" -or -iwholename "*/lib*" ); do
		strip --strip-unneeded "$s" 2> /dev/null && echo " -- $s"
	done
}

## Find all binary dependencies
## Packages may disable this with RESTRICT=nobin
getBDeps() {
	pkg-restricts nobin && return
	echo -n "Finding Binary Dependencies..."
	local bdeps=$(cat $1 | grep -P 'bin/|/lib(|32|x32|64)/') || local ERR=$?
	if [[ $ERR == 1 ]]; then
		echo " None Found"
		return 0
	fi
	cd $D
	for dep in $bdeps; do
		deps=$(readelf -d ./$dep 2> /dev/null | grep NEEDED | sed -e 's,.*\[\(.*\)\].*,\1,')
		for d in $deps; do
			for p in $(cat /etc/ld.so.conf); do
				[ -e $p/$d ] && echo $p/$d
			done
		done
	done | sort | uniq > "${PKG_CACHE}/$PKG_CAT/$PKG_NAME/$PKG_VR/BDEPS"
	echo " Done"
}

####
## Takes a list of PKG to (un)install
installList() {
	local list=($@)
	local length=${#list[@]}

	for (( l=0; l<${length}; l++ )); do
		## Current #
		local C=$(( ${l} + 1 ))
		## PKG entry
		local p=${list[$l]}
		setupENV $p

		## Uninstall
		if [[ $MODE == "uninstall" ]]; then
			echo "Uninstalling ${PKG_CAT}/$PKG_NAME : $O_VER ($C of $length)"
			title "Uninstalling ${PKG_CAT}/$PKG_NAME : $O_VER ($C of $length)"
			(
				set -e
				source $(getBldFile $p 1)
				local d=$(isDependedOn ${PKG_CAT}/$PKG_NAME $O_VER)

				## FIXME: If uninstalling will break packages Check Forced.
				## Option 1: Uninstall just the requested, breaking other installed packages.
				## Option 2: Uninstall all packages that would break, and any that would break if they were removed.
				## Option 3: Create a Minimal System Requirements package set and disallow any in that list from being
				##           removed under any circumstances.
				if [[ $d != *$p && $d != "" && $FORCE == 0 ]]; then
					echo " $DIALOG_ERROR Uninstalling will break packages!"
					echo $d
					echo " $DIALOG_ERROR Uninstall aborted"
				else
					## pre-uninstall code if needed/set
					uninstall_default
					## Uninstall the package
					uninstall "${PKG_CAT}/${PKG_NAME}" $O_VER ""
					## post-uninstall code if needed/set
					src_post_uninstall
				fi
			)

		## Install
		else
			####
			## Set the log file
			## Can alter this to use a LOGFILE using
			## %c category  %d day   %D date (%Y%m%d)  %s Unix Timestamp
			## %n name      %Y year  %m month          %v version with revision
			LOGFILE=${LOGFILE:-%D-%n%v%r.log}

			local log=$(echo $LOGDIR/$LOGFILE |
				sed -e "s,%c,$PKG_CAT,g" \
					-e "s,%n,$PKG_NAME,g" \
					-e "s,%v,$PKG_VR,g"    \
					-e "s,%s,$(date +%s),g" \
					-e "s,%d,$(date +%d),g" \
					-e "s,%m,$(date +%m),g" \
					-e "s,%Y,$(date +%Y),g" \
					-e "s,%D,$(date +%Y%m%d),g")

			## Our log may contain a directory or 2
			mkdir -p "${log%/*}"

			## If the file exists, append a unix timestamp to the end.
			[[ -e $log || -e $log.xz ]] && log="${log%.*}-$(date +%s).log"

			CFG_PROTECT=true

			export RESTRICT=

			echo
			echo " ${GREEN}*${NORMAL} ${PKG_CAT}/${PKG_NVR} ($GREEN$C$NORMAL of $GREEN$length$NORMAL)"
			echo
			title "${PKG_CAT}/${PKG_NVR} ($C of $length)"

			## Save what time we started installing so we can output how long it took at the end.
			local timestart=$(date "+%s.%N")

			if [[ $SILENT_BUILD == "no" || $FETCH_ONLY == 1 ]]; then
				set -o pipefail
				installPackage 2>&1 | tee $log
				[ $PIPESTATUS != 0 ] && die "Error installing package: ${PKG_NVR}"
			else
				installPackage > $log 2>&1 || die "Error installing package: ${PKG_NVR}"
			fi

			## If bc is installed output how long it took to build
			if [[ -e /usr/bin/bc ]]; then
				printf "Completed in %.3f seconds.\n" $( echo $(date "+%s.%N") - $timestart | bc ) | tee -a $log
			## Log when we started and when we finished if we can't calculate how long it took.
			else
				printf "Completed in %d seconds.\n" $(( $(date "+%s") - ${timestart%.*} )) | tee -a $log
			fi

			## Compress our log.
			[[ ! -e "${log}.xz" ]] && xz "$log" || echo " $IMPORTANT Log ${log}.xz exists"
		fi
		if [[ $FETCH_ONLY != 1 ]]; then
			echo -n " * Running ldconfig .."
			[[ $MODE == 'bootstrap' ]] && local ld_opts="-r $ROOT"
			ldconfig $ld_opts && echo "done!" || die "failed!"
		fi
	done
	title
}

####
## Displays a list of packages being added to our CHART
addToList() {
	local PKG=$1
	local O_VER=$2
	local CDEP_FORCE=$3

	PKG_CAT=$(getCategory $PKG)
	PKG_NAME=$(getName $PKG)
	PKG_VR=$(getVerRev $PKG)
	PKG_SLOT=$(getSlot $PKG)

	if grep "^$PKG_CAT/$PKG_NAME$" $PKG_DB_DIR/spkg-sets/system > /dev/null 2>&1; then
		echo -n "~"
	elif grep -E "^$PKG_CAT/${PKG_NAME/+/\\+}(/[^/]*){3}/$PKG_SLOT" $PKG_WORLD > /dev/null 2>&1; then
		echo -n "+"
	else
		echo -n " "
	fi
	echo -n "$PKG_CAT/$PKG_NAME - $PKG_VR"
	[[ $PKG_SLOT != 0 ]] && echo -n ":$PKG_SLOT"
	echo -n " [ $O_VER ]"
	## Only mention it's been forced if its within the *_LIST & FORCE
	if ! version_gt $PKG_VR $O_VER && [[ $FORCE == 1 && $PKG_LIST =~ (^|[[:space:]])"$PKG_CAT/$PKG_NAME" || $CDEP_FORCE == 1 ]]; then
		echo -n " (forced)"
	fi

	####
	## If an IUSE is present, display it
	## If its enabled, color it GREEN
	## If its disabled, color it RED
	## If its not within our USE at all, gray it out.

	ver=$(splitVersion $PKG_VR)
	PKG_VER=${ver%/*}
	[[ $ver == */* ]] && PKG_REV=${ver#*/} || PKG_REV=0
	IUSE=$(grep '[^#]*IUSE=' "$(getBldFile $(getPKG))" | sed -E 's,.*IUSE="?([^"]*)"?,\1,' || true)
	if [[ ! -z $IUSE ]]; then
		echo -n " [ "
		(
		loadUSE
		for u in $IUSE; do
			ue=0
			use-enable $u || ue=$?
			case $ue in
				0) echo -n "${GREEN}+$u " ;;
				1) echo -n "$LTGRAY$u " ;;
				2) echo -n "${RED}-$u " ;;
			esac
		done
		)
		echo -n "$NORMAL]"
	fi
	echo

	## Add to our INSTALL_CHART
	Install-addPkg $PKG
}

buildList() {
	if [[ $MODE != "resume" && $MODE != 'clean' && $MODE != 'uninstall' ]]; then
		## Get Dependencies and check if any require updates.
		getFullPkgList $PKG_LIST > /dev/null || die " $DIALOG_ERROR Error Calculating Dependencies"
		if [[ $VERBOSE -ge 1 ]]; then
			echo "Package Order (Full List):"
			for p in $(cat $CHART); do
				PKG_CAT=$(getCategory $p)
				PKG_NAME=$(getName $p)
				PKG_VR=$(getVerRev $p)
				PKG_SLOT=$(getSlot $p)
				echo "$PKG_CAT/$PKG_NAME-$PKG_VR:$PKG_SLOT"
			done
			echo -e "\nPackage Order:"
		fi
	fi

	timestart=$(date "+%s.%N")
	[[ -e $INSTALL_CHART ]] && rm "$INSTALL_CHART"

	## Check for any restrictions, take the most restrictive stance and save it for future use.
	## If we have an impossible sitatuation  we'll know if no packages are valid and should report it.
	if [[ $MODE != "uninstall" && -e $RESTRICTIONS ]]; then
		[[ $VERBOSE -ge 1 ]] && echo " $IMPORTANT Looks like we have restrictions"
		RESTRICT=$(sort -u $RESTRICTIONS)

		## As we have restrictions we need to verify that we don't need to force an install to comply
		## So we should take this time here to itterate over the RESTRICTIONS and find the matches within
		## our CHART. If the versions change between what would be installed and what is installed
		## Add them to our PKG_LIST and set a FORCE=1
		for r in $RESTRICT; do
			PKG_CAT=$(getCategory $r)
			PKG_NAME=$(getName $r)
			rPKG=$(grep ^$PKG_CAT/$PKG_NAME $CHART)

			O_VER=$(Installed-getPkg $r | getVerRev)
			if [[ $(getVerRev $rPKG) != $O_VER ]]; then
				addToList $rPKG $O_VER 1
				FORCE=1
			fi
		done
	fi

	for p in $(cat $CHART); do
		PKG_CAT=$(getCategory $p)
		PKG_NAME=$(getName $p)
		PKG_VR=$(getVerRev $p)

		## Install
		if [[ $MODE != "uninstall" ]]; then
			## By default we don't install already installed packages, even when requested
			## check forced or empty world.
			O_VER=$(Installed-getPkg $p | getVerRev)
			PKG_SLOT=$(getSlot $p)

			if version_gt $PKG_VR $O_VER || [[ $MODE == "resume" ||
				($FORCE == 1 && $PKG_LIST =~ (^|[[:space:]]|=)"$PKG_CAT/$PKG_NAME"/[^/]*/[^/]*/[^/]*/$PKG_SLOT) ||
				! -z $EMPTY_WORLD ]]; then
				## Check restrictions
				if [[ $RESTRICT =~ $PKG_CAT/$PKG_NAME ]]; then
					local PVR=$(echo $RESTRICT|grep $PKG_CAT/$PKG_NAME|getVerRestrict)
					PKG_VER=$(
						for a in $(DB-getPkg $PKG_CAT/$PKG_NAME); do
							local pver=$(getVerRev $a)
							for r in $PVR; do
								if [[ ${r:0:1} == ">" ]]; then
									if [[ ${r:1:2} == "=" ]]; then
										version_ge $pver ${r#>=} && echo $a
									else
										version_gt $pver ${r#>} && echo $a
									fi
								elif [[ ${r:0:1} == "<" ]]; then
									if [[ ${r:1:2} == "=" ]]; then
										version_le $pver ${r#<=} && echo $a
									else
										version_lt $pver ${r#<} && echo $a
									fi
								fi
							done
						done | sort | uniq | getLatest | getVerRev || true
					)
					[[ $VERBOSE -ge 1 ]] && echo "$PKG_CAT/$PKG_NAME - PKG_VER is now: $PKG_VER"
					PKG_VER_RESTRICT=$PVR
					setPkgENV $(getPKG) > /dev/null
					version_gt $PKG_VR $O_VER &&
						addToList $p $O_VER
				else
					addToList $p $O_VER
				fi

			elif [[ $VERBOSE -gt 1 ]]; then
				>&2 echo "$PKG_CAT/$PKG_NAME not requested or not forced ($REQUESTED_LIST)"
			fi
			## Check for our CDEPS first we may need to alter which package we are on
			if [[ -e ${CHART}-cdep ]] && grep "^$PKG_CAT/$PKG_NAME" ${CHART}-cdep > /dev/null 2>&1; then
				## If the current package is already installed
				cpkg=$(grep "^$PKG_CAT/$PKG_NAME" ${CHART}-cdep | sed 's,^.* : ,,')
				(
					PKG=$(DB-getPkg $cpkg)
					O_VER=$(Installed-getPkg $PKG | getVerRev)
					addToList $PKG $O_VER 1
				)
			fi

		## Uninstall
		elif [[	$REQUESTED_LIST =~ (^|[[:space:]])"$PKG_CAT/$PKG_NAME" ]]; then
			echo -n "$PKG_CAT/$PKG_NAME - $PKG_VR"
			[[ $FORCE == 1 ]] && echo -n " (forced)"
			echo

			## Add to our INSTALL_CHART
			Install-addPkg $p
		fi
	done
	if [[ -e /usr/bin/bc ]]; then
		>&2 printf " * version check completed in %.3f s\n" $( echo $(date "+%s.%N") - $timestart | bc )
	fi

	[[ ! -e $INSTALL_CHART ]] && die "Nothing to upgrade."
	[ $PRETEND == 1 ] && exit 0
	if [[ $ASK == 1 ]]; then
		echo -n "Ok to continue? [${GREEN}Yes${NORMAL}/${RED}No${NORMAL}] "
		read cont
		if [[ ! -z $cont && ${cont^^} != 'Y' && ${cont^^} != 'YES' ]]; then
			exit 0
		fi
	fi

	## Install our list
	## If our INSTALL_CHART or CHART don't exist, don't error out
	## the user may have installed something else or ran another command
	installList $(cat $INSTALL_CHART) && {
		[[ -e $INSTALL_CHART ]] && rm $INSTALL_CHART;
		[[ -e $CHART ]] && rm $CHART
	}

	## Check for any preserved files
	preservedRebuild && buildList || exit 0
}
