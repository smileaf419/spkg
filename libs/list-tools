#!/bin/bash
####
## List Tools
## Defines a set of functions to build a list of packages.
## All Lists should be in / seperated lists

## Set the Stack file
export STACK=$WORKDIR_BASE/stack

## Set the restrictions file
export RESTRICTIONS=$WORKDIR_BASE/restrictions

####
## Takes a user supplied list and parse it and finding matches for packages.
## Store the information within our CHART for easy reference.
populate_list() {
	local timestart=$(date "+%s.%N")
	[ -e $CHART ] && rm $CHART
	local list=$(expandSets $REQUESTED_LIST)
	PKG_LIST=
	REQUESTED_LIST=
	if [[ -z $list ]]; then
		return 0
	elif [[ $list == "ERR" ]]; then
		die
	fi
	>&2 echo -n " * Populating list"
	local p
	for p in $list; do
		>&2 echo -n '.'
		RPKG=$(EntryParser $p)
		## EntryParser does not find packages within our Database
		## Check our Mode and check for the presence of the package.
		## If the file is not found or multiple packages are found, perform a search and show the results.
		if [[ $MODE == 'uninstall' ]]; then
			PKG=$(Installed-getPkg $RPKG)
			c=($PKG)
			if [[ ${#c[*]} -gt 1 ]]; then
				echo
				echo " $DIALOG_ERROR $p has multiple matches!"
				for pk in $PKG; do
					setPkgENV $pk > /dev/null
					echo -n " $PKG_CAT/$PKG_NAME - $PKG_VR"
					[[ $PKG_SLOT != 0 ]] && echo -n ":$PKG_SLOT"
					echo
				done
				die
			fi
		else
			PKG=$(DB-getPkg $RPKG | getLatest)
		fi
		if [[ $PKG == "" ]]; then
			if [[ $MODE == 'uninstall' ]]; then
				>&2 echo " $DIALOG_ERROR $p not installed!"
				exit
			## If we're updating hashes there is a chance we are using @all or have a list, just report it and continue.
			elif [[ $HASH_UPDATE ]]; then
				>&2 echo " $DIALOG_ERROR $p not found!"
				continue
			else
				>&2 echo " $DIALOG_ERROR $p not found!"
				PKG_LIST=$p
				MODE=search
				return
			fi
		fi
		## Needs at least PKG_CAT/PKG_NAME and PKG_SLOT
		[[ ${RPKG:0:1} == '/' ]] && RPKG=$(getCategory $PKG)$RPKG
		REQUESTED_LIST+=" $RPKG"
		echo $RPKG >> $SPKG_TMP_DIR/requested.list
		PKG_LIST+=" $PKG"

		## Save our Cache data.
		echo $PKG >> $CHART
	done
	if [[ -e /usr/bin/bc ]]; then
		>&2 printf " done (%.3f s)\n" $( echo $(date "+%s.%N") - $timestart | bc )
	else
		>&2 echo " done"
	fi
	return 0
}

## Checks if a given file is depended upon
## Returns: list of packages depending on a file.
checkFileDep() {
#	if [[ ! $(grep -r --include CONTENTS "$1\$" "$PKG_CACHE") ]]; then
	grep -rl --include BDEPS "$1\$" "${PKG_CACHE}"|sed -e "s,${PKG_CACHE}/,," -e "s,/BDEPS.*$,," |sort|uniq || return 0
#	fi
}

## Checks if a given PKG_CAT/PKG_NAME and PKG_VER is depended upon
## Returns: list of files depending on a package.
## FIXME: This only checks binary dependencies, we should also check the DEPS and RDEPS
isDependedOn() {
	local PKG=$1
	local PKG_VER=$2
	pkg-restricts nobin && return
	local FC=$(wc -l "$PKG_CACHE/$PKG/$PKG_VER/CONTENTS")
	if [[ ${FC% *} -gt 1000 ]]; then
		>&2 echo -n " * Checking for packages which depend on any installed files (${FC% *}) ..."
		local LARGE_PKG=1
	fi
	local C=0
	for f in $(cat "${PKG_CACHE}/${PKG}/${PKG_VER}/CONTENTS"); do
		C=$(( $C + 1 ))
		[[ $LARGE_PKG == 1 && $(( $C % 1000 )) == 0 ]] && >&2 echo -n " $C .."
		## Ignore failures
		checkFileDep $f | sed -e 's,/[^/]*$,,' -e "s,$PKG,,"|sort|uniq|grep -v $PKG || true
	done
	[[ $LARGE_PKG == 1 ]] && >&2 echo " done"
}

## Take a list and expand all @sets found within.
expandSets() {
	local REQUEST_LIST=$@
	local PKG_LIST=
	if [[ $REQUEST_LIST =~ (^|[[:space:]])"@" ]]; then
		>&2 echo " * Found Set .. Expanding"
		local p
		for p in $REQUEST_LIST; do
			if [ ${p:0:1} == "@" ]; then
				if [[ ${p#@} == "world" ]]; then
					PKG_LIST+=" $(grep -v -E "^#" $PKG_WORLD)"
				elif [[ ${p#@} == "all" ]]; then
					PKG_LIST=$(find $PKG_DB_DIR/* -mindepth 1 -type d | sed "s,$PKG_DB_DIR/,," | grep -Ev "spkg|git")
					break
				elif [[ ${p#@} == "installed" ]]; then
					PKG_LIST=$(find $PKG_CACHE/* -mindepth 1 -maxdepth 1 -type d | sed "s,$PKG_CACHE/,,")
					break
				elif [[ ${p#@} == "preserved" ]]; then
					preservedRebuild || true
				elif [[ ${p#@} == "perlModules" ]]; then
					PKG_LIST+=" $(rebuildModules perl)"
				elif [[ ${p#@} == "pythonModules" ]]; then
					PKG_LIST+=" $(rebuildModules python)"
				elif [[ ${p#@} == "kernelModules" ]]; then
					PKG_LIST+=" $(rebuildModules kernel)"
				elif [[ ${p#@} != '' && -e $PKG_DB_DIR/spkg-sets/${p#@} ]]; then
					PKG_LIST+=" $(grep -v -E "^#" $PKG_DB_DIR/spkg-sets/${p#@} || true)"
				else
					>&2 echo " $DIALOG_ERROR Unknown set: ${p#@}"
					>&2 echo " * Did you mean one of: "
					>&2 echo -n $(ls $PKG_DB_DIR/spkg-sets/)
					>&2 echo " world installed all"
					echo "ERR"
					exit 1
				fi
			else
				PKG_LIST+=" $p"
			fi
		done
		while [[ $PKG_LIST == *@* ]]; do
			PKG_LIST=$(expandSets $PKG_LIST)
		done
		echo $PKG_LIST
	else
		echo $REQUEST_LIST
	fi
}

## Populates a $CHART files
getFullPkgList() {
	local timestart=$(date "+%s.%N")
	>&2 echo -n " * Calculating Package Order..."
	## remove files if they exist to ensure an empty chart/stack
	[[ -e $CHART ]] && rm $CHART
	[[ -e $INSTALL_CHART ]] && rm $INSTALL_CHART
	[[ -e $STACK ]] && rm $STACK
	[[ -e $RESTRICTIONS ]] && rm $RESTRICTIONS
	touch $CHART $STACK $INSTALL_CHART $RESTRICTIONS

	SP=
	local d
	for d in $@; do
		getdep $d || local ERR=$?
		if [[ $ERR == 1 ]]; then
			>&2 echo " $DIALOG_ERROR $d called self while calculating deps"
		elif [[ $ERR == 2 ]]; then
			die " $DIALOG_ERROR Package $d Not found!"
		elif [[ $ERR == 77 ]]; then
			die
		fi
		flist+=" $LENTRY"
	done
	rm $STACK
	cat $CHART
	if [[ -e /usr/bin/bc ]]; then
		>&2 printf " done (%.3f s)\n" $( echo $(date "+%s.%N") - $timestart | bc )
	else
		>&2 echo " done"
	fi
	unset flist
}

####
## 1: Package of deps to get.
## 2: if calling itself: the package which called it.
## Several Variables to describe how a dependency should be added and why its needed.
##  DEPS: Binary dependencies found via: readelf -d
## BDEPS: Build dependencies: Required for building, but not for running.
## RDEPS: Runtime Dependencies: Required for running, but not for building.
##        These should be added after the package.
##        But may contain some also found in BDEPS and should be filtered out.
## UDEPS: Optional Dependencies as required via USE
## CDEPS: Circular Dependencies are a special case where a package should be installed before and after
##        the package, but only if its not already installed.
##
## Return Status:
## 0 - success
## 1 - file/package not found
## 2 - Called self
getdep() {
	## Don't taint the environment.
	(
		set -e
		## If we need a version, it matters if we're uninstalling or installing.
		## If an older version is installed that we need to remove,
		## we may instead grab the incorrect version and end up with a Pkg not found.
		if [[ $(getVersion $1) == 0 ]]; then
			if [[ $MODE == 'uninstall' || $MODE == 'rebuild' ]]; then
				PKG=$(Installed-getPkg $1)
			else
				PKG=$(DB-getPkg $1)
			fi
		else
			PKG=$1
		fi
		local P
		for P in $PKG; do
			setPkgENV $P > /dev/null

			## Check if its on the stack, if not, add it. if so we'll get to it later.
			if [[ $PKG_SLOT == 0 ]] && grep -E "^$PKG_CAT/${PKG_NAME/+/\\+}/" $CHART $STACK > /dev/null 2>&1 ||
				[[ $PKG_SLOT != 0 ]] && grep -E "^$PKG_CAT/${PKG_NAME/+/\\+}(/[^/]*){3}/$PKG_SLOT" $CHART $STACK > /dev/null 2>&1; then
				return 0
			else
				eval echo \"$PKG\" >> $STACK
			fi

			## If we somehow call ourselves..
			[[ $2 =~ (^|[[:space:]])$PKG_CAT/$PKG_NAME/[^/]*/[^/]*/$PKG_SLOT/ ]] && return 1

			## Print an interesting looking tree.
			if [[ $VERBOSE -ge 1 ]]; then
				>&2 echo "$SP$PKG_CAT/$PKG_NAME-$PKG_VR:$PKG_SLOT"
				SP+=" "
			else
				>&2 echo -n .
			fi

			eval PKG_BLD=$(getBldFile $(getPKG))
			if [ -e "$PKG_BLD" ]; then
				checkSha1 ${PKG_BLD%/*} $PKG_BLD || die "Sha1sum failed for $PKG_BLD within $PKG_CAT/$PKG_NAME"
				unset BDEPS RDEPS UDEPS CDEPS DEPS
				source "$PKG_BLD"
			else
				return 2
			fi

			## Add our required now Dependencies
			if ! doDeps "${DEPS[*]} ${BDEPS[*]} ${UDEPS[*]}"; then
				continue
			fi

			## Check CDEPS
			if [[ ! -z $CDEPS ]]; then
				local p
				for p in $CDEPS; do
				    local cpkg=$(EntryParser $p)
					pkg-has-flag "nodep" && break

					## If its already in the list, ignore it and continue.
					grep -E "^$(getCategory $cpkg)/$(getName $cpkg)(/[^/]*){3}/$(getSlot $cpkg)" $CHART > /dev/null && continue

					## If both packages are already installed, we don't need to worry about
					## calculating the dependencies or installing it after the current package.
					## But if it is installed, but the pkg calling for the CDEP isn't
					## We will need to install it.
					## Record it and when we determine what we will install, reference it
					## and add it as a forced install even if it would be skipped.
					if [[ $(Installed-getPkg $cpkg | getVerRev) != "0" ]]; then
						if [[ $(Installed-getPkg $PKG | getVerRev) != "0" ]]; then
							continue
						fi
						echo "$PKG : $cpkg" >> ${CHART}-cdep
					fi

					if [[ ! -z $PKG_VER_RESTRICT ]]; then
						cpkg=$(DB-getPkg $cpkg)
						>&2 echo " * Pkg has PKG_VER_RESTRICT: $PKG_VER_RESTRICT"
						>&2 echo " * Result set: $cpkg"
					else
						cpkg=$(DB-getPkg $cpkg | getLatest)
					fi
					getdep $cpkg $PKG_CAT/$PKG_NAME || return $?
				done
			fi

			## Add our package
			if [[ $PKG_SLOT == 0 ]] && ! grep -E "^$PKG_CAT/${PKG_NAME/+/\\+}/" $CHART > /dev/null 2>&1 ||
				[[ $PKG_SLOT != 0 ]] && ! grep -E "^$PKG_CAT/${PKG_NAME/+/\\+}(/[^/]*){3}/$PKG_SLOT" $CHART > /dev/null 2>&1; then
				getPKG >> $CHART
				sed "/^$PKG_CAT.$PKG_NAME/d" -i $STACK
			fi

			####
			## Filter out any dependency found within BDEPS from our RDEPS.
			## This allows for a complete Runtime dependency without having to worry about
			## Runtime dependencies also being listed as Build dependencies.

			## Add a description to each dep so we can pair them.
			local dep=$((echo ${BDEPS[*]} | sed 's,\(^\| \),\1BDEPS|,g'; echo ${RDEPS[*]} | sed 's,\(^\| \),\1RDEPS|,g') |
				## Seperate them into lines
				tr ' ' '\n' |
				## Sort by the 2nd field
				sort -t: -k2 |
				## Generate a 2nd field for uniq
				tr '|' ' ' |
				## we only want 1 instance of the value
				uniq -f 1 |
				## Get our RDEPS
				grep RDEPS |
				## Remove our description pair value.
				sed 's,^[^ ]* ,,')

			doDeps "$dep" || sed "/^$PKG_CAT.$PKG_NAME/d" -i $CHART
			SP=${SP# }

			## If we made it this far, we're Ok to exit, else we'd have continued to the next version.
			break
		done
	)
}

## Process our Dependencies
## Returns 1 if a restriction fails to resolve.
doDeps() {
	local DEPS=($@)

	[ -z $DEPS ] && return 0
	local d
	for d in ${DEPS[@]}; do
		local PKG=$(EntryParser $d)
		local PKG_VER_RESTRICT=$(getVerRestrict $PKG)
		## FIXME: We need to check for any PKG_USE restrictions, if so check the respected package for those within the USE_FLAGS file
		##        If they don't match, that package must be added to the list and set ASK=1
		##        This will require package specfic USE to be implemented.
		if [ ! -z $PKG_VER_RESTRICT ]; then
			local dpkg=$(DB-getPkg $PKG)
			if [[ $VERBOSE -ge 2 ]]; then
				>&2 echo -e "\n * Pkg has PKG_VER_RESTRICT: $PKG_VER_RESTRICT"
				>&2 echo "PKG: $PKG"
				>&2 echo "List: $dpkg"
			fi
			## We need to itterate over the dpkg and ensure we restrict versions to only those that match.
			local p
			local r
			local dpkg_name=$(getName $dpkg)
			local dpkg_cat=$(getCategory $dpkg)
			local dpkg_slot=$(getSlot $dpkg)
			local opkg=$(for p in $dpkg; do
				local IFS="|"
				pver=$(getVersion $p)
				for r in $PKG_VER_RESTRICT; do
					if [[ ${r:0:1} == ">" ]]; then
						if [[ ${r:1:2} == "=" ]]; then
							version_ge $pver ${r#>=} && echo $p
						else
							version_gt $pver ${r#>} && echo $p
						fi
					elif [[ ${r:0:1} == "<" ]]; then
						if [[ ${r:1:2} == "=" ]]; then
							version_le $pver ${r#<=} && echo $p
						else
							version_lt $pver ${r#<} && echo $p
						fi
					fi
					## Save the restriction to our RESTICTIONS file so we can reference it on other packages.
					>&2 echo "$dpkg_cat/$dpkg_name///$r/$dpkg_slot"
				done
			done 2> >(sort | uniq >> $RESTRICTIONS))
			unset IFS

			dpkg=$(echo -e $opkg | getLatest)
			if [[ $dpkg == "" ]]; then
				>&2 echo "$DIALOG_ERROR No version to match restrictions of $dpkg_cat/$dpkg_name: $PKG_VER_RESTRICT"
#				die "$DIALOG_ERROR Error Resolving Dependencies"
				return 1
			fi
		else
			## FIXME: check RESTRICTIONS file for any matches
			local dpkg=$(DB-getPkg $PKG | getLatest)
			if [ -z $dpkg ]; then
				die "$DIALOG_ERROR Error Resolving Dependencies: $PKG ($dpkg)"
			fi
		fi
		pkg-has-flag "nodep" && break
		## If its already in the list, ignore it and continue.
		grep -E "^$(getCategory $dpkg)/$(getName $dpkg)(/[^/]*){3}/$(getSlot $dpkg)" $CHART > /dev/null && continue

		## Identify Circular Dependencies here so we can break out
		getdep $dpkg $PKG_CAT/$PKG_NAME || local e=$?
		if [[ ! -z $e && ! $e ]]; then
			>&2 echo "Got return $e in $d"
			break
		fi
	done
}
