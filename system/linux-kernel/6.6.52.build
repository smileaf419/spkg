####
## linux-kernel build
## Copyright 2023-2024 spkg developers, licensed under GPLv2
HOMEPAGE="https://kernel.org"
DESCRIPTION="The Linux Kernel"
LICENSE="GPLv2"
DEPS=""
BDEPS="system/gcc"
RDEPS=""
ARCHS="x86 x86_64"
SLOT=6.6
RESTRICT="strip nobin"
## if INSTALL_DOCS == 0 this will be removed.
DOC_LIST+=("/usr/src/linux-${PKG_VER}/Documentation")

URL_BASE="https://cdn.kernel.org/pub/linux/kernel/v$(getMajorVer $PKG_VER).x"

## Download the Incr patches rather than the full source for each version.
if [[ $MODE != "search" ]]; then
	MV=$(getMajorVer $PKG_VER)
	MiV=$(getMinorVer $PKG_VER)
	MicV=$(getMicroVer $PKG_VER)
	VerIncr=15
	VerStart=1

	## If we've not reach our threshold yet, grab the original
	if [ $MicV -lt $VerIncr ]; then
		SRC_URI=("$URL_BASE/linux-${MV}.${MiV}.tar.xz")
		B=troot/usr/src/linux-$MV.$MiV
	## If our MicV becomes too high, it becomes too time consuming to download all the patches
	## Grab every [VerIncr] version's archive, and patch up.
	elif [ $(( $MicV % $VerIncr )) == 0 ]; then
		SRC_URI=("$URL_BASE/linux-${MV}.${MiV}.${MicV}.tar.xz")
		B=troot/usr/src/linux-$MV.$MiV.$MicV
	## Otherwise, we need to grab the archive closest to our current version.
	else
		VerStart=$(( $(( $MicV / $VerIncr )) * $VerIncr ))
		SRC_URI=("$URL_BASE/linux-${MV}.${MiV}.${VerStart}.tar.xz")
		B=troot/usr/src/linux-$MV.$MiV.$VerStart
	fi
	[[ $VERBOSE -gt 0 ]] && echo "Found Archive: ${MV}.${MiV}"
	if [[ $MicV != 0 && $MicV -lt $VerIncr ]]; then
		PATCHES=("$URL_BASE/patch-${MV}.${MiV}.1.xz")
	fi

	if [[ $(( $MicV % $VerIncr )) -gt 0 ]]; then
		[[ $VERBOSE -gt 0 ]] && echo "Getting Patches from $VerStart to $MicV"
		for x in $(seq $VerStart $(( ${MicV}-1 ))); do
			N=$(( ${x}+1 ))
			[[ $VERBOSE -gt 0 ]] && echo "Adding Incr Patch: ${MV}.${MiV}.${x}-${N}"
			PATCHES+=("$URL_BASE/incr/patch-${MV}.${MiV}.${x}-${N}.xz")
		done
	fi
fi

unset ARCH

src_unpack() {
	mkdir -p "$D/usr/src"
	unpack "${DISTFILES}/${SRC_FILE##*/}" "$D/usr/src"
}

src_configure() { :; }

src_compile() { :; }

src_test() { :; }

src_install() {
	if [[ $(getMicroVer $PKG_VER) != 0 && "$BUILD_PATH/$B" != "$D/usr/src/linux-${PKG_VER}" ]]; then
		mv -v "$BUILD_PATH/$B" "$D/usr/src/linux-${PKG_VER}"
	fi

	## If we have a saved config file, use it.
	if [ -e /proc/config.gz ]; then
		echo " * Preparing modules"

		## Update this var for setKernelConfig below.
		KERNEL_CONFIG_FILE=$D/usr/src/linux-$PKG_VER/.config
		cd $D/usr/src/linux-$PKG_VER
		gzip -cd /proc/config.gz > .config

		## Set some defaults
		setKernelConfig CONFIG_IKCONFIG y
		setKernelConfig CONFIG_IKCONFIG_PROC y
		# Device Drivers --->
		#   Multiple devices driver support (RAID and LVM) --->
		setKernelConfig CONFIG_DM_CRYPT y
		setKernelConfig CONFIG_DM_SNAPSHOT y
		setKernelConfig CONFIG_DM_THIN_PROVISIONING y
		setKernelConfig CONFIG_DM_CACHE y
		setKernelConfig CONFIG_DM_MIRROR y
		setKernelConfig CONFIG_DM_ZERO y
		setKernelConfig CONFIG_DM_DELAY y
		#   [*] Block Devices --->
		setKernelConfig CONFIG_BLK_DEV_RAM y
		# Kernel hacking --->
		#   Generic Kernel Debugging Instruments --->
		setKernelConfig CONFIG_MAGIC_SYSRQ y

		unset ARCH ROOT
		make olddefconfig
		make modules_prepare
	fi

	## Set/update our slot's symlink
	if [[ -e /usr/src/linux-$PKG_SLOT && ! -L /usr/src/linux-$PKG_SLOT ]]; then
		inform " $IMPORTANT /usr/src/linux-$PKG_SLOT contains a kernel dir. A symlink will not be created!"
		inform " $IMPORTANT You will need to manually remove it for slot symlinks to be managed."
		inform " $IMPORTANT This is normal if upgrading from the 1st release of a new minor release."
		inform " $IMPORTANT Ex: $PKG_SLOT -> ${PKG_SLOT}.1 - If this is the case, you may wish run:"
		inform " $IMPORTANT  rm -r /usr/src/linux-$PKG_SLOT && ln -sf /usr/src/linux-$PKG_VER /usr/src/linux-$PKG_SLOT"
	fi

	ln -sfv linux-$PKG_VER $D/usr/src/linux-$PKG_SLOT
}

post_install() {
	## If we just installed the latest installed slot, update the symlink to the current kernel to our slot's symlink.
	if [[ $(Installed-getPkg system/linux-kernel | getLatest | getSlot) == $PKG_SLOT && ! -e /usr/src/linux ]]; then
		inform " * Updating Kernel symlink to Linux ${PKG_VER}"
		ln -sfv linux-$PKG_SLOT /usr/src/linux
	fi
	if [[ $INSTALL_DOCS == 0 ]]; then
		sed -i '/Documentation/d' /usr/src/linux-$PKG_VER/Kconfig
	fi
}

src_post_uninstall() {
	## We need to ensure we didn't just break a symlink
	## If our Main link exists and is currently linked to a now dead slot, remove it and link it to the latest slot.
	if [[ -e /usr/src/linux && ! -e $(readlink $/usr/src/linux) ]]; then
		local ISlot=$(Installed-getPkg $PKG_CAT/$PKG_NAME | getLatest | getSlot)
		rm /usr/src/linux
		if [[ $ISlot != '' && $ISlot != 0 ]]; then
			inform " * Updating Kernel symlink to Linux ${ISlot}"
			ln -sf linux-$ISlot /usr/src/linux
		fi
	fi
}
