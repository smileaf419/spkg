####
## gcc build
## Copyright 2023 spkg developers, licensed under GPLv2
HOMEPAGE="https://gcc.gnu.org/"
DESCRIPTION="GNU Compiler Collection"
LICENSE="GPLv3+ LGPLv3+"
SRC_URI=("https://ftp.gnu.org/gnu/gcc/gcc-${PKG_VER}/gcc-${PKG_VER}.tar.xz")
[[ $VERIFY_SIG == 1 ]] && SRC_URI+=("https://ftp.gnu.org/gnu/gcc/gcc-${PKG_VER}/gcc-${PKG_VER}.tar.xz.sig")
if [[ $MODE == 'bootstrap' ]]; then
	## As we pull in other files from other packages we can't verify the sha1sums as they do no exist within the gcc's sha1 file
	IGNORE_SHA=1
	export GMP_VER=$(DB-getPkg devel/gmp | getLatest | getVersion)
	export MPFR_VER=$(DB-getPkg devel/mpfr | getLatest | getVersion)
	export MPFR_VER=${MPFR_VER%p*}
	export MPC_VER=$(DB-getPkg devel/mpc | getLatest | getVersion)

	echo " * GMP Version: $GMP_VER"
	echo " * MPFR Version: $MPFR_VER"
	echo " * MPC Version: $MPC_VER"

	SRC_URI+=("https://ftp.gnu.org/gnu/gmp/gmp-${GMP_VER}.tar.xz")
	SRC_URI+=("https://ftp.gnu.org/gnu/mpc/mpc-${MPC_VER}.tar.gz")
	SRC_URI+=("https://www.mpfr.org/mpfr-$MPFR_VER/mpfr-$MPFR_VER.tar.xz")
	if [[ $VERIFY_SIG == 1 ]]; then
		SRC_URI+=("https://ftp.gnu.org/gnu/gmp/gmp-${GMP_VER}.tar.xz.sig")
		SRC_URI+=("https://ftp.gnu.org/gnu/mpc/mpc-${MPC_VER}.tar.gz.sig")
		SRC_URI+=("https://www.mpfr.org/mpfr-${MPFR_VER}/mpfr-${MPFR_VER}.tar.xz.asc")
	fi
fi
TEST=1
DEPS="apps/zstd devel/gmp devel/mpc devel/mpfr system/zlib"
BDEPS=""
RDEPS=""
ARCHS="x86 x86_64"
SLOT=0
BUILD_SEPERATE_DIR=yes

src_configure() {
	sed -e '/m64=/s/lib64/lib/' \
		-e '/m32=/s/m32=.*/m32=..\/lib32$(call if_multiarch,:i386-linux-gnu)/' \
		-i.orig gcc/config/i386/t-linux64
	mlist=m64,m32,mx32
	configure_default LD=ld               \
	             --enable-languages=c,c++ \
	             --enable-default-pie     \
	             --enable-default-ssp     \
	             --enable-multilib        \
	             --with-multilib-list=$mlist \
	             --disable-bootstrap      \
	             --disable-fixincludes    \
	             --with-system-zlib
}

src_test() {
	ulimit -s 32768
	PATH=$PATH make -k check
	../contrib/test_summary | grep -A7 Summ
}

src_install() {
	install_default

	ln -svfr /usr/bin/cpp "$ROOT/${D}"/usr/lib
	mkdir -p "$ROOT/${D}"/usr/lib/bfd-plugins
	ln -sfv ../../libexec/gcc/$(gcc -dumpmachine)/${PKG_VER}/liblto_plugin.so \
        "$ROOT/${D}"/usr/lib/bfd-plugins/
	ln -sfv gcc "$ROOT/${D}"/usr/bin/cc

if [ TEST == 1 ]; then
	# Test!
	echo 'int main(){}' > dummy.c
	cc dummy.c -v -Wl,--verbose &> dummy.log
	readelf -l a.out | grep ': /lib'
	grep -o '/usr/lib.*/crt[1in].*succeeded' dummy.log
	grep -B4 '^ /usr/include' dummy.log
	grep ~'SEARCHS.*/usr/lib' ~dummy.log ~|sed ~'s|; ~|\n|g'
	grep "/lib.*/libc.so.6 " dummy.log
	grep found dummy.log
	rm -v dummy.c a.out dummy.log
fi

	if [[ $MODE != 'bootstrap' && -z $LIB ]]; then
		mkdir -pv "${D}"/usr/share/gdb/auto-load/usr/lib
		mv -v "${D}"/usr/lib64/*gdb.py "${D}"/usr/share/gdb/auto-load/usr/lib
	fi
}

bootstrap() {
	local glibc=$(DB-getPkg system/glibc | getLatest | getVersion)
	if [[ $glibc == 0 || $glibc == '' ]]; then
		echo " * Expected version got:  $glibc"
		echo " $DIALOG_ERROR Error getting installed glibc version!"
		glibc=2.38
		echo " $IMPORTANT Defaulting to $glibc"
	fi
	echo " * Using glibc: $glibc"
	sed -e '/m64=/s/lib64/lib/' \
		-e '/m32=/s/m32=.*/m32=..\/lib32$(call if_multiarch,:i386-linux-gnu)/' \
		-i.orig ../gcc/config/i386/t-linux64
	local mlist=m64,m32,mx32
#	local mlist=m64
	case $PKG_FLAGS in
		pass1)
			cd ..
			unpack $DISTFILES/gmp-$GMP_VER.tar.xz
			mv gmp{-$GMP_VER,}
			unpack $DISTFILES/mpfr-$MPFR_VER.tar.xz
			mv mpfr{-$MPFR_VER,}
			unpack $DISTFILES/mpc-$MPC_VER.tar.gz
			mv mpc{-$MPC_VER,}
			cd -
			../configure                    \
			    --target=$HOST_TGT          \
			    --prefix=$ROOT/tools        \
			    --with-glibc-version=$glibc \
				--with-sysroot=$ROOT        \
			    --with-newlib               \
				--without-headers           \
			    --enable-default-pie        \
			    --enable-default-ssp        \
			    --enable-initfini-array     \
			    --disable-nls               \
			    --disable-shared            \
				--enable-multilib           \
				--with-multilib-list=$mlist \
				--disable-decimal-float     \
			    --disable-threads           \
			    --disable-libatomic         \
			    --disable-libgomp           \
			    --disable-libquadmath       \
			    --disable-libssp            \
			    --disable-libvtv            \
			    --disable-libstdcxx         \
			    --enable-languages=c,c++ &&
			## As we set a ROOT/tools, we cannot use install_default or it'd install into ROOT/ROOT/tools
			## But we require the prefix to be the actual install.
			compile_default && make DESTDIR="$D" install
		;;
		libstdc++)
			../libstdc++-v3/configure           \
			    --host=$HOST_TGT                \
			    --build=$(../config.guess)      \
			    --prefix=/usr                   \
			    --enable-multilib               \
			    --disable-nls                   \
			    --disable-libstdcxx-pch         \
				--with-gxx-include-dir=$ROOT/tools/$HOST_TGT/include/c++/${PKG_VER} &&
		   	compile_default && install_default &&
			find "$D/$ROOT"/usr/lib{,64,exec} -name \*.la -delete || true
		;;
		pass2)
			cd ..
			unpack $DISTFILES/gmp-$GMP_VER.tar.xz
			mv gmp{-$GMP_VER,}
			unpack $DISTFILES/mpfr-$MPFR_VER.tar.xz
			mv mpfr{-$MPFR_VER,}
			unpack $DISTFILES/mpc-$MPC_VER.tar.gz
			mv mpc{-$MPC_VER,}
			cd -
			sed '/thread_header =/s/@.*@/gthr-posix.h/' -i ../libgcc/Makefile.in ../libstdc++-v3/include/Makefile.in &&
			../configure                                       \
			    --build=$(../config.guess)                     \
			    --host=$HOST_TGT                               \
			    --target=$HOST_TGT                             \
			    LDFLAGS_FOR_TARGET=-L$PWD/$HOST_TGT/libgcc     \
			    --prefix=/usr                                  \
			    --with-build-sysroot=$ROOT                     \
    			--enable-default-pie                           \
    			--enable-default-ssp                           \
				--enable-initfini-array                        \
    			--disable-nls                                  \
				--enable-multilib --with-multilib-list=$mlist  \
				--disable-decimal-float                        \
			    --disable-libatomic                            \
			    --disable-libgomp                              \
			    --disable-libquadmath                          \
			    --disable-libssp                               \
			    --disable-libvtv                               \
			    --enable-languages=c,c++ &&
			compile_default &&
			install_default &&
			ln -sv gcc "$D/$ROOT"/usr/bin/cc
		;;
	esac
}

post_install() {
	if [[ $PKG_FLAGS == "pass1" ]]; then
		echo " * Generating limits.h ($HOST_TGT)"
		cd $BUILD_PATH/$B &&
		cat gcc/limitx.h gcc/glimits.h gcc/limity.h > \
				`dirname $($HOST_TGT-gcc -print-libgcc-file-name)`/include/limits.h || die "Error generating limits.h"
	fi
}
