####
## glibc build
## Copyright 2023 spkg developers, licensed under GPLv2
HOMEPAGE="https://www.gnu.org/software/libc/"
DESCRIPTION="GNU libc C Library"
LICENSE="LGPL-2.1+ BSD HPND ISC inner-net rc PCRE"
SRC_URI=("https://ftp.gnu.org/gnu/glibc/glibc-${PKG_VER}.tar.xz")
[[ $VERIFY_SIG == 1 ]] && SRC_URI+=("https://ftp.gnu.org/gnu/glibc/glibc-${PKG_VER}.tar.xz.sig")
PATCHES=("https://www.linuxfromscratch.org/patches/lfs/development/glibc-2.38-fhs-1.patch")
DEPS=""
BDEPS="system/linux-headers"
RDEPS="system/libxcrypt"
IUSE="gd"
use-enable gd && UDEPS="media/gd apps/bzip2 devel/expat devel/libpcre media/fontconfig media/freetype media/libpng media/libwebp system/zlib"
ARCHS="x86 x86_64"
SLOT=0
BUILD_SEPERATE_DIR=yes
MULTILIB="64 32 x32"
_SPKG_CLEAN=rm

src_configure() {
	# Ensure ldconfig and sln are installed into /sbin
	echo "rootsbindir=/sbin" > ../configparms

	# 64bit build
	if [[ $LIB == 64 ]]; then
		mkdir -pv $D/$ROOT/lib{,64}
		ln -sfv ../lib/ld-linux-x86-64.so.2 $D/$ROOT/lib64
		ln -sfv ../lib/ld-linux-x86-64.so.2 $D/$ROOT/lib64/ld-lsb-x86-64.so.3
		## Set to blank so we set a lib dir of /lib instead of /lib64
		LIB=
	fi
	../configure --prefix=/usr                      \
				 --bindir=/bin                      \
				 --libdir=/lib$LIB                  \
				 --enable-kernel=6.4                \
				 --with-headers=/usr/include        \
				 --enable-multi-arch                \
				 libc_cv_slibdir=/lib$LIB           \
                 --disable-werror                   \
                 --enable-stack-protector=strong    \
                 --disable-crypt                    \
                 $(use-enable gd || echo --with-gd=no)
}

src_compile() {
	compile_default

	# This test fails in a partial LFS environment
	sed '/test-installation/s@$(PERL)@echo not running@' -i ../Makefile
}

src_install() {
	install_default

	# Fix a hardcoded path
	sed '/RTLDLIST=/s@/usr@@g' -i "${D}/$ROOT"/usr/bin/ldd

	cp -v ../nscd/nscd.conf "${D}/$ROOT"/etc/nscd.conf
	mkdir -pv "${D}/$ROOT"/var/cache/nscd
}

post_install() {
#	if [[ $MODE == "bootstrap" ]]; then
#		echo -n " * Running mkheaders: " &&
#		$ROOT/tools/libexec/gcc/$BOOTSTRAP_TGT/$(Installed-getPkg system/gcc | getVersion)/install-tools/mkheaders && echo Done
#	fi

	echo " * Installing Locales"
	mkdir -p /usr/lib/locale

	# These install the bare amount
	# for all of them use: make localedata/install-locales
#	inform " * For a listing of optimal coverage of locales for tests use the script found in spkg-tools/locale"
#	printf " * Generating [%2d/%2d] %-22s: " 1 4 "C.UTF-8"
#	(localedef -i POSIX -f UTF-8 C.UTF-8 2> /dev/null || true) && echo " ${GREEN}Ok${NORMAL}" || echo " ${RED}Failed${NORMAL}"
#	printf " * Generating [%2d/%2d] %-22s: " 2 4 "ja_JP.SJIS"
#	(localedef -i ja_JP -f SHIFT_JIS ja_JP.SJIS 2> /dev/null || true) && echo " ${GREEN}Ok${NORMAL}" || echo " ${RED}Failed${NORMAL}"
#	printf " * Generating [%2d/%2d] %-22s: " 3 4 "en_US"
#	localedef -i en_US -f ISO-8859-1 en_US && echo " ${GREEN}Ok${NORMAL}" || echo " ${RED}Failed${NORMAL}"
#	printf " * Generating [%2d/%2d] %-22s: " 4 4 "en_US.UTF-8"
#	localedef -i en_US -f UTF-8 en_US.UTF-8 && echo " ${GREEN}Ok${NORMAL}" || echo " ${RED}Failed${NORMAL}"
	$INSTALL_PATH/locales

	if [ ! -e "/etc/nsswitch.conf" ]; then
		cat > "/etc/nsswitch.conf" << "EOF"
passwd: files
group: files
shadow: files

hosts: files dns
networks: files

protocols: files
services: files
ethers: files
rpc: files
EOF
	fi

	if [ ! -e "/etc/ld.so.conf" ]; then
		cat > /etc/ld.so.conf << "EOF"
/usr/local/lib
/opt/lib
include /etc/ld.so.conf.d/*.conf

EOF
		mkdir -p "/etc/ld.so.conf.d"
	fi
}

bootstrap() {
	# /lib64  64bit
	# /lib32  32bit
	# /lib    Generic Libraries.

	# 64bit build
	mkdir -pv $D/$ROOT/lib{,64}
	ln -sfv ../lib/ld-linux-x86-64.so.2 $D/$ROOT/lib64
	ln -sfv ../lib/ld-linux-x86-64.so.2 $D/$ROOT/lib64/ld-lsb-x86-64.so.3
	echo "rootsbindir=/sbin" > configparms
	../configure --prefix=/usr                      \
				 --bindir=/bin                      \
				 --libdir=/lib                      \
				 --host=$BOOTSTRAP_TGT              \
				 --build=$(../scripts/config.guess) \
				 --enable-kernel=6.4                \
				 --with-headers=$ROOT/usr/include   \
				 --enable-multi-arch                \
				 --disable-crypt                    \
				 libc_cv_slibdir=/lib &&
	compile_default &&
	install_default
	sed '/RTLDLIST=/s@/usr@@g' -i "$D/$ROOT"/bin/ldd

	# 32bit build
	make clean
	find .. -name "*.a" -delete

	CC="$BOOTSTRAP_TGT-gcc -m32" \
	CXX="$BOOTSTRAP_TGT-g++ -m32" \
	../configure --prefix=/usr                      \
				 --host=$BOOTSTRAP_TGT32            \
				 --build=$(../scripts/config.guess) \
				 --enable-kernel=3.2                \
				 --with-headers=$ROOT/usr/include   \
				 --enable-multi-arch                \
				 --libdir=/lib32                    \
				 --libexecdir=/lib32                \
                 --disable-crypt                    \
				 libc_cv_slibdir=/lib32 &&
	compile_default &&
	make DESTDIR=$PWD/DESTDIR install &&
	cp -a DESTDIR/lib32 $D/$ROOT &&
	install -vm644 DESTDIR/usr/include/gnu/{lib-names,stubs}-32.h \
				   $D/$ROOT/usr/include/gnu/ &&
	ln -svf ../lib32/ld-linux.so.2 $D/$ROOT/lib/ld-linux.so.2 || die "Error building glibc 32bit"

	# x32 build
	make clean &&
	find .. -name "*.a" -delete

	CC="$BOOTSTRAP_TGT-gcc -mx32" \
	CXX="$BOOTSTRAP_TGT-g++ -mx32" \
	../configure --prefix=/usr                      \
				 --host=$BOOTSTRAP_TGTX32           \
				 --build=$(../scripts/config.guess) \
				 --enable-kernel=3.2                \
				 --with-headers=$ROOT/usr/include   \
				 --enable-multi-arch                \
				 --libdir=/libx32                   \
				 --libexecdir=/libx32               \
                 --disable-crypt                    \
				 libc_cv_slibdir=/libx32 &&
	compile_default &&
	make DESTDIR=$PWD/DESTDIR install &&
	cp -a DESTDIR/libx32 $D/$ROOT &&
	install -vm644 DESTDIR/usr/include/gnu/{lib-names,stubs}-x32.h \
				   $D/$ROOT/usr/include/gnu/ &&
	ln -svf ../libx32/ld-linux-x32.so.2 $D/$ROOT/lib/ld-linux-x32.so.2 || die "Error building glibc x32bit"
}
