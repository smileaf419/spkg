####
## linux-headers build
## Copyright 2023 spkg developers, licensed under GPLv2
HOMEPAGE="https://kernel.org"
DESCRIPTION="Linux Kernel Headers"
LICENSE="GPLv2"
DEPS=""
BDEPS=""
RDEPS=""
ARCHS="~x86 ~x86_64"
SLOT=0
RESTRICT="strip nobin"

URL_BASE="https://cdn.kernel.org/pub/linux/kernel/v6.x"

## Download the Incr patches rather than the full source for each version.
if [[ $MODE != "search" ]]; then
	MV=$(getMajorVer $PKG_VER)
	MiV=$(getMinorVer $PKG_VER)
	MicV=$(getMicroVer $PKG_VER)
	VerIncr=15
	VerStart=1

	## If our MicV becomes too high, it becomes too time consuming to download all the patches
	## Grab every 20 version's archive, and patch up.
	if [ $(( $MicV % $VerIncr )) == 0 ]; then
		if [[ $MicV == 0 ]]; then
			SRC_URI=("$URL_BASE/linux-${MV}.${MiV}.tar.xz")
			B=linux-$MV.$MiV
		else
			SRC_URI=("$URL_BASE/linux-${MV}.${MiV}.${MicV}.tar.xz")
			B=linux-$MV.$MiV.$MicV
		fi
	## If we've not reach our threshold yet, grab the original
	elif [ $MicV -lt $VerIncr ]; then
		SRC_URI=("$URL_BASE/linux-${MV}.${MiV}.tar.xz")
		B=linux-$MV.$MiV
	## Otherwise, we need to grab the archive closest to our current version.
	else
		VerStart=$(( $(( $MicV / $VerIncr )) * $VerIncr ))
		SRC_URI=("$URL_BASE/linux-${MV}.${MiV}.${VerStart}.tar.xz")
	fi
	[[ $VERBOSE -gt 0 ]] && echo "Found Archive: ${MV}.${MiV}"
	if [[ $MicV -gt 0 && $MicV -lt $VerIncr ]]; then
		PATCHES=("$URL_BASE/patch-${MV}.${MiV}.1.xz")
	fi

	if [[ $(( $MicV % $VerIncr )) -gt 0 ]]; then
		[[ $VERBOSE -gt 0 ]] && echo "Getting Patches from $VerStart to $MicV"
		for x in $(seq $VerStart $(( ${MicV}-1 ))); do
			N=$(( ${x}+1 ))
			[[ $VERBOSE -gt 0 ]] && echo "Adding Incr Patch: ${MV}.${MiV}.${x}-${N}"
			PATCHES+=("$URL_BASE/incr/patch-${MV}.${MiV}.${x}-${N}.xz")
		done
	fi
fi

src_configure() {
	unset ARCH
	make mrproper
}

src_compile() {
	unset ARCH
	make headers
}

src_test() { :; }

src_install() {
	unset ARCH
	find usr/include -type f ! -name '*.h' -delete
	mkdir -pv "${D}/${ROOT}/usr"
	cp -rv usr/include "${D}/${ROOT}/usr"
}
