####
## LLVM build script
## Copyright 2023 spkg developers, licensed under GPLv2
## Referenced linuxfromscratch and Slackware's directions.

HOMEPAGE="https://llvm.org/docs/index.html"
DESCRIPTION="A collection of modular and reusable compiler and toolchain technologies"
LICENSE="Apache-2 LLVM"
SRC_URI=("https://github.com/llvm/llvm-project/releases/download/llvmorg-${PKG_VER}/llvm-${PKG_VER}.src.tar.xz"
## Support Files
"https://github.com/llvm/llvm-project/releases/download/llvmorg-${PKG_VER}/cmake-${PKG_VER}.src.tar.xz"
"https://github.com/llvm/llvm-project/releases/download/llvmorg-${PKG_VER}/third-party-${PKG_VER}.src.tar.xz"
## Tools
"https://github.com/llvm/llvm-project/releases/download/llvmorg-${PKG_VER}/clang-${PKG_VER}.src.tar.xz"
## compile failed, doesn't seem to be required and I have no clue what it is anyway!
## TODO: post failure message here for reference.
#"https://github.com/llvm/llvm-project/releases/download/llvmorg-${PKG_VER}/flang-${PKG_VER}.src.tar.xz"
"https://github.com/llvm/llvm-project/releases/download/llvmorg-${PKG_VER}/lldb-${PKG_VER}.src.tar.xz"
"https://github.com/llvm/llvm-project/releases/download/llvmorg-${PKG_VER}/lld-${PKG_VER}.src.tar.xz"
## clang tools
"https://github.com/llvm/llvm-project/releases/download/llvmorg-${PKG_VER}/clang-tools-extra-${PKG_VER}.src.tar.xz"
## Projects
"https://github.com/llvm/llvm-project/releases/download/llvmorg-${PKG_VER}/compiler-rt-${PKG_VER}.src.tar.xz"
"https://github.com/llvm/llvm-project/releases/download/llvmorg-${PKG_VER}/openmp-${PKG_VER}.src.tar.xz"
"https://github.com/llvm/llvm-project/releases/download/llvmorg-${PKG_VER}/libcxx-${PKG_VER}.src.tar.xz"
"https://github.com/llvm/llvm-project/releases/download/llvmorg-${PKG_VER}/libcxxabi-${PKG_VER}.src.tar.xz"
"https://github.com/llvm/llvm-project/releases/download/llvmorg-${PKG_VER}/polly-${PKG_VER}.src.tar.xz"
"https://github.com/llvm/llvm-project/releases/download/llvmorg-${PKG_VER}/libunwind-${PKG_VER}.src.tar.xz"
)

PATCHES=(
#"https://www.linuxfromscratch.org/patches/blfs/svn/clang-16.0.5-enable_default_ssp-1.patch"
)

DEPS="apps/xz-utils apps/zstd devel/libffi devel/libxml2 system/ncurses system/zlib"
BDEPS="devel/python"
RDEPS=""
ARCHS="x86 x86_64"
SLOT=0
setBuildENV cmake ninja
BUILD_SEPERATE_DIR=yes
B=llvm-${PKG_VER}.src
IUSE="doc gcc"
## FIXME: These dependencies are not available
# use-enable doc && UDEPS="sphinx recommonmark doxygen"
[[ $ENABLE_TESTS == 1 ]] && UDEPS+=" network/rsync python/psutil"

src_prepare() {
	PYTHON_VER=$(Installed-getPkg devel/python | getLatest | getVersion)
	PYTHON_VER=${PYTHON_VER%.*}

	[[ $ARCH == *x86_64 ]] && append-cflags -fPIC

	append-ldflags -lcursesw -lncursesw -ltinfow
}

src_unpack() {
	SRC_URI=(${SRC_URI[*]})
	local length=${#SRC_URI[@]}
	for (( l=0; l<${length}; l++ )); do
		f=${SRC_URI[$l]}
		file=${f##*/}
		P=${file%-*}
		[[ $file == third* ]] && P='third-party'
		[[ $file == clang-tools* ]] && P='clang-tools-extra'
		case $P in
			cmake)             dir=$BUILD_PATH ;;
			third-party)       dir=$BUILD_PATH ;;
			clang)             dir=$B/tools ;;
#			flang)             dir=$B/tools ;;
			lldb)              dir=$B/tools ;;
			lld)               dir=$B/tools ;;
			clang-tools-extra) dir=$B/tools/clang/tools ;;
			compiler-rt)       dir=$B/projects ;;
			openmp)            dir=$B/projects ;;
			libcxx)            dir=$B/projects ;;
			libcxxabi)         dir=$B/projects ;;
			polly)             dir=$B/projects ;;
			libunwind)         dir=$B/projects ;;
		esac
		unpack ${DISTFILES}/${file} $dir
		if [[ $file != llvm* && -e $dir/${file%.tar*} ]]; then
			mv "$dir/${file%.tar*}" "$dir/$P"
		fi
	done
}

src_patch() {
	[[ $P == '' ]] && return 0
	PATCHES=($P)
	spatch ${PATCHES[0]} -Np2 -d tools/clang
	PATCHES=${PATCHES[@]:1}
	patch_default $PATCHES
	cd - > /dev/null
}

src_configure() {
	grep -rl '\.\./runtimes' $BUILD_PATH | xargs sed 's,\.\./runtimes,/runtimes,' -i
	ln -s $BUILD_PATH/$B/projects/libcxx* $BUILD_PATH

	## Fix python scripts to use python3
	grep -rl '#!.*python' .. | xargs sed -i '1s/python$/python3/'

	## Fix a broken testcase caused by enabling SSP by default (LFS patch)
	sed 's/clang_dfsan/& -fno-stack-protector/' \
		-i ../projects/compiler-rt/test/dfsan/origin_unaligned_memtrans.c

	mkdir -p include
	## Copy this LLVM libunwind header or it won't be found:
	cp -a ../projects/libunwind/include/mach-o include

	## Check if we're already installed, if so use llvm to compile rather than gcc
	if is-installed system/llvm && ! use-enable gcc; then
		echo " * Build System: clang"
		CC='clang'
		CXX='clang++'
		CONF_ADD_FLAGS=(-DLLVM_USE_LINKER=lld
		-DLIBCXX_INCLUDE_BENCHMARKS=OFF
		-DCOMPILER_RT_BUILD_LIBFUZZER=OFF
		-DLIBCXX_ENABLE_ABI_LINKER_SCRIPT=ON
		)
	else
		echo " * Build System: GCC"
		CC='gcc'
		CXX='g++'
		## These projects seem to have issues building under GCC
		## libunwind uses -nostdlib which does not exist in GCC, but does in clang
		rm -fr ../projects/{libunwind,libcxx{,abi},compiler-rt}
	fi

	configure_default                             \
		-DCMAKE_C_FLAGS:STRING="$CFLAGS"          \
		-DCMAKE_CXX_FLAGS:STRING="$CFLAGS"        \
		-DLLVM_ENABLE_FFI=ON                      \
		-DLLVM_BUILD_LLVM_DYLIB=ON                \
		-DLLVM_LINK_LLVM_DYLIB=ON                 \
		-DLLVM_ENABLE_RTTI=ON                     \
		-DLLVM_TARGETS_TO_BUILD="host;AMDGPU;BPF" \
		-DLLVM_BINUTILS_INCDIR=/usr/include       \
		-DLLVM_INCLUDE_BENCHMARKS=OFF             \
		-DCLANG_DEFAULT_PIE_ON_LINUX=ON           \
		-DCMAKE_C_COMPILER="$CC"                  \
		-DCMAKE_CXX_COMPILER="$CXX"               \
		-DLLVM_CCACHE_BUILD=OFF                   \
		-DLLVM_ENABLE_ZLIB=ON                     \
		-DLLVM_ENABLE_ASSERTIONS=OFF              \
		-DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=NO   \
		-Wno-dev -G Ninja


	if use-enable doc; then
		echo " * Building Documentation"
		cmake -DLLVM_BUILD_DOCS=ON            \
			  -DLLVM_ENABLE_SPHINX=ON         \
			  -DSPHINX_WARNINGS_AS_ERRORS=OFF \
			  -Wno-dev -G Ninja ..
		ninja docs-llvm-html  docs-llvm-man
		echo " * Building clang Documentation"
		ninja docs-clang-html docs-clang-man
		echo " * Building Doxygen Documentation"
		ninja doxygen-html
	fi
}

src_test() {
	sh -c 'ulimit -c 0 && ninja check-all'
}

src_install() {
	install_default

	## Install clang-static-analyzer:
	for i in ccc c++; do
		ln -s /usr/libexec/$i-analyzer \
		$D/usr/bin/$i-analyzer || exit 1
	done

	## Ensure lit-cpuid is installed:
	if [ ! -r $D/usr/bin/lit-cpuid ]; then
		cp -a build/bin/lit-cpuid $D/usr/bin/lit-cpuid
		chmod 755 $D/usr/bin/lit-cpuid
	fi

	## Remove symlink to libgomp, which is already provided by gcc:
	rm -f $D/usr/lib/libgomp.so

	## Install Python bindings:
	mkdir -p "$D/usr/lib/python${PYTHON_VER}/site-packages"
	cp -a tools/clang/bindings/python/clang "$D/usr/lib/python${PYTHON_VER}/site-packages/"

	## Remove bundled python-six:
	rm -f "$D/usr/lib/python${PYTHON_VER}/site-packages/six.py"

	## Compile Python scripts:
	python -m compileall    "$D/usr/lib/python${PYTHON_VER}/site-packages/clang"
	python -O -m compileall "$D/usr/lib/python${PYTHON_VER}/site-packages/clang"
	python -m compileall    "$D/usr/lib/python${PYTHON_VER}/site-packages/lldb"
	python -O -m compileall "$D/usr/lib/python${PYTHON_VER}/site-packages/lldb"
	python -m compileall    "$D/usr/share/scan-view"
	python -O -m compileall "$D/usr/share/scan-view"
	python -m compileall    "$D/usr/share/clang"
	python -O -m compileall "$D/usr/share/clang"
	python -m compileall    "$D/usr/share/opt-viewer"
	python -O -m compileall "$D/usr/share/opt-viewer"

	cp bin/FileCheck "${D}"/usr/bin

	if use-enable doc; then
		install -v -d -m755 $D/usr/share/doc/llvm-${PKG_VER}
		mv -v $D/usr/share/doc/LLVM/llvm $D/usr/share/doc/llvm-${PKG_VER}
		rmdir -v --ignore-fail-on-non-empty $D/usr/share/doc/LLVM

		install -v -d -m755 $D/usr/share/doc/llvm-${PKG_VER}
		mv -v $D/usr/share/doc/LLVM/clang $D/usr/share/doc/llvm-${PKG_VER}
		rmdir -v --ignore-fail-on-non-empty $D/usr/share/doc/LLVM
	fi
}
