####
## Rust Build
## Copyright 2023 spkg developers, licensed under GPLv2
HOMEPAGE="https://www.rust-lang.org/"
DESCRIPTION="Systems programming language from Mozilla"
LICENSE="MIT Apache-2.0 BSD BSD-1 BSD-2 BSD-4 UoI-NCSA"
SRC_URI=("https://static.rust-lang.org/dist/rustc-${PKG_VER}-src.tar.xz")
#[[ $VERIFY_SIG == 1 ]] && SRC_URI+=("")
PATCHES=()
DEPS="devel/openssl system/llvm system/zlib"
BDEPS="network/curl"
RDEPS=""
setBuildENV cmake make
BUILD_SEPERATE_DIR=no
ARCHS="x86 x86_64"
SLOT=0
B="rustc-${PKG_VER}-src"

src_configure() {
	mkdir -pv $D/opt/rustc-${PKG_VER}
	ln -svfn rustc-${PKG_VER} $D/opt/rustc

	cat << EOF > config.toml
# see config.toml.example for more possible options
# See the 8.4 book for an old example using shipped LLVM
# e.g. if not installing clang, or using a version before 13.0

# tell x.py to not keep printing an annoying warning
changelog-seen = 2

[llvm]
# by default, rust will build for a myriad of architectures
targets = "X86"

# When using system llvm prefer shared libraries
link-shared = true

[build]
# omit docs to save time and space (default is to build them)
docs = false

# install extended tools: cargo, clippy, etc
extended = true

# Do not query new versions of dependencies online.
locked-deps = true

# Specify which extended tools (those from the default install).
tools = ["cargo", "clippy", "rustfmt"]

# Use the source code shipped in the tarball for the dependencies.
# The combination of this and the "locked-deps" entry avoids downloading
# many crates from Internet, and makes the Rustc build more stable.
vendor = true

[install]
prefix = "/opt/rustc-$PKG_VER"
docdir = "share/doc/rustc-$PKG_VER"

[rust]
channel = "stable"
description = "for spkg"

# BLFS used to not install the FileCheck executable from llvm,
# so disabled codegen tests.  The assembly tests rely on FileCheck
# and cannot easily be disabled, so those will anyway fail if
# FileCheck has not been installed.
#codegen-tests = false

[target.x86_64-unknown-linux-gnu]
# NB the output of llvm-config (i.e. help options) may be
# dumped to the screen when config.toml is parsed.
llvm-config = "/usr/bin/llvm-config"

[target.i686-unknown-linux-gnu]
# NB the output of llvm-config (i.e. help options) may be
# dumped to the screen when config.toml is parsed.
llvm-config = "/usr/bin/llvm-config"
EOF
}

src_compile() {
	{ [ ! -e /usr/include/libssh2.h ] || export LIBSSH2_SYS_USE_PKG_CONFIG=1; } &&
		RUST_BACKTRACE=1 python3 ./x.py build
}

src_test() {
	python3 ./x.py test --verbose --no-fail-fast | tee rustc-testlog
	grep '^test result:' rustc-testlog |
		awk '{sum1 += $4; sum2 += $6} END { print sum1 " passed; " sum2 " failed" }'
}

src_install() {
	{ [ ! -e /usr/include/libssh2.h ] || export LIBSSH2_SYS_USE_PKG_CONFIG=1; } &&
		DESTDIR="$D" python3 ./x.py -vv install

	mkdir -p $D/usr/bin
	for l in $(ls -1 $D/opt/rustc/bin/); do
		ln -svf /opt/rustc/bin/$l $D/usr/bin/$l
	done
}
