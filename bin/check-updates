#!/bin/bash

## Function to figure out where this script is at so we can reference our lib directory.
## Taken from:
## https://stackoverflow.com/questions/59895/how-do-i-get-the-directory-where-a-bash-script-is-located-from-within-the-script
whereAmI() {
	local SOURCE=${BASH_SOURCE[0]}
	while [ -L "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
		local DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
		SOURCE=$(readlink "$SOURCE")
		## if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
		[[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE
	done
	local DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )

	## Output our parent directory as the script should be getting called from a:
	## spkg/bin dir and we want the spkg directory.
	dirname $DIR
}

## Enable Debug
#set -x
export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

source /etc/spkg.conf

## Directory where script files are installed into.
INSTALL_PATH=${INSTALL_PATH:-$(whereAmI)}
## Directory all build files are installed into.
export PKG_DB_DIR=${PKG_DB_DIR:-/var/db/spkg}
## Database Directory for local data storage.
export CACHE_DIR=${CACHE_DIR:-/var/cache/spkg}
## Storage directory for all downloaded files
export DISTFILES=${DISTFILES:-$CACHE_DIR/files}

source "${INSTALL_PATH}/lib/pkg-utils"
source "${INSTALL_PATH}/lib/pkg-tools"
source "${INSTALL_PATH}/lib/updatesha1"
source "${INSTALL_PATH}/lib/utils"
source "${INSTALL_PATH}/lib/build-tools"
source "${INSTALL_PATH}/lib/builddefaults"

## Gentoo
SRC_URI="https://gentoo.osuosl.org/distfiles/"
## Slackware
#SRC_URI="https://mirrors.slackware.com/slackware/slackware-current/source/FILE_LIST"
DFILES_INDEX="/tmp/distindex"
DFILES=/tmp/distfiles
UPDATE_LIST=/tmp/updatelist

VERBOSE=${VERBOSE:-0}

if [[ ! -e $DFILES_INDEX || $(find "$DFILES_INDEX" -mtime +1 -print) ]]; then
	cd ${DFILES_INDEX%/*}
	wget -nv --show-progress -np -r -l 1 "$SRC_URI" || (rm $DFILES_INDEX; die "Error getting list")
	cat gentoo.osuosl.org/distfiles/*/index.html > $DFILES_INDEX
fi
echo Original: $(cat $DFILES_INDEX | wc -l) entries
## URL directory based filtering
grep "href=" $DFILES_INDEX | sed -e 's,.*href="\([^"]*\).*,\1,'> $DFILES
## Slackware filtering
#grep ' ./' $DFILES_INDEX | sed -e 's,^.*/,,' | grep '\.' > $DFILES
echo Files: $(cat $DFILES | wc -l) entries

FILTER=("\.patch"
		"\.crate"
		"\.asc"
		"\.sig"
		"\.diff"
		"\.SlackBuild"
		"/"
		"docs-html"
		"\.gem"
		"\-userguide"
		"\-rc[0-9]"
		"\-RC-"
		"\-beta"
		"pre[0-9]"
		"^which"
		"\.9[0-9]"
		"gettext-1"
		"gtk-4"
		"gtksourceview-[45]"
		"lmdb-1"
		"gnupg-2.7"
		"git-4"
		"luit-20"
		"mako-1.7"
		"bash-completion-20"
		"json-20"
		"zstd-[0-9]\.[0-9]\.[0-9]\.[0-9]"
)
for f in ${FILTER[@]}; do
	grep -iv $f $DFILES > ${DFILES}.new
	mv $DFILES{.new,}
done

echo Filtered: $(cat $DFILES | wc -l) entries

for p in $(find $PKG_DB_DIR -mindepth 2 -type d | sed "s,$PKG_DB_DIR/,,"); do
	p=$(echo $p | sed "s,$PKG_DB_DIR/,,")
	PK=$p
	[[ $PK == accounts/* || $PK == spkg* || $PK == virtual/* || $PK == *git/* ]] && continue
#	echo -n "Checking $PK : "
	p=${p#*/}
	# Check Gentoo DFILES for latest versions.

	# Alter the names for filename detection
	case "$p" in
		xz-utils) p=xz ;;
		libpcre) p=pcre- ;;
		libpcre2) p=pcre2 ;;
		libsdl) p=SDL-1 ;;
		libsdl2) p=SDL2 ;;
		llvm) p=llvm-project ;;
		maven-bin) p=apache-maven ;;
		btrfs-progs) p+=-v ;;
		musicbrainz) p=lib$p ;;
		xorg-proto) p=xorgproto ;;
		linux-headers|linux-kernel) p=linux-6 ;;
		lmdb) p=lmdbxx-0 ;;
		cdparanoia) p=cdparanoia-III ;;
		pam) p=Linux-${p^^};;
		xvid) p+=core ;;
		docbook-dtd) p=docbook-4 ;;
		docbook-xsl-nons) p=docbook-xsl ;;
		ghostscript-gpl) p=ghostscript ;;
	esac

	FILES=$(grep -P -i "^$p[-0-9\._]+(src|bin|orig|source)?.(tar|zip|tbz2|tgz)" $DFILES)

	# Get the correct versions
	case "$p" in
		expect) FILES=$(echo $FILES | grep -v 'Expect' | sed 's,expect,,g') ;;
		lynx) FILES=$(echo $FILES | sed 's,lynx,,g') ;;
		gcc) FILES=$(echo $FILES| tr ' ' '\n' | grep -E -v "202[0-9]{5}" | tail -n2 | head -n1) ;;
		libopenmpt) FILES=$(grep -P -i "^$p-" $DFILES); FILES=${FILES//+release.autotools/} ;;
		ntp|openssh) FILES=$(grep -P "^$p-[0-9p]+" $DFILES | grep -v 'manpages') ;;
		timezone-data) FILES=$(grep -P "tzdata[0-9a-z]{5}" $DFILES) ;;
		unzip) FILES=$(grep -P unzip[0-9]+ $DFILES | sed -e 's,unzip,unzip-,' -e 's,\([0-9]\),\1.,g' -e 's,\.\.,.,') ;;
		vulkan-headers|vulkan-loader) FILES=$(echo $FILES | sed 's,.0.tar.*,,g' ) ;;
	esac
	FILE=$(echo $FILES | tr ' ' '\n' | sort -V | tail -n1)
	FILE_O=$FILE
	FILE=$(echo $FILE | sed -E -e 's,(-bin.*|[\.-]src.*|-source.*|\.orig|.tar.*|.tgz|.tbz2|.zip)$,,')


	# Do some package specific modifications here
	case "$p" in
		boost) FILE=${FILE/_/-}; FILE=${FILE//_/.} ;;
		btrfs-progs-v) FILE=${FILE/-v/-} ;;
		lvm2) FILE=$(echo $FILE|sed 's,LVM2\.,lvm2-,') ;;
		tcl) FILE=${FILE/tcl/tcl-} ;;
		timezone-data) FILE=${FILE/tzdata/} ;;
		firefox) FILE=${FILE%%.source} ;;
	esac

	# These apply to all packages.
	FILE=${FILE/.orig/}
	FILE=${FILE//_/-}

	PKG=$(DB-getPkgList $PK | fileToList | getLatest)
	setPkgENV $PKG > /dev/null
	if [[ ${FILE##*-} == "" ]]; then
		echo "Checking $PK : $(getVerRev $(getPKG)) : " $(source $PKG_BLD; echo "$HOMEPAGE")
	fi
	if [[ ${FILE##*-} == $PKG_VER ]]; then
		continue
	fi

	## Invalid Versions
	case "$PKG_NAME" in
		gdb) version_gt ${FILE##*-} 1000 && continue ;;
		Mako) version_ge ${FILE##*-} 1.8.0 && continue ;;
		highway) [[ ${FILE##*-} == '1.1.0' ]] && continue ;;
		## Unstable release
		libtool) [[ ${FILE##*-} == '2.5.0' ]] && continue ;;
		gd) version_gt ${FILE##*-} 2.80 && continue ;;
		zip) [[ ${FILE##*-} == zip* ]] && continue ;;
		git) [[ ${FILE##*-} == '3.0.0' ]] && continue ;;
	esac

	if version_gt ${FILE##*-} $PKG_VER; then
		echo " * Updating $PKG_CAT/$PKG_NAME : $PKG_VER -> ${FILE##*-}" | tee -a $UPDATE_LIST
		cp -v "$PKG_BLD" "$PKG_DB_DIR/$PKG_CAT/$PKG_NAME/${FILE##*-}.build"
		sed -e '/ARCHS/ s,\( \|="\)\([^~]\),\1~\2,g' \
			-i "$PKG_DB_DIR/$PKG_CAT/$PKG_NAME/${FILE##*-}.build"
		updatesha1 $PKG_CAT/$PKG_NAME
	fi
done
if [ -e $UPDATE_LIST ]; then
	cat $UPDATE_LIST
	rm $UPDATE_LIST
fi
