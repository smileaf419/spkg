####
## Package Utils
## Author: Stephen Leaf <smileaf@me.com>
## Date: 2023-04-08
##
## Methods are split-up into 3 segments:
## Installed - Used to retrieve data from installed packages
## Db        - Used to retrieve current data from available packages.
##
## (this file)
## Utils     - Useful methods build files may need to perform commonly operations.
##
### Installed and Db should contain the same named methods but from different pools (PKG_DB_DIR and PKG_CACHE)

# Just like it sounds, End the program immediately.
die() { echo "$*" 1>&2 ; exit 77; }
export -f die

inform() { echo "$*" | tee -a $INFORMLOG; }
export -f inform

# Utility method to unpack a variety of archives.
# Currently supports: tar.*, .zip
unpack() {
	FILE=$1
	DIR=${2:-.}
	if [[ $FILE == *.tar.* || $FILE == *.tgz ]]; then
		tar -xf "$FILE" -C "$DIR" || die "Failed to extract!"
	elif [ ${FILE##*.} == "zip" ]; then
		unzip -o "$FILE" -d "$DIR" || die "Failed to extract!"
	# TODO: Add rar support
	# TODO: Add deb support
	# TODO: Add rpm support
	else
		die "Cannot extract unknown type: $FILE"
	fi
}
export -f unpack

# Applies a patch, optionally with a set of arguments.
spatch() {
	patch=$1
	shift 1
	patch_options=${@:--Np1}
	echo -n " * Applying Patch: $patch ($patch_options)"
	if [[ $patch == *gz ]]; then
		gzip -cd "$patch" | patch $patch_options > /dev/null || die " .. Failed!"
	elif [[ $patch == *xz ]]; then
		xz -cd "$patch" | patch $patch_options > /dev/null || die " .. Failed!"
	elif [[ $patch == *bz2 ]]; then
		bzip2 -cd "$patch" | patch $patch_options > /dev/null || die " .. Failed!"
	else
		patch $patch_options -i "$patch" > /dev/null || die " .. Failed!"
	fi
	echo " .. Ok!"
}
export -f spatch

# Applies a set of patches, within the array, a directory or an archive.
# src_patch automatically calls this method using the PATCHES var.
spatches() {
	# TODO: default to using the global PATCHES
	#       if an argument list is supplied, use that instead.
	PATCHES=($@)
	# FIXME: This cannot handle spaces within any patch path.
	PATCH_FILES=($(echo ${PATCHES[@]} | tr ' ' '\n' | sed "s,^https\?://.*/,${DISTFILES}/,"))

	for p in ${PATCH_FILES[@]}; do
		if [[ $p == *.tar.* ]]; then
			unpack "$p"
			p=${p%.tar.*}
			p=${p##*/}
			echo " * p : $p"
		fi
		if [ -d "$p" ]; then
			echo " * Applying All patches within: $p"
			spatches "$(find "$p" -type f -iname '*.patch' | sort)"
		else
			spatch "$p"
		fi
	done
}
export -f spatches

filter-flags() {
	flags=$@
	for flag in $flags; do
		CFLAGS=$(echo $CFLAGS|sed "s,$flag,,")
		CXXFLAGS=$(echo $CXXFLAGS|sed "s,$flag,,")
		CPPFLAGS=$(echo $CPPFLAGS|sed "s,$flag,,")
	done
	export CFLAGS CXXFLAGS CPPFLAGS
}
export -f filter-flags

append-ldflags() { export LDFLAGS+=" $@"; }
export -f append-ldflags

# Append C flags
append-cflags() { export CFLAGS+=" $@"; }
export -f append-cflags

# Append C++ flags
append-cxxflags() { export CXXFLAGS+=" $@"; }
export -f append-cxxflags

# Append C Pre-processor Flags
append-cppflags() { export CPPFLAGS+=" $@"; }
export -f append-cppflags

# Within a version string of x.y.z
# This will return: x
getMajorVer() {
	[[ -z $1 ]] && VER=$PKG_VER || VER=$1
	echo $VER | tr '.' '\n'|head -n1
}
export -f getMajorVer

# Within a version string of x.y.z
# This will return: y
getMinorVer() {
	[[ -z $1 ]] && VER=$PKG_VER || VER=$1
	c=$(echo $VER | tr '.' '\n'|wc -l)
	if [[ $c == 2 ]]; then
		echo $VER | tr '.' '\n'|tail -n1
	elif [[ $c -ge 3 ]]; then
		echo $VER | tr '.' '\n'|head -n2|tail -n1
	else
		echo 0
	fi
}
export -f getMinorVer

# Within a version string of x.y.z
# This will return: z
getMicroVer() {
	[[ -z $1 ]] && VER=$PKG_VER || VER=$1
	n=$(echo $VER|tr '.' '\n'|wc -l)
	if [[ $n == 3 ]]; then
		echo $VER|tr '.' '\n'|tail -n1
	else
		echo 0
	fi
}
export -f getMicroVer

# Fetch a file from a given address
# Optionally save it under a given name.
fetch_file() {
	# Just Ignore Empty calls.
	[[ $1 == "" ]] && return 0
	FILE=${1##*/}
	OUTFILE=$2
	# No custom outfile .. just save it as normal
	[[ $OUTFILE == "" ]] && OUTFILE=$FILE
	# If we already exist, ignore it
	[ -e "${DISTFILES}/${OUTFILE}" ] && return 0
	wget -c -O "${DISTFILES}/${OUTFILE}" "$1"
	# If we encounter an Error, delete the file and error out.
	if [ $? != 0 ]; then
		[[ -e "$DISTFILES/$OUTFILE" ]] && rm "${DISTFILES}/${OUTFILE}"
		echo "   FILE: $FILE"
		echo "OUTFILE: $OUTFILE"
		echo "      1: $1"
		echo "      2: $2"
		die "Error Downloading";
	fi
}
export fetch_file

# Check a sha1sum of a given file within the package's sha1 file.
checkSha1() {
	[[ $IGNORE_SHA1 == 1 ]] && return 0
	PKG=$1
	FILE=$2
	[[ $FILE == "" ]] && return 0
	[[ $VERBOSE -ge 2 ]] && >&2 echo -n "Checking Sha1: $FILE ... "
	[ ! -e $FILE ] && echo "Failed checking $PKG sha1" && return 1
	h=$(sha1sum $FILE | sed 's,  .*/,  ,' 2> /dev/null)
	[[ $VERBOSE -ge 2 ]] && >&2 echo -n $h
	grep "$h" $PKG/sha1 > /dev/null 2>&1
	if [[ $? == 0 ]]; then
		[[ $VERBOSE -ge 2 ]] && >&2 echo " ..Ok"
	else
		return 1
	fi
	return 0
}
export -f checkSha1

# Check the USE flag for an option,
# return 0 if found; 1 if not.
# returns 2 if found and is disabled
use-enable() { checkinlist $USE $1; }
export -f use-enable

# Check the PKG_FLAGS for an option,
# return 0 if found; 1 if not.
# returns 2 if found and is disabled
pkg-has-flag() { checkinlist $PKG_FLAGS $1; }
export -f pkg-has-flag

# 1: Variable to check
# 2: what to check
checkinlist() {
	V=$1
	if [[ ${V[*]} =~ (^|[[:space:]])"$2"($|[[:space:]]) ]]; then
		return 0
	fi
	if [[ ${V[*]} =~ (^|[[:space:]])-"$2"($|[[:space:]]) ]]; then
		return 2
	fi
	return 1
}
export -f checkinlist

# 1: Config option; 2: needs at least module [0|1]
# 3: Output dialog
checkKernelConfig() {
	CONFIG=$1
	NEEDS_MODULE=$2
	DIALOG=$3
	HAS_PROC=0
	HAS_CONFIG=0

	if [ $NEEDS_MODULE == 0 ]; then
		ERROR_DIALOG="$CONFIG Needs Disabled"
	else
		ERROR_DIALOG="$CONFIG Needs to be Y (built-in) or M (module)"
	fi

	echo -n "Checking for $DIALOG"
	if [ -f /proc/config.gz ]; then
		echo -n " [/proc/config.gz: "
		gzip -cd /proc/config.gz | grep -E "${CONFIG}=[ym]" > /dev/null
		[ $? != $NEEDS_MODULE ] && echo -n "Ok]" && HAS_PROC=1 || echo -n "No]"
	fi
	if [ -f /usr/src/linux/.config ]; then
		echo -n " [/usr/src/linux/.config: "
		grep -E "${CONFIG}=[ym]" /usr/src/linux/.config > /dev/null
		[ $? != $NEEDS_MODULE ] && echo -n "Ok]" && HAS_CONFIG=1 || echo -n "No]"
	fi
	[[ $HAS_PROC == 1 || $HAS_CONFIG == 1 ]] && echo || die $ERR_DIALOG
}
export -f checkKernelConfig

addUser() {
	USER=$1
	shift 1
	grep "^${USER}:" /etc/passwd > /dev/null 2>&1
	if [[ $? != 0 ]]; then
		echo " * Adding User $USER"
		useradd "$@" $USER
	else
		echo " * User Exists: Updating [$@]"
		usermod "$@" $USER
	fi
}
export -f addUser

addGroup() {
	GROUP=$1
	shift 1
	grep "^${GROUP}:" /etc/group > /dev/null 2>&1
	if [[ $? != 0 ]]; then
		echo " * Adding Group $GROUP"
		groupadd "$@" $GROUP
	else
		echo " * Group Exists: Updating [$@]"
		groupmod "$@" $GROUP
	fi
}
export -f addGroup

delUser() {
	USER=$1
	shift 1
	grep "^${USER}:" /etc/passwd > /dev/null 2>&1
	if [[ $? == 0 ]]; then
		echo " * Removing User: $USER"
		userdel "$@" $USER
	else
		echo " * User does not exist: $USER [$@]"
	fi
}
export -f delUser

delGroup() {
	GROUP=$1
	shift 1
	grep "^${GROUP}:" /etc/group > /dev/null 2>&1
	if [[ $? == 0 ]]; then
		echo " * Removing Group: $GROUP"
		groupdel "$@" $GROUP
	else
		echo " * Group does not exist: $GROUP [$@]"
	fi
}
export -f delGroup

install-init.d() {
	(
		d=$PWD
		PKG=$(DB-getPkg sys-boot/blfs-bootscripts)
		PKG_NAME=$(getName $PKG)
		PKG_VER=$(getVerRev $PKG)
		PKG_BLD="$PKG_DB_DIR/$(getCategory $PKG)/${PKG_NAME}/${PKG_VER}.build"
		unset PATCHES SRC_URI
		checkSha1 ${PKG_BLD%/*} $PKG_BLD || die
		source "${PKG_BLD}"
		BUILD_PATH=$d
		B="${PKG_NAME}-${PKG_VER}"
		src_prepare
		src_install install-$1
	)
}
export -f install-init.d

function version_gt() { test "$(echo "$@" | tr " " "\n" | sort -V | head -n 1)" != "$1"; echo $?; }
function version_le() { test "$(echo "$@" | tr " " "\n" | sort -V | head -n 1)" == "$1"; echo $?; }
function version_lt() { test "$(echo "$@" | tr " " "\n" | sort -rV | head -n 1)" != "$1"; echo $?; }
function version_ge() { test "$(echo "$@" | tr " " "\n" | sort -rV | head -n 1)" == "$1"; echo $?; }
export -f version_gt version_le version_lt version_ge
