# .build file default methods
# These methods shouldn't contain helper methods to make the code easier to read.
# Exception would be src_unpack! This should be so rarely ever overridden its easy
# to reference what it does.
# The lack of helper methods makes them readable without having 
# to referencing other files/methods.
# This also reduces the chance that a later change to a helper method 
# causes a build file to break.
# This also brings about a problem of ugly code or non-standard 
# actions and could be prone to breakage/other issues.
# However this is the price to pay for "simplicity" and a crystal clear knowledge
# of whats happening within the build.

# auto, meson, cmake
export configTool=auto

# make, ninja
export buildTool=make

# no defaults to '.' yes to '..'
# Alternatively you can set a path.
export BUILD_SEPERATE_DIR=no

# If cross compiling, set this to an environment var
# ABI=32
# This will run ABI=32 ./configure ...
export SET_ABI=

setBuildENV() {
	[[ -z $1 ]] && configTool=auto || configTool=$1
	[[ -z $2 ]] && buildTool=make || buildTool=$2
	case $configTool in
		auto)
			BDEPS+=" sys-devel/autoconf" ;;
		meson)
			BDEPS+=" dev-util/meson"
			[[ $BUILD_SEPERATE_DIR == no ]] && BUILD_SEPERATE_DIR=yes ;;
		cmake)
			BDEPS+=" dev-util/cmake" ;;
	esac
	case $buildTool in
		make)
			BDEPS+=" sys-devel/automake" ;;
		ninja)
			BDEPS+=" dev-util/ninja" ;;
		pip)
			RESTRICT="nobin nostrip" ;;
	esac
}

src_unpack() { unpack $1; }
src_configure() { configure_default; }
src_compile() { compile_default; }
src_test() { test_default; }
src_install() { install_default; }
post_install() { :; }
src_uninstall() { :; }
src_post_uninstall() { :; }

bootstrap_default() {
	umask 022
	set +h
#	export HOST_TGT=$(uname -m)-leaf-linux-gnu
	export HOST_TGT=${HOST_TGT:-x86_64-leaf-linux-gnu}
	export HOST_TGT32=${HOST_TGT32:-i686-leaf-linux-gnu}
	export HOST_TGTX32=${HOST_TGTX32:-x86_64-leaf-linux-gnux32}
	export PATH="$ROOT/tools/bin:/bin:/sbin:/usr/bin:/usr/sbin"
	export CONFIG_SITE=$ROOT/usr/share/config.site

	# The above code *MUST* be ran
	bootstrap
}
bootstrap() {
	configure_default
	compile_default
	install_default
}

# 1: Any extra switches in addition to the defaults
src_prepare() {
	prepare_default
}

src_patch() {
	spatches "$1" || die "Patching Failed!"
}

configure_default() {
	# FIXME: Currently we default to x86_64 with no way for build files to change this.
	HOST_TGT=${HOST_TGT:-x86_64-pc-linux-gnu}
	HOST_TGT32=${HOST_TGT32:-i686-pc-linux-gnu}
	HOST_TGTx32=${HOST_TGTx32:-x86_64-pc-linux-gnux32}
	d=.
	if [[ $BUILD_SEPERATE_DIR != no ]]; then
		[[ $BUILD_SEPERATE_DIR == yes ]] && d=.. || d=$BUILD_SEPERATE_DIR
	fi
	if [[ $configTool == "auto" ]]; then
		# Not all packages support these options.
		# Allow them to override and still benefit from the use of
		# customizing the *FLAGS.
		CONF_FLAGS=${CONF_FLAGS:=--prefix=/usr --disable-static --enable-shared --docdir=/usr/share/doc/${PKG_NVR}}
		[[ $MODE == "bootstrap" ]] && CONF_FLAGS+=" --host=$HOST_TGT"

		LDFLAGS="$LDFLAGS"   \
		CFLAGS="$CFLAGS"     \
		CPPFLAGS="$CPPFLAGS" \
		CXXFLAGS="$CXXFLAGS" \
		$SET_ABI             \
			$d/configure ${CONF_FLAGS} "$@" || die "Configure Failed!"
	elif [[ $configTool == "meson" ]]; then
		CONF_FLAGS=${CONF_FLAGS:=--prefix=/usr --buildtype=release}
		meson setup ${CONF_FLAGS} "$@" $d || die "Configure Failed!"
	elif [[ $configTool == "cmake" ]]; then
		CONF_FLAGS=${CONF_FLAGS:=-DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_DOCDIR=/usr/share/doc/${PKG_NVR}}
		cmake ${CONF_FLAGS} "$@" $d || die "Configure Failed!"
	fi
}

compile_default() {
	if [[ $buildTool == "make" ]]; then
		make $MAKEOPTS $@ || die "Compile Failed!"
	elif [[ $buildTool == "ninja" ]]; then
		ninja || die "Compile Failed!"
	fi
}

test_default() {
	# Some use check, others use test
	TEST=${TEST:-check}
	
	if [[ $buildTool == "make" ]]; then
		make $MAKEOPTS $@ $TEST || die "Test Failed!"
	elif [[ $buildTool == "ninja" ]]; then
		ninja test || die "Test Failed!"
	fi
}

install_default() {
	if [[ $buildTool == "make" ]]; then
		make DESTDIR="${D}/$ROOT" $@ install || die "Install Failed!"
	elif [[ $buildTool == "ninja" ]]; then
		DESTDIR="${D}/$ROOT" ninja install || die "Install Failed!"
	elif [[ $buildTool == "pip" ]]; then
		python -m pip install --upgrade $PKG_NAME
	fi
}

uninstall_default() {
	if [[ $buildTool == "pip" ]]; then
		python -m pip uninstall -y $PKG_NAME
	fi
}

export -f src_unpack src_configure src_compile src_test \
	configure_default compile_default test_default \
	install_default src_install \
	src_prepare src_patch bootstrap bootstrap_default
