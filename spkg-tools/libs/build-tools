fetch_list() {
	# Output our message
	echo $1
	# local t as we can't string such a thing as ${!1[@]}
	local t=$2[@]
	local tlist=(${!t})
	local length=${#tlist[@]}
	local list=()
	# Preprocess our list here, unless there was a bug elsewhere than this script its sadly required..
	for (( l=0; l<${length}; l++ )); do
		if [[ ${tlist[$l + 1]} == "=>" ]]; then
			list+=("${tlist[$l]} => ${tlist[$l+2]}")
			l+=2
		else
			list+=(${tlist[$l]})
		fi
	done
	local length=${#list[@]}
	for (( l=0; l<${length}; l++ )); do
		C=$(( $l + 1 ))
		file=${list[$l]}
		[[ $file == "" ]] && continue
		if [[ $file =~ (^|[[:space:]])"=>"($|[[:space:]]) ]]; then
			export SRC_OUTFILE=${file/*=> /}
			export SRC_FILE=${file/ =>*/}
			# Once a fetch occurs we don't actually need the old filename.
			# Rename it so as to avoid confusion later.
			if [[ $3 == 'src' ]]; then
				SRC_URI[$l]="${SRC_FILE%/*}/${SRC_OUTFILE}"
			elif [[ $3 == 'patch' ]]; then
				PATCHES[$l]="${SRC_FILE%/*}/${SRC_OUTFILE}"
			fi
		else
			export SRC_FILE=$file
			export SRC_OUTFILE=${SRC_FILE##*/}
		fi
		if [ ! -f "${DISTFILES}/${SRC_OUTFILE}" ]; then
			echo "Fetching ($C of $length) $SRC_FILE"
			fetch_file "$SRC_FILE" "$SRC_OUTFILE"
		fi
		checkSha1 ${PKG_BLD%/*} "$DISTFILES/$SRC_OUTFILE" || die
	done
}

prepare_default() {
	if [[ ! -z $SRC_URI ]]; then
		fetch_list "Fetching Files" SRC_URI 'src'
		fetch_list "Fetching Patches" PATCHES 'patch'
		# Check a sig file if it exists.
		# FIXME: This code fails if there is no public key installed.
		# Build files should depend on a public key package.
#		if [[ $VERIFY_SIG == 1 && $file == *.sig ]]; then
#			echo -n "Checking Signature: ${DISTFILES}/${SRC_FILE%.*} ..."
#			gpg --verify "${DISTFILES}/${SRC_FILE}" "${DISTFILES}/${SRC_FILE%.*}" 2>&1 | grep "Good signature" >/dev/null
#			[ $? == 0 ] && echo "Ok" || die "Failed!"
#		fi

		[[ $FETCH_ONLY == 1 ]] && return

		# We need to downgrade SRC_URI for scripts to access it properly
		SRC=${SRC_URI[@]}
		unset SRC_URI
		export SRC_URI=${SRC[@]}
		SRC_FILE=${SRC_URI%% *}
		
		# We only unpack the first one, anything else will need to be done via the build file.
		echo "Unpacking ${SRC_FILE##*/}"
		if [[ -e /bin/su || -e /usr/bin/su ]]; then
			su -p -c 'src_unpack "${DISTFILES}/${SRC_FILE##*/}"' $BUILD_USER
		else
			src_unpack "${DISTFILES}/${SRC_FILE##*/}"
		fi
		# In most cases archive directories are the name of the archive itself.
		# This could be a better default for B.
		if [ ! -d "${BUILD_PATH}/${B}" ]; then
			echo "Build Directory ($BUILD_PATH/$B) not found! Directory listing of BUILD_PATH:"
			ls "${BUILD_PATH}"
			die "exiting.."
		fi
		cd "${BUILD_PATH}/${B}"
	fi
	if [[ ! -z $PATCHES ]]; then
		P="${PATCHES[@]}"
		# Export so we can use it, unset afterwards. Sad we can't export arrays.
		export P
		if [[ -e /bin/su || -e /usr/bin/su ]]; then
			su -p -c 'src_patch "$P"' $BUILD_USER
		else
			src_patch "$P"
		fi
		unset P
	fi
}
export -f prepare_default

buildPackage() {
	# Export this so packages can override the src_unpack.
	export LDFLAGS CXXFLAGS CFLAGS

	# Download all files.
	# If it fails, create it and try again.
	# Package may have overrode it.	
	cd "${BUILD_PATH}" > /dev/null 2>&1
	if [[ $? != 0 ]]; then
		install -v -o $BUILD_USER -d "${BUILD_PATH}" && cd "${BUILD_PATH}" || die "Failed to create Build Dir."
	else
		chown $BUILD_USER "$BUILD_PATH"
	fi
	src_prepare
	[[ $FETCH_ONLY == 1 ]] && return
		
	if [[ $BUILD_SEPERATE_DIR != no ]]; then
		install -d -o $BUILD_USER build
		cd build
	fi

	# When we pass commands to our BUILD_USER these does not get updated
	# Set it here to avoid permission issues when packages call for
	# $HOME/.cache for example
	export USER=$BUILD_USER
	export LOGNAME=$BUILD_USER
	export HOME=/tmp
	if [[ $MODE != "bootstrap" ]]; then
		echo " * src_configure ($BUILD_USER)"
		if [[ -e /bin/su || -e /usr/bin/su ]]; then
			su -p -c 'src_configure' $BUILD_USER || die "Error in src_configure"
		else
			src_configure
		fi
		echo " * src_compile ($BUILD_USER)"
		if [[ -e /bin/su || -e /usr/bin/su ]]; then
			su -p -c 'src_compile' $BUILD_USER || die "Error in src_compile"
		else
			src_compile
		fi
		if [ $ENABLE_TESTS == 1 ]; then
			echo " * src_test ($TEST_USER)"
			if [[ -e /bin/su || -e /usr/bin/su ]]; then
				su -p -c 'src_test' $BUILD_USER || die "Error in src_test"
			else
				src_test
			fi
		fi
		echo " * src_install"
		src_install		|| die "Error in src_install"
		case $MODULE in 
			kernel)
				echo > ${BUILD_PATH}/KERNEL_MODULE ;;
			perl)
				echo > ${BUILD_PATH}/PERL_MODULE ;;
			python)
				echo > ${BUILD_PATH}/PYTHON_MODULE ;;
		esac
	else
		echo " * Bootstrapping"
		if [[ -e /bin/su || -e /usr/bin/su ]]; then
			su -p -c 'bootstrap_default' $BUILD_USER || die "Error bootstrapping"
		else
			bootstrap_default
		fi
	fi
}

installPackage() {
	checkSha1 ${PKG_BLD%/*} $PKG_BLD || die
	(
		set -o pipefail
		BUILD_SEPERATE_DIR=no
		source "${PKG_BLD}"
		
		install -o $BUILD_USER -d "${D}"
	
		if [ $ARCHIVE_INSTALL == 1 ]; then
			cd "${D}"
			if [ -e "${PKG_ARCHIVE_DIR}/${PKG_CAT}/${PKG_NAME}-${PKG_VR}.tar.gz" ]; then
				tar -xf "${PKG_ARCHIVE_DIR}/${PKG_CAT}/${PKG_NAME}-${PKG_VR}.tar.gz"
			else
				# If the archive isn't available, it could be due to an upgrade or just got cleaned up at some point.
				# Just allow it to be rebuilt.
				buildPackage
				cd "${D}"
			fi
		else
			buildPackage
			cd "${D}"
		fi
		if [[ $FETCH_ONLY == 1 ]]; then
			rm -r "${BUILD_PATH}"
			return
		fi
	
		# Archive it up before we do any post modifications.
		archivePackage

		echo " * Removing Libtool Archives (.la)"
		find "${D}"/usr/lib{,exec,64,32} -name \*.la -delete -print 2> /dev/null # 2>&1
	
		if [[ $INSTALL_DOCS == 0 ]]; then
			echo " * Removing Docs"
			rm -r "${D}"/usr/share/doc > /dev/null 2>&1
			rmdir "${D}"/usr/{share,} > /dev/null 2>&1
		fi

		if [[ -e "${D}/usr/share/locale" ]]; then
			echo " * Cleaning locales"
			# Create an Exclude list
			LIST=$(ls -1 "${D}/usr/share/locale")
			for l in $LANG ${LANG%.*} ${LANG%_*}; do
				LIST=$(grep -v $l <<< $LIST)
			done
			for l in $LIST; do
				rm -r "${D}/usr/share/locale/$l"
			done
		fi
		
		stripPackage
	
		# Gather Contents
		# This is sort of an awkward hack...
		# If we're bootstrapping we install binutils twice and gcc 3 times!
		# This causes recording issues. it should be safe to remove them if we're on pass2
		# Otherwise we're going to add to our CONTENTS
		if [[ $MODE == "bootstrap" && ! -z $PKG_FLAGS && $PKG_FLAGS != "pass2" ]]; then
			find . | sed "s,^\.,," | sort >> "${BUILD_PATH}/CONTENTS"
		else
			find . | sed "s,^\.,," | sort > "${BUILD_PATH}/CONTENTS"
		fi
	
		echo " * Merging into ${ROOT}"
		# Install New Files
		local IFS=$'\n'   # Internal Field Sperator
		CONFIG_PROTECTED=false
		for file in $(cat "${BUILD_PATH}/CONTENTS"); do
			# Check for links before anything else
			# to avoid installing a directory when a link
			# was expected.
			if [ -L "${D}/${file}" ]; then
				ln -sf "$(readlink $D/$file)" "/$file" 2> /dev/null && 
					echo " >> $file -> $(readlink ${file})" || 
					echo "!>s $file -> $(readlink $file)"
			# Skip installing already installed dirs.
			# it overrides the user's permission customizations.
			# 2 schools of thought:
			#   1) Under most circumstances, dirs are not managed.
			#   2) Under most circumstances, most dirs are not modified by users.
			# Packages *can* modify dirs they manage and need
			# a certain way in post_install
			elif [[ -d "${D}/${file}" ]]; then
				if [[ ! -e "${file}" ]]; then
					sinstall "${D}/${file}" "${file}" && echo " >> $file" || echo "!>d $file"
				fi
			else
				# Check if a file is to be installed in /etc
				#  If it is, check if the file already exists and
				#  instead copy it to a backup file.
				if [[ $CFG_PROTECT == true && $file == */etc/* && -e "${file}" ]]; then
					# Check if the file is different
					# If the file hasn't change, we can safely ignore it.
					# If the file has changed however, protect it and report it at the end.
					diff "$D/$file" "$file" > /dev/null 2>&1
					if [[ $? != 0 ]]; then
						pfile="${file}.cfg$(date +%s)"
						cp -p "${D}/${file}" "${pfile}" && echo "cp> $file" || echo "!>> $file"
						CONFIG_PROTECTED=true
					else
						echo "a>> $file"
					fi
				# If the file is a library we must use install and not cp as the library maybe in use.
				elif [[ $file == */lib* || -d "${D}/$file" ]]; then
					sinstall "${D}/${file}" "${file}" && echo " >> $file" || echo "!>> $file"
				else
					# if cp fails the file might be busy, but to cp is faster than sinstall due to
					# having to read permissions and then install
					# fallback on sinstall if it fails.
					cp -p "${D}/${file}" "${file}" 2> /dev/null
					if [[ $? == 0 ]]; then
						echo " >> $file"
					else
						sinstall "${D}/${file}" "${file}"
						if [[ $? == 0 ]]; then
							echo "i>> $file"
						else
							echo "!>> $file"
						fi
					fi
				fi
			fi
		done

		# Uninstall Old files
		uninstall $PKG_CAT/$PKG_NAME $PKG_VR $O_VER

		# Create the cache directory
		mkdir -p "${PKG_CACHE}/${PKG_CAT}/${PKG_NAME}/${PKG_VR}"
		# Copy over our build file so we can reference it in uninstalls
		cp "${PKG_DB_DIR}/${PKG_CAT}/${PKG_NAME}/${PKG_VR}.build" "${PKG_CACHE}/${PKG_CAT}/${PKG_NAME}/${PKG_VR}/${PKG_VR}.build"
		getBDeps "${BUILD_PATH}/CONTENTS"
		mv "${BUILD_PATH}/CONTENTS" "${PKG_CACHE}/${PKG_CAT}/${PKG_NAME}/${PKG_VR}/CONTENTS"
		if [ -e ${BUILD_PATH}/KERNEL_MODULE ]; then
			mv ${BUILD_PATH}/KERNEL_MODULE ${PKG_CACHE}/${PKG_CAT}/${PKG_NAME}/${PKG_VR}/KERNEL_MODULE
		elif [ -e ${BUILD_PATH}/PERL_MODULE ]; then
			mv ${BUILD_PATH}/PERL_MODULE ${PKG_CACHE}/${PKG_CAT}/${PKG_NAME}/${PKG_VR}/PERL_MODULE
		elif [ -e ${BUILD_PATH}/PYTHON_MODULE ]; then
			mv ${BUILD_PATH}/PYTHON_MODULE ${PKG_CACHE}/${PKG_CAT}/${PKG_NAME}/${PKG_VR}/PYTHON_MODULE
		fi

		echo " * post_install"
		post_install || die "Error in post_install"

		if [[ $MODULE == kernel ]]; then
			K_VER=$(readlink /usr/src/linux | sed -e 's,.*linux-,,' -e 's,/$,,')
			KERNEL_VER=$(getMajorVer $K_VER).$(getMinorVer $K_VER).$(getMicroVer $K_VER)
			echo -n " * Running depmod (${KERNEL_VER}) .. "
			depmod -a $KERNEL_VER && echo "Ok" || echo "Failed"
		fi
	
		# Check if its a system package
		# Currently we don't use slots within the system set.
		# So the most recent slot should always be used.
		grep "^$PKG_CAT/$PKG_NAME\$" $PKG_DB_DIR/spkg-sets/system > /dev/null 2>&1
		if [ $? != 0 ]; then
			# If it didn't find it as a system package, check if its already in the world set.
			# FIXME: We need a way to check if this is an explicitly requested install.
			#        Or the result of a dependency.
			grep "^$PKG_CAT/$PKG_NAME:$PKG_SLOT\$" $PKG_WORLD > /dev/null 2>&1
			# Only add to world requested packages.
			if [[ $? != 0 && $REQUESTED_LIST =~ (^|[[:space:]])"$LENTRY"($|[[:space:]]) ]]; then
				if [[ -z $OMIT_RECORD_IN_WORLD ]]; then
					echo " * Registering into World."
					echo "$PKG_CAT/$PKG_NAME:$PKG_SLOT" >> $PKG_WORLD
				fi
			fi
		fi

		echo -n "Cleaning up..."
		rm -rf "${BUILD_PATH}" && echo " Done"

		# TODO: automerge if files were not changed.
		if [ $CONFIG_PROTECTED == true ]; then
			echo " * System configuration files were protected!"
			find /etc/ -iname "*.cfg[0-9]*"
		fi
	) || die "Error Building Package."
}

# Arguments: Package (category/name) and version to remove.
#			 if 3rd argument is supplied diff versions and remove the old files.
uninstall() {
	PKG=$1
	PKG_VER=$2
	O_VER=$3
	FLIST=""
	[[ "$O_VER" == "0" ]] && return

	## Compare Slots
	# If slots differ we got the wrong version or the only other installed version is a different slot
	# Either way, we need to ignore it.
	[[ $(getInstalledBySlot $PKG $PKG_SLOT) != *build ]] && return

	if [[ "$O_VER" != "" ]]; then
		# Grep to add the filename before the files as a cheap trick
		# Sort it by 2nd field, add a space to induce a 2nd field for uniq
		# grep again for the installed version and remove the file path 
		# leaving only the installed files that do not exist in the to-be installed version.
		grep / "${PKG_CACHE}/${PKG}/${O_VER}/CONTENTS" "${BUILD_PATH}/CONTENTS" |sort -t: -k2 | sed 's,:,: ,' | uniq -f1 -u | grep $PKG_CACHE | sed 's,.*: ,,' > /tmp/flist-$PKG_NAME
		FLIST=$(tac /tmp/flist-$PKG_NAME)
		rm /tmp/flist-$PKG_NAME
		echo "Uninstalling $PKG-$O_VER"
	else
		FLIST=$(tac ${PKG_CACHE}/${PKG}/${PKG_VER}/CONTENTS)
		echo "Uninstalling $PKG-$PKG_VER"
	fi
	for file in $FLIST; do
		if [ -d "${file}" ]; then
			if [[ $MODE != "bootstrap" ]]; then
				rmdir "${file}" 2> /dev/null && echo " << $file"
			else
				echo "Attempted to remove ${file} While bootstrapping"
			fi
		else
			# Check to see if its a versioned .so file
			# Links can be made around this and the real file might be 
			# removed leaving dead links.
			fd=
			[[ $file == *\.so* ]] && fd=$(checkFileDep $file)

			if [[ -z $fd ]]; then
				if [[ $MODE != "bootstrap" ]]; then
					rm "${file}" 2> /dev/null && echo " << $file" || echo " <! $file"
				else
					echo "Attempted to remove ${file} While bootstrapping"
				fi
			else
				# This could be a link, we should check if it is, and protect
				# the main file. otherwise it'll cause errors until the 
				# dependency is rebuilt.
				echo " @! $file"
				echo $file >> /tmp/preserved
			fi
		fi
    done
	[ "${O_VER}" != "${PKG_VER}" ] && rm -r "${PKG_CACHE}/${PKG}/${O_VER}"
	if [ "$O_VER" == "" ]; then
		grep "^$PKG\$" $PKG_DB_DIR/spkg-sets/system > /dev/null 2>&1
		if [ $? == 0 ]; then
			echo "WARNING: You've removed a package within the system set!"
			echo "         This may cause undesired consequences!"
		else
			grep -E -v "^$PKG\$" $PKG_WORLD > $PKG_WORLD.old
			mv $PKG_WORLD.old $PKG_WORLD
		fi
	fi
}
