#!/bin/bash
####
## SMiLeaf Package Manager
## Author: Stephen Leaf <smileaf@me.com>
## Date started: 2022/06/17
## Licensed under GPLv2+

####
## Comment descriptions & formatting
## Blocks of comments or sections of code will be split up with a ####
## Comments will start with ##
## Code meant to be ignored will start with #
## Tab is set to 4 spaces
## GLOBAL vars will be in CAPS
## local vars will be lower case

## Versions will be concurrent, but this will get updated whenever a large amount of functionality gets added or fixed.
VERSION="20240706"

## Set some bash options
## +h - Disable hashing of commands, allows newer versions of programs to be located immediately used primarily for bootstrap
## -E - Trap ERR codes
## -e - Exit immediately on Error
set +h -Eeo pipefail

## Remove write bit from group/other
umask 022

####
## Trap Errors - Only exit out if we recieve an error code 77.
##               Such as using the function die
trap 'ErrorHandler $?' ERR
trap 'ErrorHandler $?' EXIT

ErrorHandler() {
	local ERR=$1
	rm -f $SPKG_TMP_DIR/.lock
	case $ERR in
		0) ;;
		77)
			exit 77 ;;
		*)
			>&2 echo " $DIALOG_ERROR Unhandled Error $ERR ( got called at $(caller) )"
			;;
	esac
}

## Trap SIGINT so we can properly clean-up and display information.
trap "echo -ne '\nSIGINT caught, '; cleanup; exit 1" SIGINT

## Clean-up all Temp files.
cleanup() {
	local PKG_ONLY=$1
	echo -n "Cleaning up..."

	## For security purposes, validate our BUILD_PATH
	if [[ ! -z $BUILD_PATH ]]; then
		local BP=$(readlink -f $BUILD_PATH)
		if [[ ! -z $BP && $BP != '/' && -e $BUILD_PATH ]]; then
			echo -n " $BUILD_PATH .."
			rm -rf "$BUILD_PATH"
		fi
	fi
	echo " Done"

	## Clean-up our temp files
	## If an error occurs we should remove our lock file.
	if [[ -z $PKG_ONLY ]]; then
		## If we have a PKG_INFORM_LOG add it to our INFORMLOG but only display the current package's.
		if [ -e $PKG_INFORM_LOG ]; then
			(
				[ -e $INFORMLOG ] && echo
				echo " * $LENTRY :"
				cat "$PKG_INFORM_LOG"
			) | tee -a $INFORMLOG
		fi

		[ -e $SPKG_TMP_DIR/.lock ] && rm -f $SPKG_TMP_DIR/.lock
		## For security purposes, validate our SPKG_TMP_DIR
		if [[ ! -z $SPKG_TMP_DIR && -e $SPKG_TMP_DIR ]]; then
			BP=$(readlink -f $SPKG_TMP_DIR)
			if [[ ! -z $BP && $BP != '/' ]]; then
				## If a INFORMLOG exists, but is zero and an install chart does not exist remove the tmp dir.
				if [[ $( [[ -e $INFORMLOG ]] && stat -c '%s' $INFORMLOG || echo 0) == 0 && ! -e $INSTALL_CHART ]]; then
					rm -rf $SPKG_TMP_DIR
				fi
			fi
		fi
	elif [ -e $INFORMLOG ]; then
		cat "$INFORMLOG"
	fi

	# TODO: automerge if files were not changed.
	if [[ $CONFIG_PROTECTED == 'true' ]]; then
		echo " $YELLOW*$NORMAL System configuration files were protected!"
		find $ROOT/etc/ -iname "*.cfg[0-9]*"
	fi
}

## Function to figure out where this script is at so we can reference our libs directory.
## Taken from:
## https://stackoverflow.com/questions/59895/how-do-i-get-the-directory-where-a-bash-script-is-located-from-within-the-script
whereAmI() {
	local SOURCE=${BASH_SOURCE[0]}
	while [ -L "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
		local DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
		SOURCE=$(readlink "$SOURCE")
		[[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
	done
	local DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
	echo $DIR
}

####
## Set Environmental Variables
## Sanitize our paths in case our environment may not be complete.
export PKG_CONFIG_BASE=/lib/pkgconfig:/usr/lib/pkgconfig:/usr/local/lib/pkgconfig
export PKG_CONFIG_PATH=$PKG_CONFIG_BASE
export LD_LIBRARY_BASE=/lib:/usr/lib:/usr/local/lib
export LD_LIBRARY_PATH=$LD_LIBRARY_BASE:/lib64:/usr/lib64:/usr/local/lib64
[[ -e /lib32 || -e /usr/lib32 ]] && LD_LIBRARY_PATH+=:/lib32:/usr/lib32:/usr/local/lib32
[[ -e /libx32 ||  -e /usr/libx32 ]] && LD_LIBRARY_PATH+=:/libx32:/usr/libx32:/usr/local/libx32
export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:$PATH

## Set some colors
export NORMAL=$(tput sgr0)
export RED=$(tput setaf 1)
export GREEN=$(tput setaf 2)
export YELLOW=$(tput setaf 3)
export BLUE=$(tput setaf 4)
export PURPLE=$(tput setaf 5)
export CYAN=$(tput setaf 6)
export LTGRAY=$(tput setaf 7)
export DKGRAY=$(tput setaf 8)
export BRIGHT_RED=$(tput setaf 9)
export BRIGHT_GREEN=$(tput setaf 10)
export BRIGHT_YELLOW=$(tput setaf 11)
export BRIGHT_BLUE=$(tput setaf 12)
export MAGENTA=$(tput setaf 13)
export BRIGHT_CYAN=$(tput setaf 14)
export WHITE=$(tput setaf 15)
export BLACK=$(tput setaf 16)
export DIM=$(tput dim)

## Convience vars for colorizing output.
export IMPORTANT="$BRIGHT_YELLOW!!$NORMAL"
export DIALOG_ERROR="$BRIGHT_RED!!$NORMAL"

## Save for later use.
export PROMPT_COMMAND_SAVE=$PROMPT_COMMAND

####
## Ensure our config file exists
cmd_USE=$USE
if [ -e /etc/spkg.conf ]; then
	source /etc/spkg.conf
else
	>&2 echo " $IMPORTANT no system config file located! We'll use defaults, but a /etc/spkg.conf file should be created!"
fi

####
## Set some defaults if they don't exist.
export MAKEOPTS=${MAKEOPTS:-"-j"$(( $(grep "cpu cores" /proc/cpuinfo|tail -n1|sed 's,.*:,,') + 1))}
export CFLAGS=${CFLAGS:-"-march=native -O2 -pipe"}
export CXXFLAGS=${CXXFLAGS:-"${CFLAGS}"}
export ARCH=${ARCH:-$(uname -m)}
export BUILD_ABI=${BUILD_ABI:-"64 x32 32"}
export USE="$USE $cmd_USE"; unset cmd_USE
export PAGE=${PAGE:-letter}
export ENABLE_TESTS=${ENABLE_TESTS:-0}
export INSTALL_DOCS=${INSTALL_DOCS:-0}
export BUILD_PACKAGE=${BUILD_PACKAGE:-no}
export SILENT_BUILD=${SILENT_BUILD:-no}
export BUILD_USER=${BUILD_USER:-$(whoami)}
export LOCALES=${LOCALES:-$LANGUAGE}; LOCALES=${LOCALES:-$LANG}
if [[ -z $LOCALES ]]; then
	>&2 echo " $DIALOG_ERROR You don't appear to have either LANGUAGE or LANG set!"
	>&2 echo " $DIALOG_ERROR You should set one to a locale of your choice!"
	>&2 echo " $IMPORTANT Defaulting to 'en_US.utf8'"
	export LANG='en_US.utf8'
	export LANGUAGE='en_US'
	export LOCALE='en_US'
fi

####
## Paths
## Install Root (only changed during bootstrapping)
export ROOT=${ROOT:-/}
## Directory all build files are installed into.
export PKG_DB_DIR=${PKG_DB_DIR:-/var/db/spkg}
## Directory where script files are installed into.
export INSTALL_PATH=${INSTALL_PATH:-$(whereAmI)}
## Logfile Directory
export LOGDIR=${LOGDIR:-/var/log/spkg}
## Directory where everything is built and temporary files are stored.
export WORKDIR_BASE=${WORKDIR_BASE:-/var/tmp/spkg}
## Database Directory for local data storage.
export CACHE_DIR=${CACHE_DIR:-/var/lib/spkg}
## Database directory where installed packages are recorded.
export PKG_CACHE=${PKG_CACHE:-$CACHE_DIR/data}
## Storage directory for all downloaded files
export DISTFILES=${DISTFILES:-$CACHE_DIR/files}
## Storage directory for all archive packages.
export PKG_ARCHIVE_DIR=${PKG_ARCHIVE_DIR:-$CACHE_DIR/archive}

####
## Files
## Logfile format
export LOGFILE=${LOGFILE:-%n/%D-%v.log}
## Database file used to store all packages explicitely installed not found within @system
export PKG_WORLD=${PKG_WORLD:-$CACHE_DIR/world}

## Temp files
## Dir used to hold all Temp files so multiple instances maybe ran without conflict.
export SPKG_TMP_DIR=/tmp/spkg-$$
## Check for an unlocked SPKG_TMP_DIR. If we don't find one, create the dir and continue.
## If we do find one, rename it to the current pid.
for check in $(ls -d /tmp/spkg-* 2> /dev/null || true); do
	## If a lock doesn't exist, we're good to reuse the environment or at the very least, keep the house clean.
	if [[ ! -e $check/.lock ]]; then
		mv $check $SPKG_TMP_DIR
		break
	fi
done
unset check
## Create the Dir if it doesn't already exist.
mkdir -p $SPKG_TMP_DIR

## Create our lock file.
touch $SPKG_TMP_DIR/.lock
## Informational File to output at the end.
export INFORMLOG=${INFORMLOG:-$SPKG_TMP_DIR/inform.log}
## Storage file of cached packages being operated on.
export CHART=${CHART:-$SPKG_TMP_DIR/chart}
## Chart of packages in order to be installed/uninstalled.
export INSTALL_CHART=${INSTALL_CHART:-$SPKG_TMP_DIR/install_chart}
## List of files preserved until packages that depend on them can be reinstalled.
export PRESERVED_LOG=${PRESERVED_LOG:-$SPKG_TMP_DIR/preserved}


####
## Set initial program defaults
## 0 = false; 1 = true
export MODE="install"
export FORCE=0
export PRETEND=0
export ARCHIVE_INSTALL=0
export VERBOSE=0
## Current loaded package
export PKG=
## User supplied list from the command line (Parsed)
## Initally set via parse_cmdline and altered via populate_list
## Should not be altered afterwards
export REQUESTED_LIST=
## List of all packages with dependencies to work on.
## All functions should operate off of this variable by default, but accept a list argument.
export PKG_LIST=

## For security reasons this shouldn't ever be used... But exists
IGNORE_SHA1=0

## Set our Debug String
export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

####
## Include our libraries
source "${INSTALL_PATH}/libs/pkg-tools"
source "${INSTALL_PATH}/libs/pkg-utils"
source "${INSTALL_PATH}/libs/builddefaults"
source "${INSTALL_PATH}/libs/utils"
source "${INSTALL_PATH}/libs/build-tools"
source "${INSTALL_PATH}/libs/list-tools"

####
## Parse our command line
parse_cmdline() {
	local opts=($@)
	local a=0
	local o=
	for (( a=0; a<$#; a++ )); do
		local opt=${opts[$a]}
		local val=${opts[$a+1]}
		if [[ $opt == -* ]] ; then
			opt=${opt#-}
			local i
			for i in $(seq 1 ${#opt}); do
				if [[ $opt == -* ]]; then
					o=$opt
				else
					o=${opt:$i-1:1}
				fi
				case "$o" in
					## Modes
					-bootstrap)
						MODE="bootstrap"
						list="@bootstrap"
						let a=++a
						ROOT=$(readlink -f $val) ;;
					-buildbdeps)
						MODE="buildbdeps" ;;
					-buildKernel)
						MODE="buildKernel" ;;
					D|-deepClean)
						MODE="clean" ;;
					-list)
						MODE="list";;
					-preserved)
						MODE="preserved" ;;
					-rebuildKernelMods)
						list+=" @kernelModules"
						FORCE=1
						MODE="rebuildKernelModules" ;;
					-rebuildPythonMods)
						list+=" @pythonModules"
						FORCE=1
						MODE="rebuildPythonModules" ;;
					-rebuildPerlMods)
						list+=" @perlModules"
						FORCE=1
						MODE="rebuildPerlModules" ;;
					-resume)
						MODE="resume" ;;
					s|-search)
						MODE="search" ;;
					-sync)
						MODE="sync" ;;
					u|-uninstall)
						MODE="uninstall" ;;
					U|-update)
						MODE="update" ;;
					-updatesha1)
						HASH_UPDATE=true ;;

					## Configuration options
					-archiveDir)
						let a=++a
						PKG_ARCHIVE_DIR=$val ;;
					A|-installArchive)
						ARCHIVE_INSTALL=1 ;;
					l|-logdir)
						let a=++a
						LOGDIR=$val ;;
					-user)
						let a=++a
						BUILD_USER=$val ;;
					-enable-tests)
						ENABLE_TESTS=1 ;;
					-disable-tests)
						ENABLE_TESTS=0 ;;

					## Flow Control
					f|-force)
						FORCE=1 ;;
					-fetchOnly)
						FETCH_ONLY=1
						FORCE=1 ;;
					p|-pretend)
						PRETEND=1 ;;
					a|-ask)
						ASK=1 ;;
					-verify)
						VERIFY_SIG=1 ;;
					1|-oneshot)
						OMIT_RECORD_IN_WORLD=1 ;;
					Q|-silentBuild)
						SILENT_BUILD=yes ;;
					e|-empty)
						EMPTY_WORLD=1 ;;
					-ignoresha)
						IGNORE_SHA1=1 ;;
					-b1)
						BOOTSTRAP_STAGE+=1 ;;
					-b2)
						BOOTSTRAP_STAGE+=2 ;;
					-b3)
						BOOTSTRAP_STAGE+=3 ;;
					-b4)
						BOOTSTRAP_STAGE+=4 ;;

					## Output & Debug options
					v|-verbose)
						VERBOSE=$(( $VERBOSE + 1 )) ;;
					-debug)
						set -x ;;
					-version)
						echo "spkg by Stephen Leaf version $VERSION"
						exit $? ;;
					h|-help)
						echo "spkg by Stephen Leaf version $VERSION"
						echo "Usage: $0 [Arguments] [package | @set]"
						echo " @set can be any of: @all @installed @system @world"
						echo "  see the $PKG_DB_DIR/spkg-sets dir, for a complete listing."
						echo " Modes (Default: Install)"
						echo    "  --search, -s         Search and list package information."
						echo    "  --uninstall, -u      uninstall package."
						echo    "  --rebuildKernelMods  Rebuilds all Kernel Modules."
						echo    "  --rebuildPythonMods  Rebuilds all Python Modules."
						echo    "  --rebuildPerlMods    Rebuilds all Perl Modules."
						echo    "  --buildKernel        Builds a kernel found at /usr/src/linux"
						echo    "  --deepClean, -D      Compares the charts of the world file and packages installed."
						echo    "  --sync               Syncs the package database via: git pull"
						echo    "  --preserved          Checks for and initiates a rebuild of all packages requiring a rebuild."
						echo    "  --resume             Continues where we left off."
						echo    " Developer Options"
						echo    "  --buildbdeps         Updates .build files setting DEPS/BDEPS/RDEPS."
						echo    "  --updatesha1 [pkg]   Creates or updates sha1sum for the given package."
						echo    "  --bootstrap [path]   Generates a new install at [path]"
						echo    "  --debug              Shows all commands as they are being ran"
						echo    " Optional Arguments"
						echo    "  --silentBuild, -Q    Hides all build output."
						echo    "  --user [username]    Runs all build file commands as [username]"
						echo    "  --oneshot, -1        Omits adding any package requested to the world file."
						echo    "  --empty, -e          Assumes an empty world file"
						echo    "  --update, -U         Finds all updates for all installed packages."
#						echo    "  --newUse -N          Finds all updates affected by a USE change."
						echo    "  --force, -f          Forces install of already installed packages."
						echo    "  --pretend, -p        Shows what will be done, without doing it."
						echo    "  --ask, -a            Like --pretend, but asks before continuing"
						echo    "  --fetchOnly          Fetches all files without installing."
						echo    "  --verify             Verify PGP Signatures if available."
						echo    "  --installArchive, -A Installs package(s) from a preprepared archive."
						echo    "  --archiveDir [dir]   Sets the archive Directory (default: $PKG_ARCHIVE_DIR)"
						echo -n "  --enable-tests       Enable package specific tests."
						[ $ENABLE_TESTS == 1 ] && echo " (Default)" || echo
						echo -n "  --disable-tests      Disables package specific tests."
						[ $ENABLE_TESTS == 0 ] && echo " (Default)" || echo
						echo    "  --logdir, -l [file]  Set the Log Directory (default: $LOGDIR)"
						echo    "  --verbose, -v        Make the output more verbose. (add another for extra)"
						echo    "  --help, -h           This Help Message."
						exit $? ;;
					*)
						die "Unknown option: -$opt ! see --help" ;;
				esac
				if [[ $opt == -* ]]; then
					break
				fi
			done
		else
			break
		fi
	done
	shift $a
	REQUESTED_LIST=${list:-"$@"}
}

parse_cmdline $@

####
## Ensure we can write to required directories
if [[ $MODE != 'search' && $MODE != 'list' && $MODE != 'update' ]]; then
	if [ ! -d $PKG_ARCHIVE_DIR ];
		then mkdir -p "$PKG_ARCHIVE_DIR" || die "Failed to create: PKG_ARCHIVE_DIR: $PKG_ARCHIVE_DIR"; fi
	test -w $PKG_ARCHIVE_DIR || die "Cannot write to PKG_ARCHIVE_DIR: $PKG_ARCHIVE_DIR"

	if [ ! -d $PKG_CACHE ];
		then mkdir -p "$PKG_CACHE" || die "Failed to create: PKG_CACHE: $PKG_CACHE"; fi
	test -w $PKG_CACHE || die "Cannot write to PKG_CACHE: $PKG_CACHE"
	if [[ $(stat -c '%U' "$PKG_CACHE") != $BUILD_USER ]]; then
		>&2 echo -n " $IMPORTANT Fixing Permissions in $PKG_CACHE "
		chown -R $BUILD_USER $PKG_CACHE && echo -n '.'
		find $PKG_CACHE -type d -exec chmod 770 {} \; && echo -n '.'
		find $PKG_CACHE -type f -exec chmod 660 {} \; && echo -n '.'
		>&2 echo " done"
	fi
	if [[ ! -e "$PKG_CACHE/.cache/pip" || $(stat -c '%U' "$PKG_CACHE/.cache/pip") != $BUILD_USER ]]; then
		mkdir -p $PKG_CACHE/.cache/pip
		>&2 echo -n " $IMPORTANT Fixing Permissions in $PKG_CACHE/.cache/pip "
		chown -R $BUILD_USER $PKG_CACHE/.cache/pip && echo -n '.'
		>&2 echo " done"
	fi

	if [ ! -d $DISTFILES ];
		then mkdir -p "$DISTFILES" || die "Failed to create: DISTFILES: $DISTFILES"; fi
	test -w $DISTFILES || die "Cannot write to DISTFILES: $DISTFILES"

	if [ ! -d $LOGDIR ];
		then mkdir -p "$LOGDIR" || die "Failed to create: LOGDIR: $LOGDIR"; fi
	test -w $LOGDIR || die "Cannot write to LOGDIR: $LOGDIR"

	if [ ! -d $WORKDIR_BASE ];
		then mkdir -p "$WORKDIR_BASE" || die "Failed to create: WORKDIR_BASE: $WORKDIR_BASE"; fi
	test -w $WORKDIR_BASE || die "Cannot write to WORKDIR_BASE: $WORKDIR_BASE"

	if [ ! -d $PKG_DB_DIR ]
		then mkdir -p "$PKG_DB_DIR" || die "Failed to create: PKG_DB_DIR: $PKG_DB_DIR"; fi
	test -w $PKG_DB_DIR || die "Cannot write to PKG_DB_DIR: $PKG_DB_DIR"

	[[ -e $INFORMLOG ]] && rm $INFORMLOG
	touch $INFORMLOG
	chmod 1777 $INFORMLOG

	if ! test -w /var/tmp || ! test -w /tmp; then
		>&2 echo -n " $IMPORTANT Fixing permissions of tmp dirs .. "
		chmod 1777 /{,var/}tmp && >&2 echo "done" || die "failed!"
	fi

	## Populate our list with fully qualified entries so long as we're not searching.
	## We wouldn't want to destroy our search terms.
	populate_list
fi

## Calculate Binary Dependencies and update the DEPS var within the build file.
if [[ $MODE == "buildbdeps" ]]; then
	echo -n "Finding Binary Dependencies: "
	[ $VERBOSE == 0 ] && echo
	for l in $PKG_LIST; do
		p=$(getCategory $l)/$(getName $l)
		buildBDeps $p && [ $VERBOSE == 0 ] && echo -n "."
	done && echo
fi

## Update the sha1sum of all files for the given package.
## Using the set @all while useful is not recommended given the size of the repository.
if [[ $MODE != 'search' && $HASH_UPDATE ]]; then
	C=($PKG_LIST)
	echo " * Updating sha1 of ${#C[*]} packages"
	source "${INSTALL_PATH}/libs/updatesha1"
	for p in $PKG_LIST; do
		PKG=$(DB-getPkg $p)
		if [[ $PKG == "" ]]; then
			echo -n "!"
			echo "$p" >> /tmp/hashfail
			continue
		else
			[[ $VERBOSE -gt 0 ]] && echo -n "$PKG_CAT/$PKG_NAME ["
			if updatesha1 $(getCategory $PKG)/$(getName $PKG); then
				[[ $VERBOSE -gt 0 ]] && echo " ]" || echo -n '.'
			fi
		fi
	done
	echo
	if [ -e /tmp/hashfail ]; then
		cat /tmp/hashfail
		rm /tmp/hashfail
	fi
	exit 0
fi

####
## Sync our database to the repository.
## In the future we may want to seperate our database from the package manager
## Also can support such syncing methods as rsync.
if [[ $MODE == "sync" ]]; then
	# If git is not installed, inform the user to install it.
	if [[ ! -e /usr/bin/git ]]; then
		echo " $IMPORTANT Git is not installed!"
		echo "    Please install it via: spkg git; Or download a copy from: https://github.com/smileaf419/spkg"
		exit 1
	fi
	echo " * Syncing database... "
	cd $PKG_DB_DIR
	git pull && echo " * Sync Complete!" || die " $DIALOG_ERROR Sync Failed!"
fi

####
## Check for updates against whats installed and build our list.
## Take everything installed and find upgrades for it, respecting explicitly installed slots within world.
if [[ $MODE == "update" ]]; then
	timestart=$(date "+%s.%N")
	echo -n " * Checking for updates"

	## a REQUESTED_LIST is not set as none of this has been explicitely requested.
	## instead set a PKG_LIST
	list=$(expandSets "@installed")
	PKG_LIST=
#	spinner=('|' '|' '/' '/' '-' '-' '\\' '\\')
#	s=0
	[ -e $CHART ] && rm -f $CHART
	for p in $list; do
#		echo -ne "\r * Checking for updates ${spinner[$s]}"
		echo -n '.'

		PKG_CAT=$(getCategory $p)
		PKG_NAME=$(getName $p)
		## This may return multiple packages if multiple slots are installed.
		WPKG=$(getPkgFromWorld $PKG_CAT/$PKG_NAME)
		if [ ! -z $WPKG ]; then
			for w in $WPKG; do
				DB-getPkg $w | getLatest >> $CHART
			done
		else
			PKG=$(Installed-getPkg $PKG_CAT/$PKG_NAME)
			IPK_VER=$(getVerRev $PKG)
			for p in $PKG; do
				PKG_SLOT=$(getSlot $p)
				PKG_VER=0
				PKG_REV=0
				LPKG=$(DB-getPkg $(getPKG) | getLatest)
				version_gt $(getVerRev $LPKG) $IPK_VER && echo $LPKG >> $CHART
			done
		fi
#		s=$(( $s + 1 ))
#		[[ $s -gt ${#spinner} ]] && s=0
	done
	if [[ -e /usr/bin/bc ]]; then
		>&2 printf " done (%.3f s)\n" $( echo $(date "+%s.%N") - $timestart | bc )
	else
		>&2 echo " done"
	fi
	[[ -e $CHART ]] && PKG_LIST=$(cat $CHART)
	echo
#	[ $VERBOSE -ge 1 ] && echo list: $list

## Continues off the previous list
elif [[ $MODE == "resume" ]]; then
#	[[ $SPKG_TMP_DIR == /tmp/spkg-$$ ]] && die " $DIALOG_ERROR Nothing to resume"
	## Reset paths.
	export INFORMLOG=$SPKG_TMP_DIR/inform.log
	export CHART=$SPKG_TMP_DIR/chart
	export INSTALL_CHART=$SPKG_TMP_DIR/install_chart
	export PRESERVED_LOG=$SPKG_TMP_DIR/preserved
	REQUESTED_LIST=$(cat $SPKG_TMP_DIR/requested.list)

	if [ ! -e $INSTALL_CHART ]; then
		die " $DIALOG_ERROR Error Cannot resume no list was found."
	fi
	echo " * Resuming..."

	cp "$INSTALL_CHART" "$CHART"

## Build the installed kernel, will automatically rebuild all kernel modules afterwards.
elif [[ $MODE == "buildKernel" ]]; then
	buildKernel
	REQUESTED_LIST="@kernelModules"
	FORCE=1
	populate_list

## Attempts to clean a system of all unessential packages.
## This is done by building 2 lists:
##  First we calculate a full list based on our @system and @world sets
##  Aftwards we gather a list of installed packages
## Finally compare the 2 lists and filter out the uniq entries.
## The entries which only exist in 1 list, will be removed.
##  In theory These entries exist installed, but not in the full list of required packages.
##  Its possible however that it got installed, then a package is updated and the uniq entry is a new package.
## FIXME: We should itterate over the list to ensure the uniq pkgs are installed,
##        if not, error out and tell the user to run: spkg @system @world
elif [[ $MODE == "clean" ]]; then
#	ENABLE_TESTS=1
	echo " * Deep Cleaning (Experimental!)"
	echo " * Gathering a list of @system and @world"
	REQUESTED_LIST="@system @world"
	populate_list
	getFullPkgList $(cat $CHART) > /dev/null || die " ! Error Calculating dependencies, ensure you've updated your system first: spkg -U"
	mv $CHART $WORKDIR_BASE/sysworldset
	echo " * Getting a list of installed packages."
	REQUESTED_LIST="@installed"
	populate_list
	getFullPkgList $(cat $CHART) > /dev/null|| die " ! Error Calculating dependencies, ensure you've updated your system first: spkg -U"
	echo " * Gathering a list of targets to remove"
	REQUESTED_LIST=$(cat $CHART $WORKDIR_BASE/sysworldset | sort | uniq -u)
	## Clean-up
#	rm $WORKDIR_BASE/sysworldset
	exit 0
	# { output=$(command 2>&1 1>&3-) ;} 3>&1

## Bootstrap a new system to the given directory.
elif [[ $MODE == "bootstrap" ]]; then
	source "${INSTALL_PATH}/libs/bootstrap"
fi

## Search
if [[ $MODE == "search" || $MODE == "list" ]]; then
	for p in $REQUESTED_LIST; do
		## Parse the Entry first and grab just the PKG_CAT/PKG_NAME
		if [[ ${p:0:1} == '@' ]]; then
			PKG_CAT=''
			PKG_NAME=''
			list=$(expandSets $p)
		else
			PKG_CAT=*
			PKG_NAME=${p#*/}
			[[ $p == */* ]] && PKG_CAT=${p%/*} || PKG_NAME="*$PKG_NAME"
			list=$(find $PKG_DB_DIR -maxdepth 2 -mindepth 2 -iwholename $PKG_DB_DIR/${PKG_CAT:-*}/${PKG_NAME:-*}\* | sed "s,$PKG_DB_DIR\(/*\)\?,,")
		fi

		[[ $PKG_NAME == *\* ]] && PKG_NAME=${PKG_NAME%\*}
		[[ $PKG_NAME == \*\** ]] && PKG_NAME=${PKG_NAME/\*\*/\*}
		echo "${MODE^}ing: $p (${PKG_CAT:-*}/$PKG_NAME*)"
		[[ $MODE == 'list' ]] && printf "| %17s/%-23s | %-15s | %12s | %31s | %8s | %s\n" "Category" "Name" "Version" "Archs" "Date Added" "Age" "Installed"
		if [[ $list == '' ]]; then
			echo " $DIALOG_ERROR $p not found!"
			continue
		fi
		for r in $list; do
			## Parse the entry again to get more information that was not supplied in the search.
			PKG=$(DB-getPkg $r | getLatest)
			[[ -z $PKG ]] && >&2 echo " $DIALOG_ERROR No available builds available for $r" && continue
			## Its possible for spkg-sets and spkg-tools to get returned.. filter them out.
			[[ $r == spkg-*/* ]] && continue

			PKG_BLD=$(getBldFile $PKG)
			PKG_CAT=$(getCategory $PKG)
			PKG_NAME=$(getName $PKG)
			checkSha1 ${PKG_BLD%/*} $PKG_BLD || die
			if [[ $MODE == 'search' ]]; then
				echo " * ${PKG_CAT}/${PKG_NAME}"
				printf " %12s:" "Available"
				ipkg=$(Installed-getPkg $PKG_CAT/$PKG_NAME | getLatest)
				[[ -z $ipkg ]] && ipkg=0
				ipvr=$(getVerRev $ipkg)
				for a in $(DB-getPkg $PKG_CAT/$PKG_NAME); do
					pvr=$(getVerRev $a)
					if [[ $ipvr == $pvr ]]; then
						echo -n $GREEN
					elif version_lt $pvr $(getVerRev $PKG); then
						echo -n $BLUE
					elif pkgArch $a; then
						echo -n $RED
					else
						echo -n $NORMAL
					fi
					echo -n " $pvr"
					if pkgArch $a; then
						echo -n "~"
					fi
				done; echo $NORMAL
				printf " %12s:" "Installed"
				ipkg=$(Installed-getPkg $PKG_CAT/$PKG_NAME)
				[[ $ipkg == '' ]] && echo -n ' none'
				for i in $ipkg; do
					echo -n " $(getVerRev $i)"
					slot=$(getSlot $i)
					[[ $slot != 0 ]] && echo -n ":$slot"
				done; echo

				## Run this in a subshell to avoid tainting the environment.
				(
					source "${PKG_BLD}"
					printf " %12s: %s\n" "Homepage" "$HOMEPAGE"
					printf " %12s: %s\n" "Description" "$DESCRIPTION"
					[[ -z $LICENSE ]] && LICENSE="Unknown"
					printf " %12s: %s\n" "License" "$LICENSE"
					[[ ! -z $IUSE ]] &&
					printf " %12s: %s\n" "USE" "$IUSE"
					printf " %12s: %s" "Dependencies" "$DEPS"
					[[ ! -z "$UDEPS" ]] && echo -n " [U:${UDEPS}]"
					[[ ! -z "$RDEPS" ]] && echo -n " [R:${RDEPS}]"
					[[ ! -z "$BDEPS" ]] && echo -n " [B:${BDEPS}]"
					[[ ! -z "$CDEPS" ]] && echo -n " [C:${CDEPS}]"
					echo
				)
				echo

			## Output a listing of whats found in the results
			else
				## Save the current timestamp
				curDate=$(date +%s)
				for a in $(DB-getPkg $PKG_CAT/$PKG_NAME); do
					PKG_VR=$(getVerRev $a)
					fileDate=$(cd $PKG_DB_DIR; git log --format=%ad --date unix "$PKG_DB_DIR/$PKG_CAT/$PKG_NAME/$PKG_VR.build" | head -n1 || true)
					## If the file is not added to git yet, don't error out.
					[[ -z $fileDate ]] && fileDate=$curDate
					age=$(( $curDate - $fileDate ))
					installed=$(
						set -e
						PKG_SLOT=$(getSlot $a)
						ipkg=$(Installed-getPkg $(getPKG))
						[[ $ipkg == '' ]] && echo -n ' none'
						for i in $ipkg; do
							echo -n " $(getVerRev $i)"
						done; echo
					)

					if pkgArch $a && [[ $age -gt $(( 14 * 86400 )) ]]; then
						if [[ $age -gt $(( 30 * 86400 )) ]]; then
							echo -n $RED
						else
							echo -n $YELLOW
						fi
					elif [[ $installed == " $PKG_VR" ]]; then
						echo -n $GREEN
					elif version_lt $PKG_VR $(getVerRev $PKG) && [[ $installed != ' none' ]]; then
						echo -n $BLUE
					else
						echo -n $NORMAL
					fi
					printf "| %17s/%-23s | %-15s | %12s | %31s | %3d days | %s\n" $PKG_CAT $PKG_NAME $PKG_VR $(getArchs $a) "$(date --date="@$fileDate")" $(( $age / 86400 )) $installed
				done
				echo -n $NORMAL
			fi
		done
	done
	exit 0
elif [[ $MODE == "preserved" ]]; then
	preservedRebuild && buildList || exit 0
else
	buildList
fi

# Can use this to find applications/init scripts to restart following an update.
# lsof / | awk '/deleted/ && !/tmp/{print $9}' | sort -u
