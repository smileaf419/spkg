#!/bin/bash
# SMiLeaf Package Manager
# Author Stephen Leaf <smileaf@me.com>
# Date started: 2022/06/17

VERSION="20230315"

set +h -E
umask 022
trap '[ "$?" -ne 77 ] || exit 77' ERR

if [ -e /etc/spkg.conf ]; then
	source /etc/spkg.conf
elif [[ $(test -w /etc/ ) ]]; then
	echo " * no system config file located! We'll use defaults, but a /etc/spkg.conf file should be created!"
else
	echo "Cannot write /etc/spkg.conf file!"
	exit 1
fi

# Set some defaults if they don't exist.
MAKEOPTS=${MAKEOPTS:-"-j"$(( $(grep "cpu cores" /proc/cpuinfo|tail -n1|sed 's,.*:,,') + 1))}
CFLAGS=${CFLAGS:-"-march=native -O2 -pipe"}
CXXFLAGS=${CXXFLAGS:-"${CFLAGS}"}
USE=${USE:-}
PAGE=${PAGE:-letter}
ENABLE_TEST=${ENABLE_TESTS:-0}
INSTALL_DOCS=${INSTALL_DOCS:-0}
BUILD_PACKAGE=${BUILD_PACKAGE:-no}
SILENT_BUILD=${SILENT_BUILD:-no}
BUILD_USER=${BUILD_USER:-$(whoami)}
TEST_USER=${TEST_USER:-$(whoami)}
# Paths
ROOT=${ROOT:-/}
PKG_DB_DIR=${PKG_DB_DIR:-/var/db/spkg}
INSTALL_PATH=${INSTALL_PATH:-$(whereAmI)}
LOGDIR=${LOGDIR:-/var/log/spkg}
LOGFILE=${LOGFILE:-pkg-$(date +%Y%m%d).log}
WORKDIR_BASE=${WORKDIR_BASE:-/var/tmp/spkg}
CACHE_DIR=${CACHE_DIR:-/var/lib/spkg}
PKG_CACHE=${PKG_CACHE:-${CACHE_DIR}/data}
DISTFILES=${DISTFILES:-${CACHE_DIR}/files}
PKG_WORLD=${PKG_WORLD:-${CACHE_DIR}/world}
PKG_ARCHIVE_DIR=${PKG_ARCHIVE_DIR:-${CACHE_DIR}/archive}

export PKG_DB_DIR PKG_CACHE DISTFILES WORKDIR_BASE ROOT MAKEOPTS
export CFLAGS CXXFLAGS PAGE USE
export ENABLE_TESTS INSTALL_DOCS BUILD_USER SILENT_BUILD

# 0: Install; 1: Uninstall; 2: Search; 3: Update
MODE="install"
FORCE=0
PRETEND=0
ARCHIVE_INSTALL=0
VERBOSE=0

# For security reasons this shouldn't ever be used... But exists
IGNORE_SHA1=0

#set -e
trap '[ "$?" -ne 0 ] && exit $?' EXIT

source "${INSTALL_PATH}/libs/helpermethods"
source "${INSTALL_PATH}/libs/builddefaults"
source "${INSTALL_PATH}/libs/spkg-include"
source "${INSTALL_PATH}/libs/utils"
source "${INSTALL_PATH}/libs/build-tools"
source "${INSTALL_PATH}/libs/list-tools"

if [ ! -d $PKG_ARCHIVE_DIR ]; 
	then mkdir -p "$PKG_ARCHIVE_DIR" || die "Failed to create: PKG_ARCHIVE_DIR: $PKG_ARCHIVE_DIR"; fi
test -w $PKG_ARCHIVE_DIR || die "Cannot write to PKG_ARCHIVE_DIR: $PKG_ARCHIVE_DIR"
if [ ! -d $PKG_CACHE ]; 
	then mkdir -p "$PKG_CACHE" || die "Failed to create: PKG_CACHE: $PKG_CACHE"; fi
test -w $PKG_CACHE || die "Cannot write to PKG_CACHE: $PKG_CACHE"
if [ ! -d $DISTFILES ];
	then mkdir -p "$DISTFILES" || die "Failed to create: DISTFILES: $DISTFILES"; fi
test -w $DISTFILES || die "Cannot write to PKG_ARCHIVE_DIR: $DISTFILES"
if [ ! -d $LOGDIR ];
	then mkdir -p "$LOGDIR" || die "Failed to create: LOGDIR: $LOGDIR"; fi
test -w $LOGDIR || die "Cannot write to PKG_ARCHIVE_DIR: $LOGDIR"
if [ ! -d $WORKDIR_BASE ];
	then mkdir -p "$WORKDIR_BASE" || die "Failed to create: WORKDIR_BASE: $WORKDIR_BASE"; fi
test -w $WORKDIR_BASE || die "Cannot write to PKG_ARCHIVE_DIR: $WORKDIR_BASE"
if [ ! -d $PKG_DB_DIR ]
	then mkdir -p "$PKG_DB_DIR" || die "Failed to create: PKG_DB_DIR: $PKG_DB_DIR"; fi
test -w $PKG_DB_DIR || die "Cannot write to PKG_ARCHIVE_DIR: $PKG_DB_DIR"

parse_cmdline() {
	# Referenced mozilla-launcher script.
	while [[ $# -ne 0 ]] ; do
		if [[ $1 == -* ]] ; then
			case "${1#-}" in
				v|-verbose)
					VERBOSE=$(( $VERBOSE + 1 ))
					shift 1 ;;
				-bootstrap)
					MODE="bootstrap"
					ROOT=$(readlink -f $2)
					shift 2 ;;
				-ignoresha)
					IGNORE_SHA1=1
					shift 1 ;;
				l|-logdir)
					LOGDIR=$2
					shift 2 ;;
				u|-uninstall)
					MODE="uninstall"
					shift 1 ;;
				s|-search)
					MODE="search"
					shift 1 ;;
				U|-update)
					MODE="update"
					shift 1 ;;
				D|-deepClean)
					MODE="clean"
					shift 1 ;;
				f|-force)
					FORCE=1
					shift 1 ;;
				-fetchOnly)
					FETCH_ONLY=1
					shift 1 ;;
				p|-pretend)
					PRETEND=1
					shift 1 ;;
				A|-installArchive)
					ARCHIVE_INSTALL="1"
					shift 1 ;;
				-archiveDir)
					PKG_ARCHIVE_DIR=$2
					shift 2 ;;
				-enable-tests)
					ENABLE_TESTS=1
					shift 1 ;;
				-disable-tests)
					ENABLE_TESTS=0
					shift 1 ;;
				-buildbdeps)
					MODE="buildbdeps"
					shift 1 ;;
				-updatesha1)
					HASH_UPDATE=true
					shift 1 ;;
				-rebuildKernelMods)
					MODE="rebuildKernelModules"
					shift 1 ;;
				-rebuildPythonMods)
					MODE="rebuildPythonModules"
					shift 1 ;;
				-rebuildPerlMods)
					MODE="rebuildPerlModules"
					shift 1 ;;
				-buildKernel)
					MODE="buildKernel"
					shift 1 ;;
				-user)
					BUILD_USER=$2
					shift 2 ;;
				-testUsr)
					TEST_USER=$2
					shift 2 ;;
				-verify)
					VERIFY_SIG=1
					shift 1 ;;
				1|-oneshot)
					OMIT_RECORD_IN_WORLD=1
					shift 1 ;;
				Q|-silentBuild)
					SILENT_BUILD=yes
					shift 1 ;;
				e|-empty)
					EMPTY_WORLD=1
					shift 1 ;;
				-version)
					echo "spkg by Stephen Leaf version $VERSION"
					exit $? ;;					
				h|-help)
					echo "spkg by Stephen Leaf version $VERSION"
					echo "Usage: $0 [Arguments] [package]"
					echo " Modes (Default: Install)"
					echo    "  --search, -s         Search and list package information."
					echo    "  --uninstall, -u      uninstall package."
					echo    "  --rebuildKernelMods  Rebuilds all Kernel Modules."
					echo    "  --rebuildPythonMods  Rebuilds all Python Modules."
					echo    "  --rebuildPerlMods    Rebuilds all Perl Modules."
					echo    "  --buildKernel        Builds a new kernel"
					echo    "  --deepClean, -D      Compares the charts of the world file and packages installed."
					echo    " Developer Options"
					echo    "  --buildbdeps         Updates .build files setting DEPS/BDEPS/RDEPS."
					echo    "  --updatesha1         Creates or updates sha1sum for all packages."
					echo    "  --bootstrap [path]   Generates a new install at [path]"
					echo    " Optional Arguments"
					echo    "  --silentBuild, -Q    Hides all build output."
					echo    "  --user [username]    Runs all build file commands as [username]"
					echo    "  --testUsr [username] Runs all build file test commands as [username]"
					echo    "  --oneshot, -1        Omits adding any package requested to the world file."
					echo    "  --empty, -e          Assumes an empty world file"
					echo    "  --update, -U         Finds all updates for all installed packages."
					echo    "  --force, -f          Forces install of already installed packages."
					echo    "  --pretend, -p        Shows what will be done, without doing it."
					echo    "  --fetchOnly          Fetches all files without installing."
					echo    "  --verify             Verify PGP Signatures if available."
					echo    "  --installArchive, -A Installs package(s) from a preprepared archive."
					echo    "  --archiveDir [dir]   Sets the archive Directory (default: $PKG_ARCHIVE_DIR)"
					echo -n "  --enable-tests       Enable package specific tests."
					[ $ENABLE_TESTS == 1 ] && echo " (Default)" || echo
					echo -n "  --disable-tests      Disables package specific tests."
					[ $ENABLE_TESTS == 0 ] && echo " (Default)" || echo
					echo    "  --logdir, -l [file]  Set the Log Directory (default: $LOGDIR)"
					echo    "  --verbose, -v        Make the output more verbose. (add another for extra)"
					echo    "  --help, -h           This Help Message."
					exit $? ;;
				*)
					echo "Unknown option!"
					exit 1 ;;
			esac
		else
			list=$@
			break
		fi
	done
}

populate_list() {
	tlist=
	for p in $list; do
		# This assumes all entries within a set are fully-qualified.
		if [ ${p:0:1} == "@" ]; then
			echo " * Found ${p#@} Set .. Expanding"
			if [[ ${p#@} == "world" ]]; then
				tlist+=" $(grep -v -E "^#" $PKG_WORLD|tr '\n' ' ')"
			elif [ -e $PKG_DB_DIR/spkg-sets/${p#@} ]; then
				tlist+=" $(grep -v -E "^#" $PKG_DB_DIR/spkg-sets/${p#@}|tr '\n' ' ')"
			else
				echo " * Unknown set: ${p#@}"
			fi
		else
			setupENV $p
			if [[ "$PKG_CAT/$PKG_NAME" == "/" ]]; then
				tlist+=" $p"
			elif [ ${p:0:1} == "=" ]; then
				tlist+=" =$PKG_CAT/$PKG_NAME-$PKG_VR"
				[[ $PKG_FLAGS != "" ]] && tlist+="[$PKG_FLAGS]"
			else
				tlist+=" $PKG_CAT/$PKG_NAME"
			fi
		fi
	done
	export REQUESTED_LIST=${tlist# }
	list=${tlist# }
}

parse_cmdline $@

mkdir -p "${LOGDIR}" || die "Failed to mkdir ${LOGDIR}"
test -w "${LOGDIR}/" || die "LOGDIR: ${LOGDIR} not writable"

if [[ $MODE == "bootstrap" ]]; then
	PKG_CACHE="${ROOT}/${PKG_CACHE}"
	PKG_WORLD="${ROOT}/${PKG_WORLD}"
	mkdir -p $PKG_CACHE
	touch $PKG_WORLD
	chown -R $BUILD_USER $PKG_CACHE $PKG_WORLD
	list="@bootstrap"
	echo " * Bootstrapping .. This will take a while.."
fi

populate_list

if [[ $MODE == "update" ]]; then
	echo " * Checking for updates"
	for f in $(find $PKG_CACHE -name CONTENTS | sed -e 's,/CONTENTS,,' -e "s,$PKG_CACHE/,,"); do
		[ $VERBOSE -ge 2 ] && echo -n "$f : "
		setupENV ${f%/*}
		VER=${f##*/}
		[ $VERBOSE -ge 2 ] && echo "Checking $PKG_NAME - $PKG_VR > $VER"
		if version_gt $PKG_VR $VER ; then
			list+=" $PKG_CAT/$PKG_NAME"
			[[ $PKG_FLAGS != "" ]] && list+="[$PKG_FLAGS]"
			echo $PKG_NAME :: $PKG_VR
		fi
	done	
	# Has the potential to produce multiple entries for the same program.
	# This filters out them out so we don't install them twice.
	list=$(echo $list | tr ' ' '\n' | sort | uniq | tr '\n' ' ')
	[ $VERBOSE -ge 1 ] && echo list: $list


elif [[ $MODE == "buildbdeps" ]]; then
	for p in $list; do
		buildBDeps $p
	done
fi
if [[ $HASH_UPDATE ]]; then
	echo " * Updating SHA1 hashes."
	source "${INSTALL_PATH}/libs/updateallsha1.sh"
	for p in $list; do
		p=$(echo ${p#=} | sed -e 's,-[0-9].*$,,')
		updatesha1 $p
	done
	exit 0
fi
if [[ $MODE == "buildKernel" ]]; then
	buildKernel
	MODE="rebuildKernelModules"
fi
if [[ $MODE == "rebuildKernelModules" ]]; then
	list=$(rebuildModules kernel)
	REQUESTED_LIST=$list
	FORCE=1
fi
if [[ $MODE == "rebuildPythonModules" ]]; then
	list=$(rebuildModules python)
	echo $list
	REQUESTED_LIST=$list
	FORCE=1
fi
if [[ $MODE == "rebuildPerlModules" ]]; then
	list=$(rebuildModules perl)
	REQUESTED_LIST=$list
	FORCE=1
fi
if [[ $MODE == "clean" ]]; then
	ENABLE_TESTS=1
	echo " * Deep Cleaning"
	echo " * Gathering a list of @system and @world"
	list=$(expandSets "@system @world")
	echo " * Calculating Package List"
	getFullPkgList $list
	echo " * Getting a list of installed packages."
	find $PKG_CACHE -mindepth 2 -maxdepth 2 -type d | sed "s,$PKG_CACHE/,," > /tmp/installedPkgs
	echo " * Gathering a list of targets to remove"
	list=$(cat /tmp/chart /tmp/installedPkgs | sort | uniq -u)
	REQUESTED_LIST=$list
	MODE="uninstall"
	
	# { output=$(command 2>&1 1>&3-) ;} 3>&1
fi

if [[ $MODE == "bootstrap" ]]; then
	export HOST_TGT=$(uname -m)-leaf-linux-gnu
	export PATH="$ROOT/tools/bin:/bin:/sbin:/usr/bin:/usr/sbin"
	# Make a LSB compliant /
	mkdir -pv $ROOT/{bin,boot,dev,etc/{opt,sysconfig},lib{,32,64},media/{cdrom},mnt,opt,proc,run,sbin,srv,sys,usr,var,home,root}
	mkdir -pv $ROOT/lib/firmware
	# Create /usr hierachy
	mkdir -pv $ROOT/usr/{bin,include,lib{,32,64},libexec,local,sbin,share,src}
	# Create /usr/local hierachy
	mkdir -pv $ROOT/usr/local/{bin,etc,games,include,lib{,32,64},man,sbin,share,src}
	mkdir -pv $ROOT/usr/{,local/}share/{color,dict,doc,info,locale,man}
	mkdir -pv $ROOT/usr/{,local/}share/{misc,terminfo,zoneinfo}
	mkdir -pv $ROOT/usr/{,local/}share/man/man{1..8}
	mkdir -pv $ROOT/var/{cache,local,log,mail,opt,spool}
	# Create the /var Heirachy
	mkdir -pv $ROOT/var/{cache,db,lib,lock,log,opt,spool}
	# Create dirs for spkg
	mkdir -pv $ROOT/{$PKG_DB_DIR,$DISTFILES,$PKG_ARCHIVE_DIR,$LOGDIR,$WORKDIR_BASE,$PKG_CACHE}
	touch $ROOT/$PKG_WORLD
	# Fix permissions for our building user, we'll need to fully fix the permissions later.
	chown -R $BUILD_USER $ROOT
	# These files will be needed later.
	cp -v /etc/ld.so.conf /etc/resolv.conf $ROOT/etc
	installList $list

	# Fix CONTENTS file, filter out our $ROOT
	find $ROOT/$PKG_CACHE -name CONTENTS -exec sed -i "s,$ROOT,," {} \;

	chown -R root:root $ROOT
	ln -sfv /run $ROOT/var/run
	ln -sfv /run/lock $ROOT/var/lock
	[[ ! -e /root ]] && install -dv -m 0750 $ROOT/root || chmod -v 0750 $ROOT/root
	[[ ! -e $ROOT/tmp ]] && install -dv -m 1777 $ROOT/tmp || chmod -v 1777 $ROOT/tmp
	ln -sv /proc/self/mounts $ROOT/etc/mtab

	cat > $ROOT/etc/hosts << EOF
127.0.0.1  localhost $(hostname)
::1        localhost
EOF

	cat > $ROOT/etc/passwd << "EOF"
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/dev/null:/usr/false
daemon:x:6:6:Daemon User:/dev/null:/bin/false
messagebus:x:18:18:D-Bus Message Daemon User:/run/dbus:/bin/false
uuidd:x:80:80:UUID Generation Daemon User:/dev/null:/bin/false
nobody:x:65534:65534:Unprivileged User:/dev/null:/bin/false
spkg:x:250:250::/var/tmp/spkg/:/bin/bash
EOF

	cat > $ROOT/etc/group << "EOF"
root:x:0:
bin:x:1:daemon
sys:x:2:
kmem:x:3:
tape:x:4:
tty:x:5:
daemon:x:6:
floppy:x:7:
disk:x:8:
lp:x:9:
dialout:x:10:
audio:x:11:
video:x:12:
utmp:x:13:
usb:x:14:
cdrom:x:15:
adm:x:16:
messagebus:x:18:
input:x:24:
mail:x:34:
kvm:x:61:
uuidd:x:80:
wheel:x:97:
spkg:x:250:
users:x:999:
nogroup:x:65534:
EOF
	cat > $ROOT/chroot.sh << "EOF"
#!/bin/bash
[[ -z $1 ]] && LFS=${0%/*} || LFS=$1
mount -v --bind /dev $LFS/dev
mount -v --bind /dev/pts $LFS/dev/pts
mount -vt proc proc $LFS/proc
mount -vt sysfs sysfs $LFS/sys
mount -vt tmpfs tmpfs $LFS/run
if [ -h $LFS/dev/shm ]; then
        mkdir -pv $LFS/$(readlink $LFS/dev/shm)
fi
[ -e /bin/env ] && ENV=/bin/env || ENV=/usr/bin/env
chroot "$LFS" $ENV -i                        \
        HOME=/root                                    \
        TERM="$TERM"                                   \
        PS1='(chroot) \u:\w\$ '                         \
        LD_LIBRARY_PATH=/usr/lib:/usr/lib64:/lib:/lib64  \
        PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin \
        /bin/bash --login
umount -v $LFS/dev/{pts,}
umount -v $LFS/{proc,sys,run}
EOF
	chmod +x "$ROOT/chroot.sh"

	touch $ROOT/var/log/{btmp,lastlog,faillog,wtmp}
	chgrp -v utmp $ROOT/var/log/lastlog
	chmod -v 664  $ROOT/var/log/lastlog
	chmod -v 600  $ROOT/var/log/btmp
	install -m755 -d -o spkg -g spkg -v $ROOT/var/tmp/spkg
	ln -svf "$INSTALL_PATH"/spkg $ROOT/sbin

	# Fetch all required packages as wget will not be available initially
	list="@system"
	populate_list
	FETCH_ONLY=1
	DISTFILES="$ROOT/$DISTFILES"
	installList $list

	if [[ $(whereis git | sed 's,.*:\s*,,') != "" ]]; then
		P=${PKG_DB_DIR%/} # strip / at end if exists
		cd $ROOT/${P%spkg} # strip toplevel dir.
		rmdir spkg
		git clone https://github.com/smileaf419/spkg
	else
		echo "You will need to copy or clone spkg into $PKG_DB_DIR"
		echo " git clone https://github.com/smileaf419/spkg"
	fi

	echo " * Bootstrapping complete!"
	echo "Its STRONGLY encouraged now to create a $ROOT/etc/spkg.conf"
	echo " A default is included within the spkg-tools subdir"
#	echo "a symlink for spkg is encouraged for convience."
#	echo " ln -s ${INSTALL_PATH}/spkg /sbin"
	echo "You should now run $ROOT/chroot.sh"
	echo "Afterwards: spkg @temptools ; Once complete its safe to remove the /tools dir"
	echo "And finally: spkg -e @system"
	exit 0
fi

# Get Dependencies and check if any require updates.
if [[ $MODE != "search" ]]; then
	echo " * Calculating Package Order..."
	getFullPkgList $list
	if [[ $VERBOSE -ge 1 ]]; then
		echo "Package Order (Full List):"
		cat /tmp/chart
		echo "Package Order:"
	fi
	list=
	[[ $MODE == "uninstall" ]] && tac /tmp/chart > /tmp/chart2 && mv /tmp/chart{2,}
	for p in $(cat /tmp/chart); do
		setupENV $p

		if [[ $MODE != "uninstall" ]]; then
			# By default we don't install already installed packages, even when requested
			# check forced or empty world.
			version_gt $PKG_VR $O_VER
			if [[ $? == 0 ||
				($FORCE == 1 && $REQUESTED_LIST =~ (^|[[:space:]])"$PKG_CAT/$PKG_NAME"($|[[:space:]])) ||
				! -z $EMPTY_WORLD ]]; then
				echo -n "$PKG_CAT/$PKG_NAME - $PKG_VR [ $O_VER ]"
				[[ $FORCE == 1 ]] && echo -n " (forced)"
				[[ ! -z $IUSE ]] && echo -n " [ $IUSE ]"
				echo
				list+=" $PKG_CAT/$PKG_NAME"
				[[ $PKG_FLAGS != "" ]] && list+="[$PKG_FLAGS]"
			elif [[ $VERBOSE -gt 1 ]]; then
				echo $PKG_CAT/$PKG_NAME not within REQUESTED_LIST or not FORCE
			fi
		else
			if [[ $(getinstalledversion $PKG_CAT/$PKG_NAME) != 0 &&
				($REQUESTED_LIST =~ (^|[[:space:]])"$PKG_CAT/$PKG_NAME"($|[[:space:]])) ]]; then
				echo -n "$PKG_CAT/$PKG_NAME - $PKG_VR [ $O_VER ]"
				[[ $FORCE == 1 ]] && echo -n " (forced)"
				[[ ! -z $IUSE ]] && echo -n " [ $IUSE ]"
				echo
				list+=" $PKG_CAT/$PKG_NAME"
				[[ $PKG_FLAGS != "" ]] && list+="[$PKG_FLAGS]"
			fi
		fi
	done

#	rm /tmp/chart
	[ $PRETEND == 1 ] && exit 0
	[[ -z $list ]] && die "Nothing to upgrade."
fi

# Search
if [[ $MODE == "search" ]]; then
	for p in $list; do
		echo "Searching: $p"
		for s in $(find $PKG_DB_DIR -mindepth 2 -type d -wholename \*$p\* | sed -e "s,$PKG_DB_DIR/,,"); do
			setupENV $s
			checkSha1 ${PKG_BLD%/*} $PKG_BLD || die
			echo " * ${PKG_CAT}/${PKG_NAME}-${PKG_VR}"
			echo "    Installed: ${O_VER}"
			(
				source "${PKG_BLD}"
				echo "    Homepage: ${HOMEPAGE}"
				echo "    Description: ${DESCRIPTION}"
				[[ -z $LICENSE ]] && LICENSE="Unknown"
				echo "    License:  ${LICENSE}"
				[[ ! -z $IUSE ]] && echo "    USE: ${IUSE}"
				echo -n "    Deps: ${DEPS}"
				[[ ! -z "$UDEPS" ]] && echo -n " [U:${UDEPS}]"
				[[ ! -z "$RDEPS" ]] && echo -n " [R:${RDEPS}]"
				[[ ! -z "$BDEPS" ]] && echo -n " [B:${BDEPS}]"
				[[ ! -z "$CDEPS" ]] && echo -n " [C:${CDEPS}]"
				echo
			)
			echo
		done
	done
	exit 0
fi	
installList $list

if [ -e /tmp/preserved ]; then
	echo " * Gathering list of packages to rebuild"
	REQUESTED_LIST=
	for f in $(cat /tmp/preserved); do
		echo -n "$f:"
		pkgs=$(checkFileDep $f | sed 's,/[^/]*$,,'|sort|uniq|tr '\n' ' ')
		echo " $pkgs"
		for d in $pkgs; do
			if [[ ! $REQUESTED_LIST =~ (^|[[:space:]])"$d"($|[[:space:]]) ]]; then
				REQUESTED_LIST+=" $d"
			fi
		done
	done
	list=
	getFullPkgList $REQUESTED_LIST
	for p in $(cat /tmp/chart); do
		setupENV $p

		version_gt $PKG_VR $O_VER
		if [[ $? == 0 || 
			$REQUESTED_LIST =~ (^|[[:space:]])"$PKG_CAT/$PKG_NAME"($|[[:space:]]) ]]; then
			echo -n "$PKG_CAT/$PKG_NAME - $PKG_VR [ $O_VER ]"
			[[ $FORCE == 1 ]] && echo -n " (forced)"
			[[ ! -z $IUSE ]] && echo -n " [ $IUSE ]"
			echo
			list+=" $PKG_CAT/$PKG_NAME"
		fi
	done
	installList $list
	for f in $(cat /tmp/preserved); do
		rm "$f" 2> /dev/null && echo " << $f" || echo " <! $f"
	done
	rm /tmp/preserved
fi

if [ -e "${WORKDIR_BASE}/inform.log" ]; then
	cat "${WORKDIR_BASE}/inform.log"
	rm "${WORKDIR_BASE}/inform.log"
fi

# Can use this to find applications/init scripts to restart following an update.
# lsof / | awk '/deleted/ && !/tmp/{print $9}' | sort -u
