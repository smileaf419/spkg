#!/bin/bash
####
## SMiLeaf Package Manager
## Author Stephen Leaf <smileaf@me.com>
## Date started: 2022/06/17

####
## Comment descriptions & formatting
## Blocks of comments or sections of code will be split up with a ####
## Comments will start with ##
## Code meant to be ignored will start with #
## Tab is set to 4 spaces
## GLOBAL vars will be in CAPS
## local vars will be lower case

## Versions will be concurrent, but this will get updated whenever a large amount of functionality gets added or fixed.
VERSION="20230422"

## Set some bash options
## +h - Disable hashing of commands, allows newer versions of programs to be located immediately used primarily for bootstrap
##    * Should move this to the bootstrap code?
## -E - Trap ERR codes
## -e - Exit immediately on Error
set +h -Ee

## Remove write bit from group/other
umask 022

####
## Trap Errors - Only exit out if we recieve an error code 77.
##               Such as using the function die
trap '[ "$?" == 77 ] && exit 77' ERR

## Probably won't ever need this.
#trap '[ "$?" -ne 0 ] && exit $?' EXIT

## Trap SIGINT so we can properly clean-up and display information.
trap "echo -ne '\nSIGINT caught, '; cleanup; exit 1" SIGINT

####
## Ensure our config file exists
if [ -e /etc/spkg.conf ]; then
	source /etc/spkg.conf
else
	echo " * no system config file located! We'll use defaults, but a /etc/spkg.conf file should be created!"
fi

## Clean-up all Temp files.
cleanup() {
	PKG_ONLY=$1
	echo -n "Cleaning up..."

	## For security purposes, validate our BUILD_PATH
	if [[ ! -z $BUILD_PATH ]]; then
		BP=$(readlink -f $BUILD_PATH)
		if [[ ! -z $BP && $BP != '/' && -e $BUILD_PATH ]]; then
			echo -n " $BUILD_PATH .."
			rm -rf "$BUILD_PATH"
		fi
	fi
	echo " Done"

	if [ -e $INFORMLOG ]; then
		cat "$INFORMLOG"
		[[ ! -z $PKG_ONLY ]] && rm "$INFORMLOG"
	fi

	# TODO: automerge if files were not changed.
	if [[ $CONFIG_PROTECTED == 'true' ]]; then
		echo " * System configuration files were protected!"
		find /etc/ -iname "*.cfg[0-9]*"
	fi
}

## Function to figure out where this script is at so we can reference our libs directory.
## Taken from:
## https://stackoverflow.com/questions/59895/how-do-i-get-the-directory-where-a-bash-script-is-located-from-within-the-script
whereAmI() {
	SOURCE=${BASH_SOURCE[0]}
	while [ -L "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
		DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
		SOURCE=$(readlink "$SOURCE")
		[[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
	done
	DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
	echo $DIR
}

####
## Set Environmental Variables
## Sanitize our paths in case our environment may not be complete.
export PKG_CONFIG_PATH=/lib/pkgconfig:/lib64/pkgconfig:/usr/lib/pkgconfig:/usr/lib64/pkgconfig
export LD_LIBRARY_PATH=/lib:/lib64:/usr/lib:/usr/lib64
export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin

####
## Set some defaults if they don't exist.
export MAKEOPTS=${MAKEOPTS:-"-j"$(( $(grep "cpu cores" /proc/cpuinfo|tail -n1|sed 's,.*:,,') + 1))}
export CFLAGS=${CFLAGS:-"-march=native -O2 -pipe"}
export CXXFLAGS=${CXXFLAGS:-"${CFLAGS}"}
export ARCH=${ARCH:-x86_64}
export USE=${USE:-}
export PAGE=${PAGE:-letter}
export ENABLE_TEST=${ENABLE_TESTS:-0}
export INSTALL_DOCS=${INSTALL_DOCS:-0}
export BUILD_PACKAGE=${BUILD_PACKAGE:-no}
export SILENT_BUILD=${SILENT_BUILD:-no}
export BUILD_USER=${BUILD_USER:-$(whoami)}
export TEST_USER=${TEST_USER:-$(whoami)}

####
## Paths
## Install Root (only changed during bootstrapping)
export ROOT=${ROOT:-/}
## Directory all build files are installed into.
export PKG_DB_DIR=${PKG_DB_DIR:-/var/db/spkg}
## Directory where script files are installed into.
export INSTALL_PATH=${INSTALL_PATH:-$(whereAmI)}
## Logfile Directory
export LOGDIR=${LOGDIR:-/var/log/spkg}
## Directory where everything is built and temporary files are stored.
export WORKDIR_BASE=${WORKDIR_BASE:-/var/tmp/spkg}
## Database Directory for local data storage.
export CACHE_DIR=${CACHE_DIR:-/var/lib/spkg}
## Database directory where installed packages are recorded.
export PKG_CACHE=${PKG_CACHE:-$CACHE_DIR/data}
## Storage directory for all downloaded files
export DISTFILES=${DISTFILES:-$CACHE_DIR/files}
## Storage directory for all archive packages.
export PKG_ARCHIVE_DIR=${PKG_ARCHIVE_DIR:-$CACHE_DIR/archive}

####
## Files
## Logfile format
export LOGFILE=${LOGFILE:-%D-%n-%v.log}
## Database file used to store all packages explicitely installed not found within @system
export PKG_WORLD=${PKG_WORLD:-$CACHE_DIR/world}
## Informational File to output at the end.
export INFORMLOG=${INFORMLOG:-$WORKDIR_BASE/inform.log}
## Storage file of cached packages being operated on.
export CHART=${CHART:-$WORKDIR_BASE/chart}
## Chart of packages in order to be installed/uninstalled.
export INSTALL_CHART=${INSTALL_CHART:-$WORKDIR_BASE/install_chart}
## List of files preserved until packages that depend on them can be reinstalled.
export PRESERVED_LOG=${PRESERVED_LOG:-$WORKDIR_BASE/preserved}

####
## Set initial program defaults
## 0 = false; 1 = true
export MODE="install"
export FORCE=0
export PRETEND=0
export ARCHIVE_INSTALL=0
export VERBOSE=0
## Current loaded package
export PKG=
## User supplied list from the command line
export REQUESTED_LIST=
## Parsed list used to supply packages to be operated on.
export PKG_LIST=

## For security reasons this shouldn't ever be used... But exists
IGNORE_SHA1=0

####
## Include our libraries
source "${INSTALL_PATH}/libs/pkg-tools"
source "${INSTALL_PATH}/libs/pkg-utils"
source "${INSTALL_PATH}/libs/builddefaults"
source "${INSTALL_PATH}/libs/spkg-include"
source "${INSTALL_PATH}/libs/utils"
source "${INSTALL_PATH}/libs/build-tools"
source "${INSTALL_PATH}/libs/list-tools"

####
## Parse our command line
parse_cmdline() {
	opts=($@)
	for (( a=0; a<$#; a++ )); do
		opt=${opts[$a]}
		val=${opts[$a+1]}
		if [[ $opt == -* ]] ; then
			opt=${opt#-}
			for i in $(seq 1 ${#opt}); do
				if [[ $opt == -* ]]; then
					o=$opt
				else
					o=${opt:$i-1:1}
				fi
				case "$o" in
					v|-verbose)
						VERBOSE=$(( $VERBOSE + 1 )) ;;
					-bootstrap)
						MODE="bootstrap"
						list="@bootstrap"
						a=$(($a + 1 ))
						ROOT=$(readlink -f $val) ;;
					-debug)
						set -x
						export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }' ;;
					-ignoresha)
						IGNORE_SHA1=1 ;;
					l|-logdir)
						a=$(( $a + 1 ))
						LOGDIR=$val ;;
					u|-uninstall)
						MODE="uninstall" ;;
					s|-search)
						MODE="search" ;;
					U|-update)
						MODE="update" ;;
					D|-deepClean)
						MODE="clean" ;;
					-sync)
						MODE="sync" ;;
					f|-force)
						FORCE=1 ;;
					-fetchOnly)
						FETCH_ONLY=1
						FORCE=1 ;;
					p|-pretend)
						PRETEND=1 ;;
					A|-installArchive)
						ARCHIVE_INSTALL="1" ;;
					-archiveDir)
						a=$(( $a + 1 ))
						PKG_ARCHIVE_DIR=$val ;;
					-enable-tests)
						ENABLE_TESTS=1 ;;
					-disable-tests)
						ENABLE_TESTS=0 ;;
					-buildbdeps)
						MODE="buildbdeps" ;;
					-updatesha1)
						HASH_UPDATE=true ;;
					-rebuildKernelMods)
						list+=" @kernelModules"
						FORCE=1
						MODE="rebuildKernelModules" ;;
					-rebuildPythonMods)
						list+=" @pythonModules"
						FORCE=1
						MODE="rebuildPythonModules" ;;
					-rebuildPerlMods)
						list+=" @perlModules"
						FORCE=1
						MODE="rebuildPerlModules" ;;
					-buildKernel)
						MODE="buildKernel" ;;
					-resume)
						MODE="resume" ;;
					-user)
						a=$(( $a + 1 ))
						BUILD_USER=$val ;;
					-testUsr)
						a=$(( $a + 1 ))
						TEST_USER=$val ;;
					-verify)
						VERIFY_SIG=1 ;;
					1|-oneshot)
						OMIT_RECORD_IN_WORLD=1 ;;
					Q|-silentBuild)
						SILENT_BUILD=yes ;;
					e|-empty)
						EMPTY_WORLD=1 ;;
					-preserved)
						MODE="preserved" ;;
					-version)
						echo "spkg by Stephen Leaf version $VERSION"
						exit $? ;;
					h|-help)
						echo "spkg by Stephen Leaf version $VERSION"
						echo "Usage: $0 [Arguments] [package | @set]"
						echo " @set can be any of: @all @system @world"
						echo "  see spkg-sets, for a complete listing."
						echo " Modes (Default: Install)"
						echo    "  --search, -s         Search and list package information."
						echo    "  --uninstall, -u      uninstall package."
						echo    "  --rebuildKernelMods  Rebuilds all Kernel Modules."
						echo    "  --rebuildPythonMods  Rebuilds all Python Modules."
						echo    "  --rebuildPerlMods    Rebuilds all Perl Modules."
						echo    "  --buildKernel        Builds a new kernel"
						echo    "  --deepClean, -D      Compares the charts of the world file and packages installed."
						echo    "  --sync               Syncs the package database via: git pull"
						echo    "  --preserved          Checks for and initiates a rebuild of all packages requiring a rebuild."
						echo    "  --resume             Continues where we left off."
						echo    " Developer Options"
						echo    "  --buildbdeps         Updates .build files setting DEPS/BDEPS/RDEPS."
						echo    "  --updatesha1 [pkg]   Creates or updates sha1sum for the given package."
						echo    "  --bootstrap [path]   Generates a new install at [path]"
						echo    "  --debug              Shows all commands as they are being ran"
						echo    " Optional Arguments"
						echo    "  --silentBuild, -Q    Hides all build output."
						echo    "  --user [username]    Runs all build file commands as [username]"
						echo    "  --testUsr [username] Runs all build file test commands as [username]"
						echo    "  --oneshot, -1        Omits adding any package requested to the world file."
						echo    "  --empty, -e          Assumes an empty world file"
						echo    "  --update, -U         Finds all updates for all installed packages."
						echo    "  --force, -f          Forces install of already installed packages."
						echo    "  --pretend, -p        Shows what will be done, without doing it."
						echo    "  --fetchOnly          Fetches all files without installing."
						echo    "  --verify             Verify PGP Signatures if available."
						echo    "  --installArchive, -A Installs package(s) from a preprepared archive."
						echo    "  --archiveDir [dir]   Sets the archive Directory (default: $PKG_ARCHIVE_DIR)"
						echo -n "  --enable-tests       Enable package specific tests."
						[ $ENABLE_TESTS == 1 ] && echo " (Default)" || echo
						echo -n "  --disable-tests      Disables package specific tests."
						[ $ENABLE_TESTS == 0 ] && echo " (Default)" || echo
						echo    "  --logdir, -l [file]  Set the Log Directory (default: $LOGDIR)"
						echo    "  --verbose, -v        Make the output more verbose. (add another for extra)"
						echo    "  --help, -h           This Help Message."
						exit $? ;;
					*)
						die "Unknown option: $1 ! see --help" ;;
				esac
				if [[ $opt == -* ]]; then
					break
				fi
			done
		else
			shift $a
			REQUESTED_LIST=${list:-$@}
			break
		fi
	done
}

####
## Takes a user supplied list and parse it and finding matches for packages.
## Store the information within our CHART for easy reference.
populate_list() {
	local list=$(expandSets $REQUESTED_LIST)
	echo -n " * Populating list"
	for p in $list; do
		echo -n '.'
		PKG=$(EntryParser $p)
		## EntryParser does not find packages within our Database
		## Check our Mode and check for the presence of the package.
		## If the file is not found or multiple packages are found, perform a search and show the results.
		if [[ $MODE == 'uninstall' ]]; then
			PKG=$(Installed-getPkg $PKG)
		else
			PKG=$(DB-getPkg $PKG | getLatest)
		fi

		if [[ $PKG == "" ]]; then
			if [[ $MODE == 'uninstall' ]]; then
				echo " !! $p not installed!"
				exit
			else
				echo " !! $p not found!"
				PKG_LIST=$p
				MODE=search
				return
			fi
		fi
		PKG_LIST+=" "$(eval echo $PKG)
		## Save our Cache data.
		eval echo $PKG >> $CHART
	done
	echo " done"
	PKG_LIST=${PKG_LIST# }
}

parse_cmdline $@

####
## Ensure we can write to required directories
if [[ $MODE != 'search' ]]; then
	if [ ! -d $PKG_ARCHIVE_DIR ];
		then mkdir -p "$PKG_ARCHIVE_DIR" || die "Failed to create: PKG_ARCHIVE_DIR: $PKG_ARCHIVE_DIR"; fi
	test -w $PKG_ARCHIVE_DIR || die "Cannot write to PKG_ARCHIVE_DIR: $PKG_ARCHIVE_DIR"

	if [ ! -d $PKG_CACHE ];
		then mkdir -p "$PKG_CACHE" || die "Failed to create: PKG_CACHE: $PKG_CACHE"; fi
	test -w $PKG_CACHE || die "Cannot write to PKG_CACHE: $PKG_CACHE"
	if [[ $(stat -c '%U' "$PKG_CACHE") != $BUILD_USER ]]; then
		echo -n " * Fixing Permissions in $PKG_CACHE "
		chown -R $BUILD_USER $PKG_CACHE && echo -n '.'
		find $PKG_CACHE -type d -exec chmod 770 {} \; && echo -n '.'
		find $PKG_CACHE -type f -exec chmod 660 {} \; && echo -n '.'
		echo " done"
	fi

	if [ ! -d $DISTFILES ];
		then mkdir -p "$DISTFILES" || die "Failed to create: DISTFILES: $DISTFILES"; fi
	test -w $DISTFILES || die "Cannot write to DISTFILES: $DISTFILES"

	if [ ! -d $LOGDIR ];
		then mkdir -p "$LOGDIR" || die "Failed to create: LOGDIR: $LOGDIR"; fi
	test -w $LOGDIR || die "Cannot write to LOGDIR: $LOGDIR"

	if [ ! -d $WORKDIR_BASE ];
		then mkdir -p "$WORKDIR_BASE" || die "Failed to create: WORKDIR_BASE: $WORKDIR_BASE"; fi
	test -w $WORKDIR_BASE || die "Cannot write to WORKDIR_BASE: $WORKDIR_BASE"

	if [ ! -d $PKG_DB_DIR ]
		then mkdir -p "$PKG_DB_DIR" || die "Failed to create: PKG_DB_DIR: $PKG_DB_DIR"; fi
	test -w $PKG_DB_DIR || die "Cannot write to PKG_DB_DIR: $PKG_DB_DIR"

	[[ -e $INFORMLOG ]] && rm $INFORMLOG
	touch $INFORMLOG
	chmod 1777 $INFORMLOG

	## Populate our list with fully qualified entries so long as we're not searching.
	## We wouldn't want to destroy our search terms.
	populate_list
fi

## Calculate Binary Dependencies and update the DEPS var within the build file.
if [[ $MODE == "buildbdeps" ]]; then
	for l in $PKG_LIST; do
		p=$(getCategory $l)/$(getName $l)
		echo "Finding Binary Dependencies: $p"
		buildBDeps $p
	done
fi

## Update the sha1sum of all files for the given package.
## Using the set @all while useful is not recommended given the size of the repository.
if [[ $HASH_UPDATE ]]; then
	C=$(echo $list | tr ' ' '\n' | wc -l)
	echo " * Updating sha1 of $C packages"
	source "${INSTALL_PATH}/libs/updatesha1"
	for p in $PKG_LIST; do
		PKG=$(DB-getPkg $p)
		if [[ $PKG == "" ]]; then
			echo -n "!"
			echo "$p" >> /tmp/hashfail
			continue
		else
			[[ $VERBOSE -gt 0 ]] && echo -n "$p ["
			if updatesha1 $(getCategory $PKG)/$(getName $PKG); then
				[[ $VERBOSE -gt 0 ]] && echo " ]" || echo -n '.'
			fi
		fi
	done
	echo
	if [ -e /tmp/hashfail ]; then
		cat /tmp/hashfail
		rm /tmp/hashfail
	fi
	exit 0
fi

####
## Sync our database to the repository.
## In the future we may want to seperate our database from the package manager
## Also can support such syncing methods as rsync.
if [[ $MODE == "sync" ]]; then
	# If git is not installed, inform the user to install it.
	if [[ ! -e /usr/bin/git ]]; then
		echo " !! Git is not installed!"
		echo "    Please install it via: spkg git; Or download a copy from: https://github.com/smileaf419/spkg"
		exit 1
	fi
	echo " * Syncing database... "
	cd $PKG_DB_DIR
	git pull && echo " * Sync Complete!" || die " !! Sync Failed!"
fi

####
## Check for updates against whats installed and build our list.
## Take everything installed and find upgrades for it, respecting explicitly installed slots within world.
if [[ $MODE == "update" ]]; then
	echo " * Checking for updates"

	## a REQUEST_LIST is not set as none of this has been explicitely requested.
	## instead set a PKG_LIST
	list=$(find $PKG_CACHE/* -mindepth 1 -maxdepth 1 -type d | sed "s,$PKG_CACHE/,," | tr '\n' ' ')
	PKG_LIST=
	for p in $list; do
		echo -n '.'
		PKG=$(Installed-getPkg $(EntryParser $p))

		setPkgENV $PKG
		PKG=$(getPkgFromWorld $PKG_CAT/$PKG_NAME)

		Install-addPkg $PKG
	done
	echo

	[ $VERBOSE -ge 1 ] && echo list: $list

## Continues off the previous list
elif [[ $MODE == "resume" ]]; then
	if [ ! -e $INSTALL_CHART ]; then
		die " ! Error Cannot resume no list was found."
	fi
	echo " * Resuming..."
	PKG_LIST=$(cat $INSTALL_CHART)
	## FIXME: This actually is a guess at what the REQUESTED_LIST actually was.
	##        If for example: a package was request, and 2 dependencies brought in, then got cancelled and resumed.
	##        all 3 packages would be set as requested and thus registered within WORLD.
	PKG_LIST=$list

## Build the installed kernel, will automatically rebuild all kernel modules afterwards.
elif [[ $MODE == "buildKernel" ]]; then
	buildKernel
	REQUESTED_LIST="@kernelModules"
	FORCE=1
	populate_list

## Attempts to clean a system of all unessential packages.
## This is done by building 2 lists:
##  First we calculate a full list based on our @system and @world sets
##  Aftwards we gather a list of installed packages
## Finally compare the 2 lists and filter out the uniq entries.
## The entries which only exist in 1 list, will be removed.
##  In theory These entries exist installed, but not in the full list of required packages.
##  Its possible however that it got installed, then a package is updated and the uniq entry is a new package.
## FIXME: We should itterate over the list to ensure the uniq pkgs are installed,
##        if not, error out and tell the user to run: spkg @system @world
elif [[ $MODE == "clean" ]]; then
#	ENABLE_TESTS=1
	echo " * Deep Cleaning"
	echo " * Gathering a list of @system and @world"
	PKG_LIST=$(expandSets "@system @world")
	echo " * Calculating Package List"
	getFullPkgList $PKG_LIST || die " ! Error Calculating dependencies, ensure you've updated your system first: spkg -U"
	mv $CHART $WORKDIR_BASE/sysworldset
	echo " * Getting a list of installed packages."
	find $PKG_CACHE -name \*.build | fileToList | listToLEntry > $WORKDIR_BASE/installedPkgs
	getFullPkgList $(cat $WORKDIR_BASE/installedPkgs) || die " ! Error Calculating dependencies, ensure you've updated your system first: spkg -U"
	echo " * Gathering a list of targets to remove"
	PKG_LIST=$(cat $CHART $WORKDIR_BASE/sysworldset | sort | uniq -u)
	MODE="uninstall"
	## Clean-up
	rm $WORKDIR_BASE/sysworldset $WORKDIR_BASE/installedPkgs

	# { output=$(command 2>&1 1>&3-) ;} 3>&1

## Bootstrap a new system to the given directory.
elif [[ $MODE == "bootstrap" ]]; then
	source "${INSTALL_PATH}/libs/bootstrap"
fi

## Search
if [[ $MODE == "search" ]]; then
	for p in $REQUESTED_LIST; do
		## Parse the Entry first and grab just the PKG_CAT/PKG_NAME
		EntryParser $p > /dev/null

		PKG_CAT=${PKG_CAT:-*}
		echo "Searching: $p ($PKG_CAT/$PKG_NAME)"
		list=$(find $PKG_DB_DIR -maxdepth 2 -iwholename \*$PKG_CAT/$PKG_NAME\* | sed "s,$PKG_DB_DIR\(/*\)\?,,")
		[[ $list == '' ]] && echo " ! $p not found!"
		for r in $list; do
			## Parse the entry again to get more information that was not supplied in the search.
			PKG=$(DB-getPkg $r | getLatest)
			## Its possible for spkg-sets and spkg-tools to get returned.. filter them out.
			[[ $r == spkg-*/* ]] && continue

			PKG_BLD=$(getBldFile $PKG)
			PKG_CAT=$(getCategory $PKG)
			PKG_NAME=$(getName $PKG)
			checkSha1 ${PKG_BLD%/*} $PKG_BLD || die
			echo " * ${PKG_CAT}/${PKG_NAME}"
			echo -n "      Available:"
			for a in $(DB-getPkg $PKG_CAT/$PKG_NAME); do
				echo -n " $(getVerRev $a)"
			done; echo

			## Run this in a subshell to avoid tainting the environment.
			echo -n "      Installed:"
			(
				ipkg=$(Installed-getPkg $PKG_CAT/$PKG_NAME)
				[[ $ipkg == '' ]] && echo -n ' none'
				for i in $ipkg; do
					echo -n " $(getVerRev $i)"
					slot=$(getSlot $i)
					[[ $slot != 0 ]] && echo -n ":$slot"
				done; echo
			)

			## Ditto, avoid tainting the environment
			(
				source "${PKG_BLD}"
				echo "       Homepage: ${HOMEPAGE}"
				echo "    Description: ${DESCRIPTION}"
				[[ -z $LICENSE ]] && LICENSE="Unknown"
				echo "        License: ${LICENSE}"
				[[ ! -z $IUSE ]] &&
				echo "            USE: ${IUSE}"
				echo -n "   Dependencies: ${DEPS}"
				[[ ! -z "$UDEPS" ]] && echo -n " [U:${UDEPS}]"
				[[ ! -z "$RDEPS" ]] && echo -n " [R:${RDEPS}]"
				[[ ! -z "$BDEPS" ]] && echo -n " [B:${BDEPS}]"
				[[ ! -z "$CDEPS" ]] && echo -n " [C:${CDEPS}]"
				echo
			)
			echo
		done
	done
	exit 0
elif [[ $MODE == "preserved" ]]; then
	preservedRebuild
else
	if [[ $MODE != "resume" ]]; then
		## Get Dependencies and check if any require updates.
		echo " * Calculating Package Order..."
		LIST=$(cat $CHART)
		getFullPkgList $LIST || die " ! Error Calculating Dependencies: you may need to run: spkg -U"
	else
		LIST=$(cat $INSTALL_CHART)
	fi
	if [[ $VERBOSE -ge 1 ]]; then
		echo "Package Order (Full List):"
		## FIXME: Should format this for the user.
		for p in $(cat $CHART); do
			setPkgENV $p
			echo "$PKG_CAT/$PKG_NAME-$PKG_VR:$PKG_SLOT"
		done
		echo
		echo "Package Order:"
	fi

	[[ -e $INSTALL_CHART ]] && rm "$INSTALL_CHART"
	for p in $LIST; do
		setPkgENV $p > /dev/null

		if [[ $MODE != "uninstall" ]]; then
			## By default we don't install already installed packages, even when requested
			## check forced or empty world.
			if [[ $MODE == "resume" ||  $(version_gt $PKG_VR $O_VER) == 0 ||
				($FORCE == 1 && $PKG_LIST =~ (^|[[:space:]]|=)"$PKG_CAT/$PKG_NAME") ||
				! -z $EMPTY_WORLD ]]; then
				echo -n "$PKG_CAT/$PKG_NAME - $PKG_VR [ $O_VER ]"
				## Only mention it's been forced if its within the REQUESTED_LIST & FORCE
				[[ $FORCE == 1 && $PKG_LIST =~ (^|[[:space:]])"$PKG_CAT/$PKG_NAME" ]] && echo -n " (forced)"
				[[ ! -z $IUSE ]] && echo -n " [ $IUSE ]"
				echo

				## Add to our INSTALL_CHART
				Install-addPkg $PKG
			elif [[ $VERBOSE -gt 1 ]]; then
				echo "$PKG_CAT/$PKG_NAME not within REQUESTED_LIST or not FORCE ($REQUESTED_LIST)"
			fi
		else
			if [[ $(Installed-getPkg $PKG_CAT/$PKG_NAME:$PKG_SLOT | getVersion) != 0 &&
				($REQUESTED_LIST =~ (^|[[:space:]])"=$PKG_CAT/$PKG_NAME"(-|:|$|[[:space:]])) ]]; then
				echo -n "$PKG_CAT/$PKG_NAME - $PKG_VR [ $O_VER ]"
				[[ $FORCE == 1 ]] && echo -n " (forced)"
				[[ ! -z $IUSE ]] && echo -n " [ $IUSE ]"
				echo

				## Add to our INSTALL_CHART
				Install-addPkg $PKG
			fi
		fi
	done

	[[ -z $LIST ]] && die "Nothing to upgrade."
	[ $PRETEND == 1 ] && exit 0

	## Install our list
	installList $PKG_LIST && rm $INSTALL_CHART $CHART

	## Check for any preserved files
	preservedRebuild
fi

# Can use this to find applications/init scripts to restart following an update.
# lsof / | awk '/deleted/ && !/tmp/{print $9}' | sort -u
