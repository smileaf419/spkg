#!/bin/bash
# SMiLeaf Package Manager
# Author Stephen Leaf <smileaf@me.com>
# Date started: 2022/06/17

VERSION="20230315"

set +h -E
umask 022
trap '[ "$?" -ne 77 ] || exit 77' ERR

if [ -e /etc/spkg.conf ]; then
	source /etc/spkg.conf
elif [[ $(test -w /etc/ ) ]]; then
	echo " * no system config file located! We'll use defaults, but a /etc/spkg.conf file should be created!"
else
	echo "Cannot write /etc/spkg.conf file!"
	exit 1
fi

# Taken from:
# https://stackoverflow.com/questions/59895/how-do-i-get-the-directory-where-a-bash-script-is-located-from-within-the-script
whereAmI() {
	SOURCE=${BASH_SOURCE[0]}
	while [ -L "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
		DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
		SOURCE=$(readlink "$SOURCE")
		[[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
	done
	DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
	echo $DIR
}

# Set Environmental Variables
export PKG_CONFIG_PATH=/lib/pkgconfig:/lib64/pkgconfig:/usr/lib/pkgconfig:/usr/lib64/pkgconfig
export LD_LIBRARY_PATH=/lib:/lib64:/usr/lib:/usr/lib64
export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin

# Set some defaults if they don't exist.
MAKEOPTS=${MAKEOPTS:-"-j"$(( $(grep "cpu cores" /proc/cpuinfo|tail -n1|sed 's,.*:,,') + 1))}
CFLAGS=${CFLAGS:-"-march=native -O2 -pipe"}
CXXFLAGS=${CXXFLAGS:-"${CFLAGS}"}
ARCH=${ARCH:-x86_64}
USE=${USE:-}
PAGE=${PAGE:-letter}
ENABLE_TEST=${ENABLE_TESTS:-0}
INSTALL_DOCS=${INSTALL_DOCS:-0}
BUILD_PACKAGE=${BUILD_PACKAGE:-no}
SILENT_BUILD=${SILENT_BUILD:-no}
BUILD_USER=${BUILD_USER:-$(whoami)}
TEST_USER=${TEST_USER:-$(whoami)}
# Paths
ROOT=${ROOT:-/}
PKG_DB_DIR=${PKG_DB_DIR:-/var/db/spkg}
INSTALL_PATH=${INSTALL_PATH:-$(whereAmI)}
LOGDIR=${LOGDIR:-/var/log/spkg}
LOGFILE=${LOGFILE:-pkg-$(date +%Y%m%d).log}
INFORMLOG=/tmp/inform.log
WORKDIR_BASE=${WORKDIR_BASE:-/var/tmp/spkg}
CACHE_DIR=${CACHE_DIR:-/var/lib/spkg}
PKG_CACHE=${PKG_CACHE:-${CACHE_DIR}/data}
DISTFILES=${DISTFILES:-${CACHE_DIR}/files}
PKG_WORLD=${PKG_WORLD:-${CACHE_DIR}/world}
PKG_ARCHIVE_DIR=${PKG_ARCHIVE_DIR:-${CACHE_DIR}/archive}

export PKG_DB_DIR PKG_CACHE DISTFILES WORKDIR_BASE ROOT MAKEOPTS
export CFLAGS CXXFLAGS PAGE USE ARCHS
export ENABLE_TESTS INSTALL_DOCS BUILD_USER SILENT_BUILD

# 0: Install; 1: Uninstall; 2: Search; 3: Update
MODE="install"
FORCE=0
PRETEND=0
ARCHIVE_INSTALL=0
VERBOSE=0

# For security reasons this shouldn't ever be used... But exists
IGNORE_SHA1=0

#set -e
trap '[ "$?" -ne 0 ] && exit $?' EXIT

source "${INSTALL_PATH}/libs/helpermethods"
source "${INSTALL_PATH}/libs/builddefaults"
source "${INSTALL_PATH}/libs/spkg-include"
source "${INSTALL_PATH}/libs/utils"
source "${INSTALL_PATH}/libs/build-tools"
source "${INSTALL_PATH}/libs/list-tools"

if [ ! -d $PKG_ARCHIVE_DIR ]; 
	then mkdir -p "$PKG_ARCHIVE_DIR" || die "Failed to create: PKG_ARCHIVE_DIR: $PKG_ARCHIVE_DIR"; fi
test -w $PKG_ARCHIVE_DIR || die "Cannot write to PKG_ARCHIVE_DIR: $PKG_ARCHIVE_DIR"
if [ ! -d $PKG_CACHE ]; 
	then mkdir -p "$PKG_CACHE" || die "Failed to create: PKG_CACHE: $PKG_CACHE"; fi
test -w $PKG_CACHE || die "Cannot write to PKG_CACHE: $PKG_CACHE"
if [ ! -d $DISTFILES ];
	then mkdir -p "$DISTFILES" || die "Failed to create: DISTFILES: $DISTFILES"; fi
test -w $DISTFILES || die "Cannot write to PKG_ARCHIVE_DIR: $DISTFILES"
if [ ! -d $LOGDIR ];
	then mkdir -p "$LOGDIR" || die "Failed to create: LOGDIR: $LOGDIR"; fi
test -w $LOGDIR || die "Cannot write to PKG_ARCHIVE_DIR: $LOGDIR"
if [ ! -d $WORKDIR_BASE ];
	then mkdir -p "$WORKDIR_BASE" || die "Failed to create: WORKDIR_BASE: $WORKDIR_BASE"; fi
test -w $WORKDIR_BASE || die "Cannot write to PKG_ARCHIVE_DIR: $WORKDIR_BASE"
if [ ! -d $PKG_DB_DIR ]
	then mkdir -p "$PKG_DB_DIR" || die "Failed to create: PKG_DB_DIR: $PKG_DB_DIR"; fi
test -w $PKG_DB_DIR || die "Cannot write to PKG_ARCHIVE_DIR: $PKG_DB_DIR"

touch $INFORMLOG
chmod 1777 $INFORMLOG

parse_cmdline() {
	# Referenced mozilla-launcher script.
	while [[ $# -ne 0 ]] ; do
		if [[ $1 == -* ]] ; then
			case "${1#-}" in
				v|-verbose)
					VERBOSE=$(( $VERBOSE + 1 ))
					shift 1 ;;
				-bootstrap)
					MODE="bootstrap"
					ROOT=$(readlink -f $2)
					shift 2 ;;
				-ignoresha)
					IGNORE_SHA1=1
					shift 1 ;;
				l|-logdir)
					LOGDIR=$2
					shift 2 ;;
				u|-uninstall)
					MODE="uninstall"
					shift 1 ;;
				s|-search)
					MODE="search"
					shift 1 ;;
				U|-update)
					MODE="update"
					shift 1 ;;
				D|-deepClean)
					MODE="clean"
					shift 1 ;;
				-sync)
					MODE="sync"
					shift 1 ;;
				f|-force)
					FORCE=1
					shift 1 ;;
				-fetchOnly)
					FETCH_ONLY=1
					FORCE=1
					shift 1 ;;
				p|-pretend)
					PRETEND=1
					shift 1 ;;
				A|-installArchive)
					ARCHIVE_INSTALL="1"
					shift 1 ;;
				-archiveDir)
					PKG_ARCHIVE_DIR=$2
					shift 2 ;;
				-enable-tests)
					ENABLE_TESTS=1
					shift 1 ;;
				-disable-tests)
					ENABLE_TESTS=0
					shift 1 ;;
				-buildbdeps)
					MODE="buildbdeps"
					shift 1 ;;
				-updatesha1)
					HASH_UPDATE=true
					shift 1 ;;
				-rebuildKernelMods)
					MODE="rebuildKernelModules"
					shift 1 ;;
				-rebuildPythonMods)
					MODE="rebuildPythonModules"
					shift 1 ;;
				-rebuildPerlMods)
					MODE="rebuildPerlModules"
					shift 1 ;;
				-buildKernel)
					MODE="buildKernel"
					shift 1 ;;
				-user)
					BUILD_USER=$2
					shift 2 ;;
				-testUsr)
					TEST_USER=$2
					shift 2 ;;
				-verify)
					VERIFY_SIG=1
					shift 1 ;;
				1|-oneshot)
					OMIT_RECORD_IN_WORLD=1
					shift 1 ;;
				Q|-silentBuild)
					SILENT_BUILD=yes
					shift 1 ;;
				e|-empty)
					EMPTY_WORLD=1
					shift 1 ;;
				-version)
					echo "spkg by Stephen Leaf version $VERSION"
					exit $? ;;					
				h|-help)
					echo "spkg by Stephen Leaf version $VERSION"
					echo "Usage: $0 [Arguments] [package]"
					echo " Modes (Default: Install)"
					echo    "  --search, -s         Search and list package information."
					echo    "  --uninstall, -u      uninstall package."
					echo    "  --rebuildKernelMods  Rebuilds all Kernel Modules."
					echo    "  --rebuildPythonMods  Rebuilds all Python Modules."
					echo    "  --rebuildPerlMods    Rebuilds all Perl Modules."
					echo    "  --buildKernel        Builds a new kernel"
					echo    "  --deepClean, -D      Compares the charts of the world file and packages installed."
					echo    "  --sync               syncs the package database via: git pull"
					echo    " Developer Options"
					echo    "  --buildbdeps         Updates .build files setting DEPS/BDEPS/RDEPS."
					echo    "  --updatesha1         Creates or updates sha1sum for all packages."
					echo    "  --bootstrap [path]   Generates a new install at [path]"
					echo    " Optional Arguments"
					echo    "  --silentBuild, -Q    Hides all build output."
					echo    "  --user [username]    Runs all build file commands as [username]"
					echo    "  --testUsr [username] Runs all build file test commands as [username]"
					echo    "  --oneshot, -1        Omits adding any package requested to the world file."
					echo    "  --empty, -e          Assumes an empty world file"
					echo    "  --update, -U         Finds all updates for all installed packages."
					echo    "  --force, -f          Forces install of already installed packages."
					echo    "  --pretend, -p        Shows what will be done, without doing it."
					echo    "  --fetchOnly          Fetches all files without installing."
					echo    "  --verify             Verify PGP Signatures if available."
					echo    "  --installArchive, -A Installs package(s) from a preprepared archive."
					echo    "  --archiveDir [dir]   Sets the archive Directory (default: $PKG_ARCHIVE_DIR)"
					echo -n "  --enable-tests       Enable package specific tests."
					[ $ENABLE_TESTS == 1 ] && echo " (Default)" || echo
					echo -n "  --disable-tests      Disables package specific tests."
					[ $ENABLE_TESTS == 0 ] && echo " (Default)" || echo
					echo    "  --logdir, -l [file]  Set the Log Directory (default: $LOGDIR)"
					echo    "  --verbose, -v        Make the output more verbose. (add another for extra)"
					echo    "  --help, -h           This Help Message."
					exit $? ;;
				*)
					echo "Unknown option!"
					exit 1 ;;
			esac
		else
			list=$@
			break
		fi
	done
}

# This function takes a list supplied on the command line and populates it with fully qualified entries
# in the form:  =category/package_name-version:slot
populate_list() {
	tlist=
	for p in $list; do
		# Expand Sets
		# This assumes all entries within a set are fully-qualified.
		if [[ ${p:0:1} == "@" ]]; then
			echo " * Found ${p#@} Set .. Expanding"
			if [[ ${p#@} == "world" ]]; then
				tlist+=" $(grep -v -E "^#" $PKG_WORLD|tr '\n' ' ')"
			elif [ -e $PKG_DB_DIR/spkg-sets/${p#@} ]; then
				tlist+=" $(grep -v -E "^#" $PKG_DB_DIR/spkg-sets/${p#@}|tr '\n' ' ')"
			else
				echo " * Unknown set: ${p#@}"
			fi
		else
			setupENV $p
			# If a PKG_NAME is not set the package was not found, run a search so the user can fix the issue.
			if [[ $PKG_NAME == "" ]]; then
				echo " !! $p Not found!"
				list=$p
				MODE=search
				return
			fi
			tlist+=" $LENTRY"
		fi
	done
	# Save a list of what was requested on the commandline.
	export REQUESTED_LIST=${tlist# }
	list=${tlist# }
}

parse_cmdline $@

# Ensure we can write to our LOGDIR.
mkdir -p "${LOGDIR}" || die "Failed to mkdir ${LOGDIR}"
test -w "${LOGDIR}/" || die "LOGDIR: ${LOGDIR} not writable"

# Sync our database to the repository.
if [[ $MODE == "sync" ]]; then
	# If git is not installed, inform the user to install it.
	if [[ ! -e /usr/bin/git ]]; then
		echo " !! Git is not installed!"
		echo "    Please install it via: spkg git; Or download a copy from: https://github.com/smileaf419/spkg"
		exit 1
	fi
	cd $PKG_DB_DIR
	git pull || die " !! Sync Failed!"
fi

# Set a list to the bootstrap set.
if [[ $MODE == "bootstrap" ]]; then
	list="@bootstrap"
fi

# Populate our list with fully qualified entries so long as we're not searching.
# We wouldn't want to destroy our search terms.
if [[ $MODE != "search" ]]; then
	populate_list
fi

# Check for updates against whats installed and build our list.
if [[ $MODE == "update" ]]; then
	echo " * Checking for updates"
	for f in $(find $PKG_CACHE -name CONTENTS | sed -e 's,/CONTENTS,,' -e "s,$PKG_CACHE/,,"); do
		[ $VERBOSE -ge 2 ] && echo -n "$f : "
		setupENV ${f%/*}
		VER=${f##*/}
		[ $VERBOSE -ge 2 ] && echo "Checking $PKG_NAME - $PKG_VR > $VER"
		if version_gt $PKG_VR $VER ; then
			list+=" $LENTRY"
			echo $PKG_NAME :: $PKG_VR
		fi
	done	
	# Has the potential to produce multiple entries for the same program.
	# This filters out them out so we don't install them twice.
	list=$(echo $list | tr ' ' '\n' | sort | uniq | tr '\n' ' ')
	[ $VERBOSE -ge 1 ] && echo list: $list


# Calculate Binary Dependencies and update the DEPS var within the build file.
elif [[ $MODE == "buildbdeps" ]]; then
	for p in $list; do
		buildBDeps $p
	done
fi

# Update the sha1sum of all files for the given package.
# Accept a list of 'all'; Not recommended as our repository is getting quite large =]
if [[ $HASH_UPDATE ]]; then
	echo " * Updating SHA1 hashes."
	source "${INSTALL_PATH}/libs/updateallsha1.sh"
	for p in $list; do
		p=$(echo ${p#=} | sed -e 's,-[0-9].*$,,')
		updatesha1 $p
	done
	exit 0
fi

# Build the installed kernel, will automatically rebuild all kernel modules afterwards.
if [[ $MODE == "buildKernel" ]]; then
	buildKernel
	MODE="rebuildKernelModules"
fi

# Build all kernel modules.
if [[ $MODE == "rebuildKernelModules" ]]; then
	list=$(rebuildModules kernel)
	REQUESTED_LIST=$list
	FORCE=1
fi
# Build all Python Modules
if [[ $MODE == "rebuildPythonModules" ]]; then
	list=$(rebuildModules python)
	echo $list
	REQUESTED_LIST=$list
	FORCE=1
fi
# Build all Perl Modules
if [[ $MODE == "rebuildPerlModules" ]]; then
	list=$(rebuildModules perl)
	REQUESTED_LIST=$list
	FORCE=1
fi

# Attempts to clean a system of all unessential packages.
# This is done by building 2 lists:
#  First we calculate a full list based on our @system and @world sets
#  Aftwards we gather a list of installed packages
# Finally compare the 2 lists and filter out the uniq entries.
# The entries which only exist in 1 list, will be removed.
#  In theory These entries exist installed, but not in the full list of required packages.
#  Its possible however that it got installed, then a package is updated and the uniq entry is a new package.
# FIXME: We should itterate over the list to ensure the uniq pkgs are installed, 
#        if not, error out and tell the user to run: spkg @system @world
if [[ $MODE == "clean" ]]; then
	ENABLE_TESTS=1
	echo " * Deep Cleaning"
	echo " * Gathering a list of @system and @world"
	list=$(expandSets "@system @world")
	echo " * Calculating Package List"
	getFullPkgList $list
	echo " * Getting a list of installed packages."
	find $PKG_CACHE -mindepth 2 -maxdepth 2 -type d | sed "s,$PKG_CACHE/,," > /tmp/installedPkgs
	echo " * Gathering a list of targets to remove"
	list=$(cat /tmp/chart /tmp/installedPkgs | sort | uniq -u)
	REQUESTED_LIST=$list
	MODE="uninstall"
	
	# { output=$(command 2>&1 1>&3-) ;} 3>&1
fi

if [[ $MODE == "bootstrap" ]]; then
	source "${INSTALL_PATH}/libs/bootstrap"
fi

# Get Dependencies and check if any require updates.
if [[ $MODE != "search" ]]; then
	echo " * Calculating Package Order..."
	getFullPkgList $list
	if [[ $VERBOSE -ge 1 ]]; then
		echo "Package Order (Full List):"
		cat /tmp/chart
		echo "Package Order:"
	fi
	list=
	[[ $MODE == "uninstall" ]] && tac /tmp/chart > /tmp/chart2 && mv /tmp/chart{2,}
	for p in $(cat /tmp/chart); do
		setupENV $p

		if [[ $MODE != "uninstall" ]]; then
			# By default we don't install already installed packages, even when requested
			# check forced or empty world.
			version_gt $PKG_VR $O_VER
			if [[ $? == 0 ||
				($FORCE == 1 && $REQUESTED_LIST =~ (^|[[:space:]])"=$PKG_CAT/$PKG_NAME"(-|:|$|[[:space:]])) ||
				! -z $EMPTY_WORLD ]]; then
				echo -n "$PKG_CAT/$PKG_NAME - $PKG_VR [ $O_VER ]"
				[[ $FORCE == 1 ]] && echo -n " (forced)"
				[[ ! -z $IUSE ]] && echo -n " [ $IUSE ]"
				echo
				list+=" $PKG_CAT/$PKG_NAME"
				[[ $PKG_FLAGS != "" ]] && list+="[$PKG_FLAGS]"
			elif [[ $VERBOSE -gt 1 ]]; then
				echo "$PKG_CAT/$PKG_NAME not within REQUESTED_LIST or not FORCE ($REQUESTED_LIST)"
			fi
		else
			if [[ $(getinstalledversion $PKG_CAT/$PKG_NAME) != 0 &&
				($REQUESTED_LIST =~ (^|[[:space:]])"=$PKG_CAT/$PKG_NAME"(-|:|$|[[:space:]])) ]]; then
				echo -n "$PKG_CAT/$PKG_NAME - $PKG_VR [ $O_VER ]"
				[[ $FORCE == 1 ]] && echo -n " (forced)"
				[[ ! -z $IUSE ]] && echo -n " [ $IUSE ]"
				echo
				list+=" $PKG_CAT/$PKG_NAME"
				[[ $PKG_FLAGS != "" ]] && list+="[$PKG_FLAGS]"
			fi
		fi
	done

#	rm /tmp/chart
	[ $PRETEND == 1 ] && exit 0
	[[ -z $list ]] && die "Nothing to upgrade."
fi

# Search
if [[ $MODE == "search" ]]; then
	for p in $list; do
		# User supplied a category but the package wasn't found. Do a search on the package name without the category.
		[[ $p == */* ]] && p=${p#*/}
		echo "Searching: $p"
		for r in $(find $PKG_DB_DIR -maxdepth 2 -iname *$p* | sed "s,$PKG_DB_DIR\(/*\)\?,,"); do
			setupENV $r
			if [[ $PKG_NAME != "" ]]; then
				checkSha1 ${PKG_BLD%/*} $PKG_BLD || die
				echo " * ${PKG_CAT}/${PKG_NAME}-${PKG_VR}"
				echo "    Installed: ${O_VER}"
				(
					source "${PKG_BLD}"
					echo "    Homepage: ${HOMEPAGE}"
					echo "    Description: ${DESCRIPTION}"
					[[ -z $LICENSE ]] && LICENSE="Unknown"
					echo "    License:  ${LICENSE}"
					[[ ! -z $IUSE ]] && echo "    USE: ${IUSE}"
					echo -n "    Deps: ${DEPS}"
					[[ ! -z "$UDEPS" ]] && echo -n " [U:${UDEPS}]"
					[[ ! -z "$RDEPS" ]] && echo -n " [R:${RDEPS}]"
					[[ ! -z "$BDEPS" ]] && echo -n " [B:${BDEPS}]"
					[[ ! -z "$CDEPS" ]] && echo -n " [C:${CDEPS}]"
					echo
				)
				echo
			else
				echo " !! $p not found"
				break
			fi
		done
	done
	exit 0
fi	
installList $list

if [ -e /tmp/preserved ]; then
	echo " * Gathering list of packages to rebuild"
	REQUESTED_LIST=
	for f in $(cat /tmp/preserved); do
		echo -n "$f:"
		pkgs=$(checkFileDep $f | sed 's,/[^/]*$,,'|sort|uniq|tr '\n' ' ')
		echo " $pkgs"
		for d in $pkgs; do
			if [[ ! $REQUESTED_LIST =~ (^|[[:space:]])"$d"($|[[:space:]]) ]]; then
				REQUESTED_LIST+=" $d"
			fi
		done
	done
	list=
	getFullPkgList $REQUESTED_LIST
	for p in $(cat /tmp/chart); do
		setupENV $p

		version_gt $PKG_VR $O_VER
		if [[ $? == 0 || 
			$REQUESTED_LIST =~ (^|[[:space:]])"$PKG_CAT/$PKG_NAME"($|[[:space:]]) ]]; then
			echo -n "$PKG_CAT/$PKG_NAME - $PKG_VR [ $O_VER ]"
			[[ $FORCE == 1 ]] && echo -n " (forced)"
			[[ ! -z $IUSE ]] && echo -n " [ $IUSE ]"
			echo
			list+=" $PKG_CAT/$PKG_NAME"
		fi
	done
	installList $list
	for f in $(cat /tmp/preserved); do
		rm "$f" 2> /dev/null && echo " << $f" || echo " <! $f"
	done
	rm /tmp/preserved
fi

cat "$INFORMLOG" && rm "$INFORMLOG"

# Can use this to find applications/init scripts to restart following an update.
# lsof / | awk '/deleted/ && !/tmp/{print $9}' | sort -u
