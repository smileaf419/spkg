HOMEPAGE=""
DESCRIPTION=""
SRC_URI=("https://github.com/llvm/llvm-project/releases/download/llvmorg-${PKG_VER}/llvm-${PKG_VER}.src.tar.xz"
"https://github.com/llvm/llvm-project/releases/download/llvmorg-${PKG_VER}/clang-${PKG_VER}.src.tar.xz"
"https://github.com/llvm/llvm-project/releases/download/llvmorg-${PKG_VER}/compiler-rt-${PKG_VER}.src.tar.xz"
"https://anduin.linuxfromscratch.org/BLFS/llvm/llvm-cmake-${PKG_VER}.src.tar.xz"
"https://anduin.linuxfromscratch.org/BLFS/llvm/llvm-third-party-${PKG_VER}.src.tar.xz")

PATCHES=("https://www.linuxfromscratch.org/patches/blfs/svn/clang-${PKG_VER}-enable_default_ssp-1.patch")
LICENSE=""
DEPS="app-arch/zstd dev-libs/libffi dev-libs/libxml2 sys-libs/zlib"
BDEPS=""
RDEPS=""
SLOT=0
setBuildENV cmake ninja
BUILD_SEPERATE_DIR=yes
B=llvm-${PKG_VER}.src
IUSE="doc"
# FIXME: These dependencies are not available
# use-enable doc && UDEPS="sphinx recommonmark doxygen"
[[ $ENABLE_TESTS == 1 ]] && UDEPS+=" net-misc/rsync psutil"

src_unpack() {
	SRC_URI=($SRC_URI)
	for f in ${SRC_URI[@]}; do
		unpack ${DISTFILES}/${f##*/}
	done
	CLANG=${SRC_URI[1]##*/}
	mv -v ${CLANG%.tar*} $B/tools/clang
	CRT=${SRC_URI[2]##*/}
	mv -v ${CRT%.tar*} $B/projects/compiler-rt
	mv -v cmake-${PKG_VER}.src cmake
	mv -v third-party-${PKG_VER}.src third-party
}

src_patch() {
	PATCHES=($1)
	patch -Np2 -d tools/clang < $DISTFILES/${PATCHES[0]##*/}
}

src_configure() {
	# Fix python scripts to use python3
	grep -rl '#!.*python' .. | xargs sed -i '1s/python$/python3/'

	# Fix a broken testcase caused by enabling SSP by default
	sed 's/clang_dfsan/& -fno-stack-protector/' \
		-i ../projects/compiler-rt/test/dfsan/origin_unaligned_memtrans.c
    
	CC=gcc CXX=g++                                  \
	configure_default \
		  -DLLVM_ENABLE_FFI=ON                      \
		  -DLLVM_BUILD_LLVM_DYLIB=ON                \
		  -DLLVM_LINK_LLVM_DYLIB=ON                 \
		  -DLLVM_ENABLE_RTTI=ON                     \
		  -DLLVM_TARGETS_TO_BUILD="host;AMDGPU;BPF" \
		  -DLLVM_BINUTILS_INCDIR=/usr/include       \
		  -DLLVM_INCLUDE_BENCHMARKS=OFF             \
		  -DCLANG_DEFAULT_PIE_ON_LINUX=ON           \
		  -Wno-dev -G Ninja

	if use-enable doc; then
		echo " * Building Documentation"
		cmake -DLLVM_BUILD_DOCS=ON            \
			  -DLLVM_ENABLE_SPHINX=ON         \
			  -DSPHINX_WARNINGS_AS_ERRORS=OFF \
			  -Wno-dev -G Ninja ..
		ninja docs-llvm-html  docs-llvm-man
		echo " * Building clang Documentation"
		ninja docs-clang-html docs-clang-man
		echo " * Building Doxygen Documentation"
		ninja doxygen-html
	fi
}

src_compile() {
	append-flags -flarge-source-files	
	compile_default
}

src_test() {
	ninja check-all
}

src_install() {
	install_default
	cp bin/FileCheck "${D}"/usr/bin
	if use-enable doc; then
		install -v -d -m755 /usr/share/doc/llvm-${PKG_VER}
		mv -v /usr/share/doc/LLVM/llvm /usr/share/doc/llvm-${PKG_VER}
		rmdir -v --ignore-fail-on-non-empty /usr/share/doc/LLVM

		install -v -d -m755 /usr/share/doc/llvm-${PKG_VER}
		mv -v /usr/share/doc/LLVM/clang /usr/share/doc/llvm-${PKG_VER}
		rmdir -v --ignore-fail-on-non-empty /usr/share/doc/LLVM

		# FIXME: Doxygen documentation was suppose to be built, how to install it?
	fi
}
