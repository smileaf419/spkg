####
## LLVM build script
## Referenced linuxfromscratch and Slackware's directions.

HOMEPAGE="https://llvm.org/docs/index.html"
DESCRIPTION="A collection of modular and reusable compiler and toolchain technologies"
LICENSE="Apache-2 LLVM"
SRC_URI=("https://github.com/llvm/llvm-project/releases/download/llvmorg-${PKG_VER}/llvm-${PKG_VER}.src.tar.xz"
# Support Files
"https://github.com/llvm/llvm-project/releases/download/llvmorg-${PKG_VER}/cmake-${PKG_VER}.src.tar.xz"
"https://github.com/llvm/llvm-project/releases/download/llvmorg-${PKG_VER}/third-party-${PKG_VER}.src.tar.xz"
# Tools
"https://github.com/llvm/llvm-project/releases/download/llvmorg-${PKG_VER}/clang-${PKG_VER}.src.tar.xz"
#"https://github.com/llvm/llvm-project/releases/download/llvmorg-${PKG_VER}/flang-${PKG_VER}.src.tar.xz"
"https://github.com/llvm/llvm-project/releases/download/llvmorg-${PKG_VER}/lldb-${PKG_VER}.src.tar.xz"
"https://github.com/llvm/llvm-project/releases/download/llvmorg-${PKG_VER}/lld-${PKG_VER}.src.tar.xz"
# clang tools
"https://github.com/llvm/llvm-project/releases/download/llvmorg-${PKG_VER}/clang-tools-extra-${PKG_VER}.src.tar.xz"
# Projects
"https://github.com/llvm/llvm-project/releases/download/llvmorg-${PKG_VER}/compiler-rt-${PKG_VER}.src.tar.xz"
"https://github.com/llvm/llvm-project/releases/download/llvmorg-${PKG_VER}/openmp-${PKG_VER}.src.tar.xz"
"https://github.com/llvm/llvm-project/releases/download/llvmorg-${PKG_VER}/libcxx-${PKG_VER}.src.tar.xz"
"https://github.com/llvm/llvm-project/releases/download/llvmorg-${PKG_VER}/libcxxabi-${PKG_VER}.src.tar.xz"
"https://github.com/llvm/llvm-project/releases/download/llvmorg-${PKG_VER}/polly-${PKG_VER}.src.tar.xz"
"https://github.com/llvm/llvm-project/releases/download/llvmorg-${PKG_VER}/libunwind-${PKG_VER}.src.tar.xz")

#PATCHES=("https://www.linuxfromscratch.org/patches/blfs/svn/clang-${PKG_VER}-enable_default_ssp-1.patch")
DEPS="app-arch/zstd dev-libs/libffi dev-libs/libxml2 sys-libs/zlib"
BDEPS="dev-lang/python"
RDEPS=""
ARCHS="~x86 ~x86_64"
SLOT=0
setBuildENV cmake ninja
BUILD_SEPERATE_DIR=yes
B=llvm-${PKG_VER}.src
IUSE="doc"
# FIXME: These dependencies are not available
# use-enable doc && UDEPS="sphinx recommonmark doxygen"
[[ $ENABLE_TESTS == 1 ]] && UDEPS+=" net-misc/rsync dev-python/psutil"

PYTHON_VER=$(Installed-getPkg dev-lang/python | getLatest | getVersion)
PYTHON_VER=${PYTHON_VER%.*}

src_unpack() {
	SRC_URI=($SRC_URI)
	for f in ${SRC_URI[@]}; do
		file=${f##*/}
		unpack ${DISTFILES}/${file}
		P=${file%-*}
		[[ $file == third* ]] && P='third-party'
		[[ $file == clang-tools* ]] && P='clang-tools-extra'
		case $P in
			cmake)             dir=$BUILD_PATH ;;
			third-party)       dir=$BUILD_PATH ;;
			clang)             dir=$B/tools ;;
#			flang)             dir=$B/tools ;;
			lldb)              dir=$B/tools ;;
			lld)               dir=$B/tools ;;
			clang-tools-extra) dir=$B/tools/clang/tools ;;
			compiler-rt)       dir=$B/projects ;;
			openmp)            dir=$B/projects ;;
			libcxx)            dir=$B/projects ;;
			libcxxabi)         dir=$B/projects ;;
			polly)             dir=$B/projects ;;
			libunwind)         dir=$B/projects ;;
		esac
		[[ $file != llvm* ]] && mv -v "${file%.tar*}" "$dir/$P"
	done
	ln -sf */runtimes .
}

#src_patch() {
#	PATCHES=($1)
#	patch -Np2 -d tools/clang < $DISTFILES/${PATCHES[0]##*/}
#}

src_configure() {
	# Fix python scripts to use python3
	grep -rl '#!.*python' .. | xargs sed -i '1s/python$/python3/'

	# Fix a broken testcase caused by enabling SSP by default
	sed 's/clang_dfsan/& -fno-stack-protector/' \
		-i ../projects/compiler-rt/test/dfsan/origin_unaligned_memtrans.c

	mkdir include
	# Copy this LLVM libunwind header or it won't be found:
	cp -a ../projects/libunwind/include/mach-o include
	# Nuke LLVM libunwind as it conflicts with the one already on the system:
	rm -r ../projects/libunwind

	[[ $ARCH == *x86_64 ]] && append-cflags -fPIC
	# Used if we use the clang compiler?
#	append-cflags -Wno-gnu-line-marker -Wno-gnu-anonymous-struct --Wno-unknown-warning-option
	# Why doesn't -lncurses work? don't we have a link? :/

	## Doesn't appear to be honored...
#	append-ldflags -lcursesw -lncursesw -ltinfow

	CC=gcc CXX=g++                                \
	configure_default                             \
		-DCMAKE_C_FLAGS:STRING="$CFLAGS"          \
		-DCMAKE_CXX_FLAGS:STRING="$CFLAGS"        \
		-DLLVM_ENABLE_FFI=ON                      \
		-DLLVM_BUILD_LLVM_DYLIB=ON                \
		-DLLVM_LINK_LLVM_DYLIB=ON                 \
		-DLLVM_ENABLE_RTTI=ON                     \
		-DLLVM_TARGETS_TO_BUILD="host;AMDGPU;BPF" \
		-DLLVM_BINUTILS_INCDIR=/usr/include       \
		-DLLVM_INCLUDE_BENCHMARKS=OFF             \
		-DCLANG_DEFAULT_PIE_ON_LINUX=ON           \
		-DLLVM_ENABLE_ZLIB=ON                     \
		-DLLVM_ENABLE_ASSERTIONS=OFF              \
		-DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=NO   \
		-DLLVM_INSTALL_UTILS=ON                   \
		-DLIBCXX_INCLUDE_BENCHMARKS=OFF           \
		-DCOMPILER_RT_BUILD_LIBFUZZER=OFF         \
		-DLIBCXX_ENABLE_ABI_LINKER_SCRIPT=ON      \
		-Wno-dev -G Ninja

#		-DCMAKE_C_COMPILER="clang"                \
#		-DCMAKE_CXX_COMPILER="clang++"            \
#		-DLLVM_USE_LINKER=lld                     \

	if use-enable doc; then
		echo " * Building Documentation"
		cmake -DLLVM_BUILD_DOCS=ON            \
			  -DLLVM_ENABLE_SPHINX=ON         \
			  -DSPHINX_WARNINGS_AS_ERRORS=OFF \
			  -Wno-dev -G Ninja ..
		ninja docs-llvm-html  docs-llvm-man
		echo " * Building clang Documentation"
		ninja docs-clang-html docs-clang-man
		echo " * Building Doxygen Documentation"
		ninja doxygen-html
	fi
}

src_compile() {
	append-cppflags -flarge-source-files
	## Ahh the irritating ncursesw, here we have to enforce it as it doesn't seem to honor CFLAGS even when sent to cmake?
	grep -r -- '-lcurses' . | sed 's,:.*,,' | uniq | xargs sed -i 's,-lcurses,-lcursesw -ltinfow,'
	compile_default
}

src_test() {
	ninja check-all
}

src_install() {
	install_default

	# Install clang-static-analyzer:
	for i in ccc c++; do
		ln -s /usr/libexec/$i-analyzer \
		$D/usr/bin/$i-analyzer || exit 1
	done

	# Ensure lit-cpuid is installed:
	if [ ! -r $D/usr/bin/lit-cpuid ]; then
	cp -a build/bin/lit-cpuid $D/usr/bin/lit-cpuid
	chown root:root $D/usr/bin/lit-cpuid
	chmod 755 $D/usr/bin/lit-cpuid
	fi

	# Remove symlink to libgomp, which is already provided by gcc:
	rm -f $D/usr/lib$LIBDIRSUFFIX/libgomp.so

	# Install Python bindings:
	mkdir -p "$D/usr/lib/python${PYTHON_VER}/site-packages"
	cp -a tools/clang/bindings/python/clang "$D/usr/lib/python${PYTHON_VER}/site-packages/"

	# Remove bundled python-six:
	rm -f "$D/usr/lib/python${PYTHON_VER}/site-packages/six.py"

	# Compile Python scripts:
	python -m compileall    "$D/usr/lib/python${PYTHON_VER}/site-packages/clang"
	python -O -m compileall "$D/usr/lib/python${PYTHON_VER}/site-packages/clang"
	python -m compileall    "$D/usr/lib/python${PYTHON_VER}/site-packages/lldb"
	python -O -m compileall "$D/usr/lib/python${PYTHON_VER}/site-packages/lldb"
	python -m compileall    "$D/usr/share/scan-view"
	python -O -m compileall "$D/usr/share/scan-view"
	python -m compileall    "$D/usr/share/clang"
	python -O -m compileall "$D/usr/share/clang"
	python -m compileall    "$D/usr/share/opt-viewer"
	python -O -m compileall "$D/usr/share/opt-viewer"

	cp bin/FileCheck "${D}"/usr/bin

	if use-enable doc; then
		install -v -d -m755 /usr/share/doc/llvm-${PKG_VER}
		mv -v /usr/share/doc/LLVM/llvm /usr/share/doc/llvm-${PKG_VER}
		rmdir -v --ignore-fail-on-non-empty /usr/share/doc/LLVM

		install -v -d -m755 /usr/share/doc/llvm-${PKG_VER}
		mv -v /usr/share/doc/LLVM/clang /usr/share/doc/llvm-${PKG_VER}
		rmdir -v --ignore-fail-on-non-empty /usr/share/doc/LLVM

		# FIXME: Doxygen documentation was suppose to be built, how to install it?
	fi
}
