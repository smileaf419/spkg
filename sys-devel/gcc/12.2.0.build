HOMEPAGE="https://gcc.gnu.org/"
DESCRIPTION="GNU Compiler Collection"
SRC_URI=("https://ftp.gnu.org/gnu/gcc/gcc-${PKG_VER}/gcc-${PKG_VER}.tar.xz")
[[ $VERIFY_SIG == 1 ]] && SRC_URI+=("https://ftp.gnu.org/gnu/gcc/gcc-${PKG_VER}/gcc-${PKG_VER}.tar.xz.sig")
LICENSE=""
TEST=1
DEPS="app-arch/zstd dev-libs/gmp dev-libs/mpc dev-libs/mpfr sys-libs/zlib"
BDEPS=""
RDEPS=""
SLOT=0
BUILD_SEPERATE_DIR=yes

src_configure() {
#	case $(uname -m) in
#	  x86_64)
#	    sed -e '/m64=/s/lib64/lib/' \
#	        -i../.orig ../gcc/config/i386/t-linux64
#	  ;;
#	esac

	../configure --prefix=/usr            \
	             LD=ld                    \
	             --enable-languages=c,c++ \
	             --enable-default-pie     \
	             --enable-default-ssp     \
	             --disable-multilib       \
	             --disable-bootstrap      \
	             --with-system-zlib
}

src_test() {
	ulimit -s 32768
	PATH=$PATH make -k check
	../contrib/test_summary | grep -A7 Summ
}

src_install() {
	install_default
	
	chown -v -R root:root \
	    "${D}"/usr/lib/gcc/$(gcc -dumpmachine)/${PKG_VER}/include{,-fixed}
	ln -svr "${D}"/usr/bin/cpp "${D}"/usr/lib
	mkdir -p "${D}"/usr/lib/bfd-plugins
	ln -sfv ../../libexec/gcc/$(gcc -dumpmachine)/${PKG_VER}/liblto_plugin.so \
        "${D}"/usr/lib/bfd-plugins/
	ln -sv gcc "${D}"/usr/bin/cc

if [ TEST == 1 ]; then
	# Test!
	echo 'int main(){}' > dummy.c
	cc dummy.c -v -Wl,--verbose &> dummy.log
	readelf -l a.out | grep ': /lib'
	grep -o '/usr/lib.*/crt[1in].*succeeded' dummy.log
	grep -B4 '^ /usr/include' dummy.log
	grep 'SEARCH.*/usr/lib' dummy.log |sed 's|; |\n|g'
	grep "/lib.*/libc.so.6 " dummy.log
	grep found dummy.log
	rm -v dummy.c a.out dummy.log
fi

	mkdir -pv "${D}"/usr/share/gdb/auto-load/usr/lib
	mv -v "${D}"/usr/lib*/*gdb.py "${D}"/usr/share/gdb/auto-load/usr/lib
}

bootstrap() {
	MPFR_VER=$(getpkgver $(getlatestversion dev-libs/mpfr))
	GMP_VER=$(getpkgver $(getlatestversion dev-libs/gmp))
	MPC_VER=$(getpkgver $(getlatestversion dev-libs/mpc))
	pushd ..
		unpack ${DISTFILES}/mpfr-$MPFR_VER.tar.xz
		mv -v mpfr-$MPFR_VER mpfr
		unpack ${DISTFILES}/gmp-$GMP_VER.tar.xz
		mv -v gmp-$GMP_VER gmp
		unpack ${DISTFILES}/mpc-$MPC_VER.tar.gz
		mv -v mpc-$MPC_VER mpc
	popd
	local glibc=$(getpkgver $(getlatestversion sys-libs/glibc))
	echo " * Using glibc: $glibc"
	sed -e '/m64=/s/lib64/lib/' \
		-e '/m32=/s/m32=.*/m32=..\/lib32$(call if_multiarch,:i386-linux-gnu)/' \
		-i.orig ../gcc/config/i386/t-linux64
#	local mlist=m64,m32,mx32
	local mlist=m64
	case $PKG_FLAGS in
		pass1)
			../configure                    \
			    --target=$HOST_TGT          \
			    --prefix=$ROOT/tools        \
			    --with-glibc-version=$glibc \
				--with-sysroot=$ROOT        \
			    --with-newlib               \
				--without-headers           \
			    --enable-default-pie        \
			    --enable-default-ssp        \
			    --disable-nls               \
			    --disable-shared            \
				--enable-multilib           \
				--with-multilib-list=$mlist \
				--disable-decimal-float     \
			    --disable-threads           \
			    --disable-libatomic         \
			    --disable-libgomp           \
			    --disable-libquadmath       \
			    --disable-libssp            \
			    --disable-libvtv            \
			    --disable-libstdcxx         \
			    --enable-languages=c,c++ &&
			compile_default && install_default
		;;
		libstdc++)
			../libstdc++-v3/configure           \
			    --host=$HOST_TGT                \
			    --build=$(../config.guess)      \
			    --prefix=/usr                   \
			    --enable-multilib               \
			    --disable-nls                   \
			    --disable-libstdcxx-pch         \
		    	--with-gxx-include-dir=/tools/$HOST_TGT/include/c++/${PKG_VER} &&
		   	compile_default && install_default &&
			find "$D/$ROOT"/usr/lib{,64,exec} -name \*.la -delete || true
		;;
		pass2)
			sed '/thread_header =/s/@.*@/gthr-posix.h/' -i ../libgcc/Makefile.in ../libstdc++-v3/include/Makefile.in &&
			../configure                                       \
			    --build=$(../config.guess)                     \
			    --host=$HOST_TGT                               \
			    --target=$HOST_TGT                             \
			    LDFLAGS_FOR_TARGET=-L$PWD/$HOST_TGT/libgcc     \
			    --prefix=/usr                                  \
			    --with-build-sysroot=$ROOT                     \
    			--enable-default-pie                           \
    			--enable-default-ssp                           \
				--enable-initfini-array                        \
    			--disable-nls                                  \
				--enable-multilib --with-multilib-list=$mlist  \
				--disable-decimal-float                        \
			    --disable-libatomic                            \
			    --disable-libgomp                              \
			    --disable-libquadmath                          \
			    --disable-libssp                               \
			    --disable-libvtv                               \
			    --enable-languages=c,c++
			compile_default
			install_default
			ln -sv gcc $D/$ROOT/bin/cc
			find "$D/$ROOT"/usr/lib{,64,exec} -name \*.la -delete || true
		;;
	esac
}

post_install() {
	if [[ $PKG_FLAGS == "pass1" ]]; then
		echo " * Generating limits.h"
		cd $BUILD_PATH/$B && 
		cat gcc/limitx.h gcc/glimits.h gcc/limity.h > \
				`dirname $($HOST_TGT-gcc -print-libgcc-file-name)`/install-tools/include/limits.h || die "Error generating limits.h"
	fi
}
