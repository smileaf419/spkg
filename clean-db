#!/bin/bash
####
## Clean-db
## Copyright 2023 spkg developers, licensed under GPLv2
##
## Helps to keep our DB clean by removing excess builds
#set -x
source /etc/spkg.conf

MAX_BUILDS=2
[[ $ARCH == ~* ]] && ARCH=${ARCH#\~}

echo " * Cleaning Builds for ARCH $ARCH"

## Function to figure out where this script is at so we can reference our libs directory.
## Taken from:
## https://stackoverflow.com/questions/59895/how-do-i-get-the-directory-where-a-bash-script-is-located-from-within-the-script
whereAmI() {
	local SOURCE=${BASH_SOURCE[0]}
	while [ -L "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
		local DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
		SOURCE=$(readlink "$SOURCE")
		[[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
	done
	local DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
	echo $DIR
}

## Include our libraries
INSTALL_PATH=$(whereAmI)
source "${INSTALL_PATH}/libs/pkg-tools"
source "${INSTALL_PATH}/libs/list-tools"
source "${INSTALL_PATH}/libs/pkg-utils"
source "${INSTALL_PATH}/libs/utils"
source "${INSTALL_PATH}/libs/updatesha1"
source "${INSTALL_PATH}/libs/build-tools"

DB-getPkgByArch() {
	## Save our flags
	local flags=$(getFlags $1)

	## Set the environment with known values.
	local PKG_SLOT=$3

	for l in $(DB-getPkgList $1 | filterStable $2 | filterSlot $3 | sort -V); do
		fileToList $l $flags
	done
}

## Filter packages by ARCH and return a list of either stable or unstable
filterStable() {
	local arch=${1:-$ARCH}
	local f=~
	## If we're using an unstable ARCH, we need to enable the ability for it to match packages marked as stable too.
#	[[ ${arch:0:1} != '~' ]] && f='~'
	arch=${arch#\~}
	echo $(cat -) | xargs grep -l 'ARCHS=.*'[^-~]$arch'[ "]' 2> /dev/null || true
}

cleanPkg() {
	local d=$1
	local slot=${PKG_SLOT:-0}
	## We need to ensure we do 2 checks, 1 for stable, 1 for unstable
	## This also needs to ensure we also do 1 check for each ARCH.
	## This is to ensure each ARCH has a stable version if available.
	NUM=$(DB-getPkgByArch $d $ARCH $slot | wc -l)
	if [[ $NUM -gt $MAX_BUILDS ]]; then
		## This does not honor PKG_SLOT differences!
		FILES=( $(DB-getPkgByArch $d $ARCH $slot | head -n $(( $NUM - $MAX_BUILDS )) ) )
		echo -n $d:
		local updated=0
		for p in ${FILES[*]}; do
			SLOT=$(getPkgSlot $(getBldFile $p))
			if [[ $SLOT == $slot ]]; then
				echo -n "$(getVerRev $p) "
				rm $(getBldFile $p)
				updated=1
			else
				echo " multiple or incorrect slot not cleaning: $PKG_SLOT"
				[[ $PKG_SLOT == 0 || -z $PKG_SLOT ]] && break
			fi
		done
		if [[ $updated == 1 ]]; then
			rm $d/sha1
			echo
			updatesha1 $d
		fi
#	elif [[ $NUM == 0 ]]; then
#		echo "$d Has No builds marked as $ARCH"
#	else
#		echo "$d has $NUM builds (< $MAX_BUILDS)"
	fi
}

cd $PKG_DB_DIR
#SPKG_PKG_LIST=${SPKG_PKG_LIST:-}
CHART=/tmp/chart
if [[ ! -z $@ ]]; then
#	SPKG_PKG_LIST="-wholename $SPKG_PKG_LIST"
	populate_list $@
else
	list=($(find * -mindepth 1 -maxdepth 1 -type d))
	populate_list $list
fi

list=$(cat $CHART)

length=${#list[@]}

for (( l=0; l<${length}; l++ )); do
	## Current #
	C=$(( ${l} + 1 ))
	## PKG entry
	d=${list[$l]}
#	set +x
	setPkgENV $d > /dev/null 2>&1
#		set -x
#	[[ $d == *spkg-sets* || $d == *.git* ]] && continue

#	echo -ne "\r $C / $length: $d                             "
#	PKG_CAT=${d%/*}
#	PKG_NAME=${d#*/}
	printf "\r %3d / %3d : %17s/%-23s" $C $length $PKG_CAT $PKG_NAME
	cleanPkg $d
done
echo
