#!/bin/bash
####
## Package Tools
## Author: Stephen Leaf <smileaf@me.com>
## Date: 2023-04-08
##
## Methods are split-up into 3 segments:
## (this file)
## Installed - Used to retrieve data from installed packages
## DB        - Used to retrieve current data from available packages.
##
## Utils     - Useful methods build files may need to perform commonly operations.
##
## Installed and Db should contain the same named methods but from different pools (PKG_DB_DIR and PKG_CACHE)
## All methods take a PKG: PKG_CAT/PKG_NAME/PKG_VER/PKG_REV/PKG_VER_RESTRICT/PKG_SLOT/PKG_FLAGS/PKG_ARCHS/PKG_USE
## Even if one or more are missing, unless otherwise noted.

export PKG_CAT
export PKG_NAME
export PKG_VER
export PKG_REV
export PKG_VER_RESTRICT
export PKG_SLOT
export PKG_FLAGS
export PKG_ARCHS
export PKG_USE

####
## Setup package Environmental Variables for building
## Requires a LENTRY or at minimum PKG_NAME
setupENV() {
	EntryParser $1 > /dev/null
	## If we're uninstalling we need to report the installed version
	export PKG
	if [[ $MODE == 'uninstall' || $MODE == 'rebuild' ]]; then
		PKG=$(Installed-getPkg $PKG)
	else
		PKG=$(DB-getPkg $PKG | getLatest)
	fi
	## If we didn't find a result, get the full list and grab the latest.
	## This skips the filter* functions.
	if [[ $PKG == "" || $PKG == 0 ]]; then
#       >&2 echo " * PKG ($1) not found, its possible all versions are marked as unstable for your arch."
		PKG=$(DB-getPkgList $1 | fileToList | getLatest)
		if [[ $PKG == "" || $PKG == 0 ]]; then
#           >&2 echo " ! $1 not found for any arch/slot"
			return
		fi
	fi
	setPkgENV $PKG > /dev/null
	export BUILD_PATH="${WORKDIR_BASE}/${PKG_NAME}"
	## Default archive build directory
	export B="${PKG_NV}"
	## Temp install root
	export INSTALL_ROOT_BASE="$BUILD_PATH/troot"
	export D="$INSTALL_ROOT_BASE/$ROOT"
	## Installed version filtered by PKG_SLOT
	export O_VER=$(Installed-getPkg $PKG | getVerRev)

	if [[ $VERBOSE -ge 2 ]]; then
		>&2 echo "       PKG : $PKG"
		>&2 echo "BUILD_PATH : $BUILD_PATH"
		>&2 echo "         B : $B"
		>&2 echo "         D : $D"
		>&2 echo "     O_VER : $O_VER"
	fi
}

### Misc Methods used by both Installed and DB versions.

## Filters PKG_BLDs by ARCH
filterArch() {
	local arch=${1:-$ARCH}
	local f=

	## If we're using an unstable ARCH, we need to enable the ability for it to match packages marked as stable too.
	[[ ${arch:0:1} != '~' ]] && f='~'
	arch=${arch#\~}
	echo $(cat -) | xargs grep -l 'ARCHS=.*'[^-$f]$arch'[ "]' 2> /dev/null || true
}
export -f filterArch

## Filter PKG_BLDs by PKG_SLOT
filterSlot() {
	local p=$(cat -)
	local slot=${1:-0}

	## No slot, no filter
	if [[ $slot == 0 ]]; then
		echo $p | tr ' ' '\n'
	else
		for pkg in $p; do
			if [[ $(getPkgSlot $pkg) == $slot ]]; then
				echo $pkg
			fi
		done
#		echo $p | xargs grep -l "SLOT=$slot" 2> /dev/null || true
	fi
}
export -f filterSlot

## Read a build file and output the slot
getPkgSlot() {
	[[ $1 != *.build ]] && echo 0 && return
	(
		source $1
		echo $SLOT
	)
}
export -f getPkgSlot

## Turns a file path into a / seperated list of data.
## If a 2nd argument is given, assumes its PKG_FLAGS.
## PKG_CAT/PKG_NAME/PKG_VER/PKG_REV/PKG_VER_RESTRICT/PKG_SLOT/PKG_FLAGS/PKG_ARCHS/PKG_USE
fileToList() {
	local list
	[[ $1 != '' ]] && list=$1 || list=$(cat -)
	for l in $list; do
		local IFS="/"
		local p=($l)
		unset IFS

		## If our path contains 2 version entries, our path should be PKG_CACHE
		if [[ ${p[-2]}.build == ${p[-1]} ]]; then
			path=${l%/*/*/*/*}/
			p=${l/$path/}; p=${p%/*.build}
		## Our path should be PKG_DB_DIR
		else
			path=${l%/*/*/*}/
			p=${l/$path/}; p=${p%.build}
		fi
		## Output the PKG_CAT/PKG_NAME
		echo -n ${p%/*}/

		## Output the Version
		local ver=$(splitVersion ${p##*/})
		echo -n ${ver%/*}/

		## Output  the revision if it exists.
		if [[ $ver == */* ]]; then
			echo -n ${ver#*/}
		fi

		## Output the slot
		slot=$(grep '[^#]*SLOT=' "$l" | sed 's,.*SLOT=,,')
		echo -n "//$slot/$2/"

		## Output the Archs
		arch=$(grep '[^#]*ARCHS=' "$l" | sed -e 's,.*ARCHS=",,' -e 's,".*$,,' -e 's/ /,/g' || true)
		echo "${arch[*]}/"
	done
}
export -f fileToList

## Turns a / seperated list of data into a list of LENTRY
listToLEntry() {
	local list
	[[ $1 != '' ]] && list=$@ || list=$(cat -)
	for l in $list; do
		echo "=$(getCategory $l)/$(getName $l)-$(getVerRev $l):$(getSlot $l)"
	done
}
export -f listToLEntry

####
## Takes a *-PKG_VER-rPKG_REV
## Returns a PKG_VER/PKG_REV
splitVersion() {
	local p=$1
	## Check for Revision
	local rev=
	if [[ $p == *-r[0-9]* ]]; then
		rev=${p##*-r}
		p=${p%-r*}
	fi

	## Grab the version information
	local ver=
	if [[ $p == *-[0-9]* ]]; then
		ver=${p##*-}
	else
		ver=$p
	fi

	echo -n "$ver"
	[[ ! -z $rev ]] && echo "/$rev" || echo
}
export -f splitVersion

####
## Entry Parser
## This should be used by all functions which need to split up an LENTRY or user supplied input
## This returns a list of / seperated entries.
## PKG_CAT/PKG_NAME/PKG_VER/PKG_REV/PKG_VER_RESTRICT/PKG_SLOT/PKG_FLAGS/PKG_ARCHS/PKG_USE
##
## Supports: =PKG_CAT/PKG_NAME-PKG_VER-rPKG_REV:PKG_SLOT[PKG_FLAGS][USE:PKG_USE]
## And any data maybe omitted.
##
## Restrictions maybe one or more of seperated by |: >1.0 >=1.0 <1.0 <=1.0 =1.0
##
## PKG_USE is used to store what a package may require of the package.
## So if Package A Requires package B to have 'Flag' enabled, This can be used to store that requirement.
## List must be seperated by ',' and no spaces.
##
## PKG_FLAGS is used to store build requirements utilized within @sets.
EntryParser() {
	local p=$1

	local PKG_VER_EQ=0
	PKG_VER_RESTRICT=
	PKG_FLAGS=

	## Add PKG_USE
	if [[ $p == *[USE:* ]]; then
		local flags=${p#*[USE:}
		PKG_FLAGS=${flags%]}
		p=${p%[USE:*}
	fi

	## Check for flags
	if [[ $p == *[* ]]; then
		local flags=${p#*[}
		PKG_FLAGS=${flags%]}
		p=${p%[*}
	fi

	## Check for slot
	PKG_SLOT=0
	if [[ $p == *:* ]]; then
		PKG_SLOT=${p#*:}
		p=${p%:*}
	fi
	####
	## Check for version filters
	## examples: PKG=>1.0<3.0
	##           PKG<3.0
	##           PKG>=1.2.0
	local VLT=
	local VLTE=0
	if [[ $p == *\<* ]]; then
		VLT=${p#*<}
		p=${p%<*}
		if [[ $VLT == *=* ]]; then
			VLTE=1
			VLT=${VLT%=}
			p=${p%=}
			PKG_VER_RESTRICT="<=$VLT"
		else
			PKG_VER_RESTRICT="<$VLT"
		fi
	fi
	local VGT=
	local VGTE=0
	if [[ $p == *\>* ]]; then
		VGT=${p#*>}
		p=${p%>*}
		if [[ ! -z $PKG_VER_RESTRICT ]]; then
			PKG_VER_RESTRICT+="|"
		fi
		if [[ $VGT == *=* ]]; then
			VGTE=1
			VGT=${VGT%=}
			p=${p%=}
			PKG_VER_RESTRICT+=">=$VGT"
		else
			PKG_VER_RESTRICT+=">$VGT"
		fi
	fi

	## Split-up the Version
	PKG_VER=0
	PKG_REV=0
	if [[ $p == *-[0-9]* ]]; then
		local ver=$(splitVersion $p)
		PKG_VER=${ver%/*}
		## Set the Revision if it exists.
		if [[ $ver == */* ]]; then
			PKG_REV=${ver#*/}
			p=${p%-r*}
		fi
		p=${p%-*}
	fi

	## If we have a = in the beginning a version is now required.
	if [[ ${p:0:1} == "=" ]]; then
		p=${p#=}
		if [[ ! -z $PKG_VER_RESTRICT ]]; then
			PKG_VER_RESTRICT+="|"
		fi
		PKG_VER_RESTRICT+="=$PKG_VER"
		if [[ ! -z $PKG_REV ]]; then
			PKG_VER_RESTRICT+="-r$PKG_REV"
		fi
	fi

	## Check for a category
	PKG_CAT=
	if [[ $p == */* ]]; then
		PKG_CAT=${p%/*}
		p=${p#*/}
	fi

	## Whatevers left *should* be the package name.
	PKG_NAME=$p

	if [[ $VERBOSE -gt 2 ]]; then
		>&2 echo "PKG_CAT : $PKG_CAT"
		>&2 echo "PKG_NAME : $PKG_NAME"
		>&2 echo "PKG_VER : $PKG_VER"
		>&2 echo "PKG_REV : $PKG_REV"
		>&2 echo "PKG_VER_RESTRICT : $PKG_VER_RESTRICT"
		>&2 echo "PKG_SLOT : $PKG_SLOT"
		>&2 echo "PKG_FLAGS : $PKG_FLAGS"
		>&2 echo "PKG_USE : $PKG_USE"
	fi

	getPKG
}
export -f EntryParser

####
## Sets Environmental Vars.
setPkgENV() {
	local data=$1

	export PKG_CAT=$(getCategory $data)
	export PKG_NAME=$(getName $data)
	export PKG_VER=$(getVersion $data)
	export PKG_REV=$(getRevision $data)
	export PKG_VER_RESTRICT=$(getVerRestrict $data)
	export PKG_SLOT=$(getSlot $data)
	export PKG_FLAGS=$(getFlags $data)
	export PKG_ARCHS=$(getArchs $data)
	export PKG_USE=$(getPkgUse $data)

	## Within packages *DEPS a Restriction maybe present, Split it out
	if [[ $PKG_NAME =~ (=|<|>) && -z $PKG_VER_RESTRICT ]]; then
		PKG_VER_RESTRICT=${PKG_NAME/${PKG_NAME%%[><=]*}/}
		PKG_NAME=${PKG_NAME%%[><=]*}
	fi

	## Set our Convience Vars
	export PKG_VR=$PKG_VER
	if [[ $PKG_REV != 0 && $PKG_REV != '' && ! -z $PKG_REV ]]; then
		PKG_VR+=-r$PKG_REV
	fi
	export PKG_NVR=${PKG_NAME}-${PKG_VR}
	export PKG_NV=${PKG_NAME}-${PKG_VER}

	export LENTRY=$(getLEntry <<< $data)

	getPKG
	export PKG_BLD=$(getBldFile $PKG)
}
export -f setPkgENV

## Output the most recent PKG with the most recent values.
## And save back to our PKG.
getPKG() {
	## Save the format if any value changes we can reference it with getPKG
	export OUT_PKG='$PKG_CAT/$PKG_NAME/$PKG_VER/$PKG_REV/$PKG_VER_RESTRICT/$PKG_SLOT/$PKG_FLAGS/${PKG_ARCHS[*]}/$PKG_USE'

	PKG=$(eval echo $OUT_PKG)
	echo $PKG
}
export -f getPKG

####
## DB Methods (PKG_DB_DIR)
## Returns the most recent data from our database/repository.

####
## Matches and updates values from the given PKG from the Database
## Returns a list of PKG_CAT/PKG_NAME/PKG_VER/PKG_REV/PKG_VER_RESTRICT/PKG_SLOT/PKG_FLAGS/PKG_ARCHS/PKG_USE
## Returns nothing if nothing is found.
DB-getPkg() {
	local path=${2:-$PKG_DB_DIR}

	## Save our flags
	local flags=$(getFlags $1)

	## Set the environment with known values.
	local PKG_SLOT=$(getSlot $1)

	for l in $(DB-getPkgList $1 | filterArch | filterSlot $PKG_SLOT | sort -V); do
		fileToList $l $flags
	done
}
export -f DB-getPkg

## Returns a list of matching entries.
DB-getPkgList() {
	PKG_CAT=$(getCategory $1)
	PKG_NAME=$(getName $1)
	PKG_VR=$(getVerRev $1)
	[[ $PKG_CAT == '' ]] && PKG_CAT='*'
	[[ $PKG_VR == '' || $PKG_VR == 0 ]] && PKG_VR='*'
	find "$PKG_DB_DIR" -iwholename "$PKG_DB_DIR/${PKG_CAT}/${PKG_NAME}/${PKG_VR}.build"
}
export -f DB-getPkgList

####
## Installed Methods (PKG_CACHE)
## Returns information from our PKG_CACHE dirs

####
## Matches and updates values from the given PKG from what is installed.
## Requires a PKG
## Returns a list of PKG_CAT/PKG_NAME/PKG_VER/PKG_REV/PKG_VER_RESTRICT/PKG_SLOT/PKG_FLAGS/PKG_ARCHS/PKG_USE
## Returns nothing if nothing is found.
Installed-getPkg() {
	local path=${2:-$PKG_CACHE}

	## Set the environment with known values
	PKG_CAT=$(getCategory $1)
	PKG_NAME=$(getName $1)
	PKG_SLOT=$(getSlot $1)

	for l in $(Installed-getPkgList $PKG_CAT/$PKG_NAME | filterSlot $PKG_SLOT); do
		[[ $l == 0 ]] && continue
		fileToList $l
	done
	echo
}
export -f Installed-getPkg

####
## Requires a PKG_CAT/PKG_NAME
## Returns a list of matching entries.
Installed-getPkgList() {
	[[ $EMPTY_WORLD == 1 ]] && echo 0 && return
	local p=${1#/}
	local v=$(find "$PKG_CACHE" -iwholename "*/$p/*.build")
	[[ $v == "" ]] && echo 0 || echo $v | tr ' ' '\n'
}
export -f Installed-getPkgList

####
## Helper methods to take whats returned from *-getPkg and split out the information.

## Accepts a return from *-getPkg
## Returns the value found in the given slot.
getData() {
	local IFS="/"
	local pos=$1
	if [[ $2 != '' ]]; then
		shift
		local data=($@)
	else
		local data=($(cat -))
	fi
	echo "${data[$pos]}"
}
export -f getData

## Returns only the most recent version
getLatest() {
	echo $(cat -) | tr ' ' '\n' |
		sort -V -t/ -k3,3| tail -n1
}
export -f getLatest

####
## Return data functions
## PKG_CAT/PKG_NAME/PKG_VER/PKG_REV/PKG_VER_RESTRICT/PKG_SLOT/PKG_FLAGS/PKG_ARCHS/PKG_USE

getCategory() {
	local data=${@:-$(cat -)}
	getData 0 $data
}
export -f getCategory

getName() {
	local data=${@:-$(cat -)}
	getData 1 $data
}
export -f getName

getVersion() {
	local data=${@:-$(cat -)}
	getData 2 $data | sed 's,-r[0-9]*$,,'
}
export -f getVersion

getRevision() {
	local data=${@:-$(cat -)}
	local rev=$(getData 3 $data)
	[[ $rev == $ver ]] && echo "0" || echo $rev
}
export -f getRevision

getVerRev() {
	local data=${@:-$(cat -)}
	local ver=$(getVersion $data)
	local rev=$(getRevision $data)
	if [[ $ver != '' ]]; then
		if [[ $rev != 0 && $rev != '' ]]; then
			echo $ver-r$rev
		else
			echo $ver
		fi
	else
		echo 0
	fi
}
export -f getVerRev

getVerRestrict() {
	local RESTRICTIONS=${RESTRICTIONS:-/dev/null}
	local data=${@:-$(cat -)}

	## Get Version restrictions on both our data, and if it exists any restriction recorded within our RESTRICTIONS file.
	echo -n $(getData 4 $data) $(if [ -e $RESTRICTIONS ]; then
		## We may have gotten more than 1 entry.
		for data in $(grep $(getCategory $data)/$(getName $data) $RESTRICTIONS 2> /dev/null); do
			getData 4 $data
		done
	## Give each their own line for sort, then merge them all back in, removing the trailing | at the end if it exists.
	fi) | tr ' ' '\n' | sort -u | tr '\n' '|' | sed 's,|$,,'
}
export -f getVerRestrict

getSlot() {
	local data=${@:-$(cat -)}
	getData 5 $data
}
export -f getSlot

getFlags() {
	local data=${@:-$(cat -)}
	getData 6 $data
}
export -f getFlags

getArchs() {
	local data=${@:-$(cat -)}
	getData 7 $data
}
export -f getArchs

####
## This function will return 1 if marked stable for the system's arch
## and 0 if unstable
pkgArch() {
	local data=${@:-$(cat -)}
	local IFS=','
	local archs=($(getArchs $data))
	unset IFS
	local a
	for a in $archs; do
		if [[ ${a#\~} == ${ARCH#\~} ]]; then
			[[ ${a:0:1} == '~' ]]; return $?
		fi
	done
	return 2
}

getPkgUse() {
	local data=${@:-$(cat -)}
	getData 8 $data
}
export -f getPkgUse

getLEntry() {
	local data=${@:-$(cat -)}
	local PKG_CAT=$(getCategory $data)
	local PKG_NAME=$(getName $data)
	local PKG_VR=$(getVerRev $data)
	local PKG_SLOT=$(getSlot $data)
	local PKG_FLAGS=$(getFlags $data)
	local LENTRY=$PKG_CAT/$PKG_NAME
	if [[ $PKG_VR != 0 ]]; then
		LENTRY="=$LENTRY-$PKG_VR"
	fi
	if [[ $PKG_SLOT != 0 ]]; then
		LENTRY+=:$PKG_SLOT
	fi
	if [[ ! -z $PKG_FLAGS ]]; then
		LENTRY+=[$PKG_FLAGS]
	fi
	echo $LENTRY
}
export -f getLEntry

####
## Get a Build file path.
## Requires an ENTRY and a path.
## path maybe 0 for DB or 1 or Installed.
getBldFile() {
	local data=${@:-$(cat -)}
	local PKG_CAT=$(getCategory $data)
	local PKG_NAME=$(getName $data)
	local PKG_VR=$(getVerRev $data)
	local Installed=${2:-0}

	if [[ $MODE == "uninstall" || $Installed == 1 || $MODE == 'rebuild' ]]; then
		PKG_BLD=$PKG_CACHE/${PKG_CAT}/${PKG_NAME}/${PKG_VR}/${PKG_VR}.build
	else
		PKG_BLD=$PKG_DB_DIR/${PKG_CAT}/${PKG_NAME}/${PKG_VR}.build
	fi
	echo $PKG_BLD
}
export -f getBldFile

myABI() {
	case $(uname -m) in
		x86_64) echo 64 ;;
		i*86)   echo 32 ;;
		*) die "Unsupported: $(uname -m)"
	esac
}
export -f myABI

####
## Helper function for builds to specify where to install their libs
## By setting _LIB_ROOT_INSTALL=1 or passing a 1 to this function
## It will output /lib[ABILIB] else /usr/lib[ABILIB]
## By sending a second 1 if the ABILIB matches the current system, it will always install into lib rather than lib64 or lib32.
libdir() {
	_LIB_ROOT_INSTALL=${_LIB_ROOT_INSTALL:-${@:-0}}
	[[ $_LIB_ROOT_INSTALL == 0 ]] && echo -n "/usr"
	local abi=$ABILIB
	if [[ -z $ABILIBS || $abi == $ABILIBS ]] ||
	   [[ $2 == 1 && $ABILIB == $(myABI) ]]; then
		abi=
	fi
	echo "/lib$abi"
}
export -f libdir
